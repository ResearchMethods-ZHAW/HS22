---
title: "KW41 - R Projekt vorbereiten - Übung"
author:
  - name: Adrian Hochreutener
description: " "   
categories: Biodiversity_Ecosystems_S
draft: false
---

{{< include /../../_before-article.qmd >}}

# Arbeiten mit Projekten

Vor den eigentlichen Auswertungen muessen einige Vorbereitungen unternommen werden. Die Zeit, die man hier investiert, wird in der späteren Projektphase um ein Mehrfaches eingespart. 

```{r out.width = "30%", fig.align ="left", echo = FALSE}
knitr::include_graphics("the-r-project-for-statistical-computing.png")
```

Ich empfehle generell mit Projekten zu arbeiten, da diese sehr einfach ausgetauscht (auf verschiedene Rechner) und somit auch reproduziert werden können. Wichtig ist, dass es keine absoluten Arbeitspfade sondern nur relative gibt. Der Datenimport (und -export) kann mithilfe dieser relativen Pfade stark vereinfacht werden. --> Kurz gesagt: Projekte helfen alles am richtigen Ort zu behalten (mehr zur Arbeit mit Projekten: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).

- Erstellt an einem passenden Speicherort ein neues Projekt mit einem treffenden Namen:

--> File / New Project

## Aufgabe 1: Projektaufbau

Nutzt für allen Text, welcher nicht im Code integriert ist, das Symbol #. Wenn ihr den Text als Titel definieren wollt, so dass er in der Übersicht erscheint, müssen vor dem Wort # und nach dem Wort #### eingefügt werden.

```{r}
# Texte, vor denen ein # und nach denen #### stehen, sind Titel
# Texte, vor denen ein # steht, erklaeren den Ablauf
# Zeilen ohne vorangehendes # sind Operationen

# Wenn man rechts neben "Source" und links neben "Environment" klickt 
# (oder CTRL + SHIFT + O --> Show document Outline), 
# oeffnet sich die UEbersicht zu den UEberschriften
```

Tipp: 

- Alt + - = <- 

- Ctrl + Shift + M = %>%

- Ctrl + Shift + C = # vor der ausgewaehlten Zeile

Zuerst immer den __Titel des Projekts__ sowie den __Autor/ die Autorin__ des Skripts nennen. Hier soll auch die __Herkunft der Daten__ ersichtlich sein und falls externe Daten verwendet werden, sollte geklärt werden, wer Dateneigentümer ist (Wildnispark und Meteo Schweiz).

Im Skript soll immer die __Ordnerstruktur__ des Projekts genannt werden. So kann der Arbeitsvorgang auf verschiedenen Rechnern einfach reproduziert werden (ich verwende hier ein Projektornder mit den Unterordnern __skripts, data, results).

Beschreibt zudem folgendes die verwendete __Meteodaten__ (siehe dazu Metadata Meteodaten, --> order_XXX_legend.txt)

Ein Skript soll in R eigentlich immer (mehr oder weniger) nach dem selbem Schema aufgebaut sein. Dieses Schema enthällt (nach den bereits erwähnten Definitionen) 4 Kapitel: 

0) Metadaten und Definitionen
1) Datenimport, 
2) Vorbereitung, 
3) Deskriptive Analyse und Visualisierung und 
4) Multifaktorielle Analyse und Visualisierung.

Bereitet euer Sktipt mit diesen Kapitel vor.

```{r}
#.###########################################################################################
# Einfluss von COVID19 auf das Naherholungsverhalten in WPZ ####
# Fallstudie Modul Research Methods, HS21. Autor/in ####
#.##########################################################################################

#.##########################################################################################
# METADATA UND DEFINITIONEN ####
#.##########################################################################################

# Datenherkunft ####
# ...

#.##########################################################################################
# 1. DATENIMPORT #####
#.##########################################################################################
```

## Aufgabe 2: Laden der Bibliotheken

Geplottet wird mit ggplot, daher wird __tidyverse__ geladen. Diese Bibliothek ergaenzt BASE R in vielerlei Hinsicht uns ist eigentlich fast immer nötig. Da wir es bei Besucherdaten immer mit einem zeitlichen Bezug zu tun haben, benoetigen wir eine passende Bibliothek. Ich arbeite mit __lubridate__, POSIXct waere natuerlich auch moeglich. Base R bietet verschiedene Funktionen um Daten einzulesen. __data.table__ ergaenzt diese Basisfunktionen sehr gut. __ggpubr__ brauchen wir für das Darstellen von mehreren verschiedenen Plots in nur einem. __PerformanceAnalytics__, __MuMIn__, __AICcmodavg__, __fitdistrplus__, __lme4__ und __sjPlot__ werden fuer die spaeteren multivariaten Analysen benoetigt. Die Modellguete werden wir mittels __lattice__, __blmeco__ und __lattice__ pruefen.

- Ladet nun also die benoetigten Bibliotheken.

- Allenfalls muessen diese zuerst mit _install.packages("NAME")_ installiert werden.

```{r eval=FALSE}
# Benoetigte Bibliotheken ####
library(tidyverse) # Data wrangling und piping
library(lubridate) # Arbeiten mit Datumsformaten
library(data.table)# schnelles Dateneinlesen
library(ggpubr)    # to arrange multiple plots in one graph
library(PerformanceAnalytics) # Plotte Korrelationsmatrix
library(MuMIn)     # Multi-Model Inference
library(AICcmodavg)# Modellaverageing
library(fitdistrplus)# Prueft die Verteilung in Daten
library(lme4)      # Multivariate Modelle
library(blmeco)    # Bayesian data analysis using linear models
library(sjPlot)    # Plotten von Modellergebnissen (tab_model)
library(lattice)   # einfaches plotten von Zusammenhängen zwischen Variablen
```

## Aufgabe 3: Zeitliche Definitionen

- Definiert den zeitlichen Horizont, also Start sowie Ende der Untersuchungen. Bezieht in eure Auswertungen den gesamten verfügbaren Zeitraum ein.

Dafür müsst ihr in die Rohdaten eures Zählers schauen. Am einfachsten direkt in der .csv Datei.

```{r eval=FALSE}
depo_start <- as.Date("YYYY-MM-DD")
depo_end <- ...
```

Wichtiger Teil unserer Auswertungen ist der Einfluss des Lockdown auf das Besuchsverhalten. 
-Wir müssen also Start und Ende der beiden Lockdowns in der Schweiz definieren:

```{r eval=FALSE}
lock_1_start_2020 <- as.Date("2020-03-16")
lock_1_end_2020 <- as.Date("2020-05-11")

lock_2_start_2021 <- as.Date("2020-12-22")
lock_2_end_2021 <- as.Date("2021-03-01")
```

Ebenfalls müssen die erste und letzte Kalenderwoche der Untersuchungsfrist definiert werden. Diese werden bei wochenweisen Analysen ausgeklammert da sie i.d.R. unvollstaendig sind (das ist ein späterer Arbeitsschritt). Geht wie oben vor. Tipp: der Befehl __week()__ liefert euch die Kalenderwoche.

Ferienzeiten können einen grossen Einfluss auf das Besucheraufkommen haben. Die relevanten Ferienzeiträume (in meinem Beispiel ab 2019, je nach dem müsst ihr das anpassen) muüsen daher bekannt sein. Zur Definition der Ferien kann z.B. folgend vorgegangen werden:

```{r warning=FALSE, results="hide"}
# (https://www.schulferien.org/schweiz/ferien/2020/)
Fruehlingsferien_2019_start <- as.Date("2019-04-13")
Fruehlingsferien_2019_ende <- as.Date("2019-04-28")
Sommerferien_2019_start <- as.Date("2019-07-6")
Sommerferien_2019_ende <- as.Date("2019-08-18")
Herbstferien_2019_start <- as.Date("2019-10-05")
Herbstferien_2019_ende <- as.Date("2019-10-20")
Winterferien_2019_start <- as.Date("2019-12-21")
Winterferien_2019_ende <- as.Date("2020-01-02")

Fruehlingsferien_2020_start <- as.Date("2020-04-11")
Fruehlingsferien_2020_ende <- as.Date("2020-04-26")
Sommerferien_2020_start <- as.Date("2020-07-11")
Sommerferien_2020_ende <- as.Date("2020-08-16")
Herbstferien_2020_start <- as.Date("2020-10-03")
Herbstferien_2020_ende <- as.Date("2020-10-18")
Winterferien_2020_start <- as.Date("2020-12-19")
Winterferien_2020_ende <- as.Date("2021-01-03")

Fruehlingsferien_2021_start <- as.Date("2021-04-24")
Fruehlingsferien_2021_ende <- as.Date("2021-05-09")
Sommerferien_2021_start <- as.Date("2021-07-17")
```

__Nun sind alle Vorbereitungen gemacht, die Projektstruktur aufgebaut und die eigentliche Arbeit kann beginnen.__
