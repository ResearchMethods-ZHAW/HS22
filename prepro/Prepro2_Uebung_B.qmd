---
date: 2022-10-17
lesson: PrePro2
thema: Piping / Joins
index: 3
---

# Prepro 2: Übung B

{{< include ../_before-article.qmd >}}

```{r}
#| include: false
#| purl: false
knitr::opts_chunk$set(echo = FALSE, collapse=TRUE)
```

```{r}
#| message: false
library(dplyr)
library(readr)
library(lubridate)
library(stringr)
```

## Aufgabe 1

Gegeben sind die Daten von drei Sensoren ([sensor1.csv](https://moodle.zhaw.ch/mod/resource/view.php?id=602226), [sensor2.csv](https://moodle.zhaw.ch/mod/resource/view.php?id=602229), [sensor3.csv](https://moodle.zhaw.ch/mod/resource/view.php?id=602228)). Lade die Datensätze runter und lese sie ein.

```{r}
#| message: false
# Lösung Aufgabe 1

sensor1 <- read_delim(here("data","sensor1.csv"),";")
sensor2 <- read_delim(here("data","sensor2.csv"),";")
sensor3 <- read_delim(here("data","sensor3.csv"),";")
```

## Aufgabe 2

Erstelle aus den 3 Dataframes eine einzige Dataframe, die aussieht wie unten dargestellt. Nutze dafür zwei joins aus `dplyr` um 3 `data.frames` miteinander zu verbinden. Bereinige im Anschluss die Spaltennamen ([wie geht das?](https://www.statology.org/how-to-rename-data-frame-columns-in-r/)).

```{r}
# Lösung Aufgabe 2

sensor1_2 <- full_join(sensor1, sensor2, "Datetime")

sensor_all <- full_join(sensor1_2, sensor3, by = "Datetime")

names(sensor_all) <- c("Datetime","sensor1","sensor2","sensor3")
```

```{r}
#| echo: false
#| purl: false
knitr::kable(head(sensor_all))
```

## Aufgabe 3

Importiere die Datei [sensor_1_fail.csv](https://moodle.zhaw.ch/mod/resource/view.php?id=602230) in `R`.

```{r}
#| message: false
sensor_fail <- read_delim(here("data","sensor_fail.csv"), delim = ";")
```

`sensor_fail.csv` hat eine Variabel `SensorStatus`: `1` bedeutet der Sensor misst, `0` bedeutet der Sensor miss nicht. Fälschlicherweise wurde auch dann der Messwert `Temp = 0` erfasst, wenn `Sensorstatus = 0`. Richtig wäre hier `NA` (not available). Korrigiere den Datensatz entsprechend.

```{r}
#| echo: false
#| eval: !expr T
#| purl: false
knitr::kable(sensor_fail)
```

```{r}
# Lösung Aufgabe 3

sensor_fail$Temp[sensor_fail$SensorStatus == 0] <- NA
```

## Aufgabe 4

Warum spielt das es eine Rolle, ob `0` oder `NA` erfasst wird? Berechne die Mittlere der Temperatur / Feuchtigkeit nach der Korrektur. 

```{r}
#| eval: false
# Lösung Aufgabe 4

# Mittelwerte der korrigierten Sensordaten: mit na.rm = TRUE werden NA-Werte aus der Berechnung entfernt. 
# Ansonsten würden sie als 0 in die Berechnung einfliessen und diese verfälschen.
mean(sensor_fail$Temp, na.rm = TRUE)
```

## Musterlösung

```{r}
#| echo: false
#| message: false
#| results: asis
#| purl: false
#distill::mypurl()
```
