---
title: "Übung B - Piping/Joints"
author:
  - name: Patrick Laube
  - name: Nils Ratnaweera
  - name: Nikolaos Bakogiannis
image: sensor.jpg # https://commons.wikimedia.org/wiki/File:SparkFun_Humidity_and_Temperature_Sensor_Breakout_-_HIH6130_11295-01.jpg
description: " "
lerneinheit: PrePro2
draft: false
---

{{< include ../_before-article.qmd >}}

```{r include=FALSE, purl=F}
knitr::opts_chunk$set(echo = FALSE, collapse=TRUE)
```

```{r,message=F}
library(dplyr)
library(readr)
library(lubridate)
library(stringr)
```

## Aufgabe 1

Gegeben sind die Daten von drei Sensoren ([sensor1.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/sensor1.csv), [sensor2.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/sensor2.csv), [sensor3.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/sensor3.csv)). Lade die Datensätze runter und lese sie ein.

```{r, message=F}
# Lösung Aufgabe 1

sensor1 <- read_delim(here("data","sensor1.csv"),";")
sensor2 <- read_delim(here("data","sensor2.csv"),";")
sensor3 <- read_delim(here("data","sensor3.csv"),";")
```

## Aufgabe 2

Erstelle aus den 3 Dataframes eine einzige Dataframe, die aussieht wie unten dargestellt. Nutze dafür zwei joins aus `dplyr` um 3 `data.frames` miteinander zu verbinden. Bereinige im Anschluss die Spaltennamen ([wie geht das?](https://www.statology.org/how-to-rename-data-frame-columns-in-r/)).

```{r}
# Lösung Aufgabe 2

sensor1_2 <- full_join(sensor1, sensor2, "Datetime")

sensor_all <- full_join(sensor1_2, sensor3, by = "Datetime")

names(sensor_all) <- c("Datetime","sensor1","sensor2","sensor3")
```

```{r echo=FALSE, purl=FALSE}
knitr::kable(head(sensor_all))
```

## Aufgabe 3

Importiere die Datei [sensor_1_fail.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/sensor_fail.csv) in `R`.

```{r, message = F}
sensor_fail <- read_delim(here("data","sensor_fail.csv"), delim = ";")
```

`sensor_fail.csv` hat eine Variabel `SensorStatus`: `1` bedeutet der Sensor misst, `0` bedeutet der Sensor miss nicht. Fälschlicherweise wurde auch dann der Messwert `Temp = 0` erfasst, wenn `Sensorstatus = 0`. Richtig wäre hier `NA` (not available). Korrigiere den Datensatz entsprechend.

```{r,  echo = F, eval = T, purl=F}
knitr::kable(sensor_fail)
```

```{r}
# Lösung Aufgabe 3

sensor_fail$Temp[sensor_fail$SensorStatus == 0] <- NA
```

## Aufgabe 4

Warum spielt das es eine Rolle, ob `0` oder `NA` erfasst wird? Berechne die Mittlere der Temperatur / Feuchtigkeit nach der Korrektur. 

```{r, eval = FALSE}
# Lösung Aufgabe 4

# Mittelwerte der korrigierten Sensordaten: mit na.rm = TRUE werden NA-Werte aus der Berechnung entfernt. 
# Ansonsten würden sie als 0 in die Berechnung einfliessen und diese verfälschen.
mean(sensor_fail$Temp, na.rm = TRUE)
```

## Musterlösung

```{r, echo = FALSE, message=FALSE, results = "asis", purl = FALSE}
#distill::mypurl()
```
