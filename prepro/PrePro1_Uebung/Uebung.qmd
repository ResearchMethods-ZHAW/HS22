---
title: "Übung - Datentypen"
author:
  - name: Patrick Laube
  - name: Nils Ratnaweera
  - name: Nikolaos Bakogiannis
image: preview.png
description: " "
categories: PrePro1
draft: false
---

```{r, include=FALSE, purl = FALSE}
knitr::opts_chunk$set(echo = FALSE, include = TRUE, collapse=TRUE, warning = FALSE)
```

## Arbeiten mit RStudio "Project"

Wir empfehlen die Verwendung von "Projects" innerhalb von RStudio. RStudio legt für jedes Projekt dann einen Ordner an, in welches die Projekt-Datei abgelegt wird (Dateiendung `.Rproj`). Sollen innerhalb des Projekts dann R-Skripts geladen oder erzeugt werden, werden diese dann auch im angelegten Ordner abgelegt. Mehr zu RStudio Projects findet ihr [hier](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).

Das Verwenden von Projects bringt verschiedene Vorteile, wie zum Beispiel:

-   Festlegen der Working Directory ohne die Verwendung des expliziten Pfades (`setwd()`). Das ist sinnvoll, da sich dieser Pfad ändern kann (Zusammenarbeit mit anderen Usern, Ausführung des Scripts zu einem späteren Zeitpunkt)
-   Automatisches Zwischenspeichern geöffneter Scripts und Wiederherstellung der geöffneten Scripts bei der nächsten Session
-   Festlegen verschiedener projektspezifischer Optionen
-   Verwendung von Versionsverwaltungssystemen (git oder SVN)

## Arbeiten mit Libraries / Packages

R ist ohne Zusatzpackete nicht mehr denkbar. Die allermeisten Packages werden auf [CRAN](https://cran.r-project.org/) gehostet und können leicht mittels `install.packages()` installiert werden. Eine sehr wichtige Sammlung von Packages wird von RStudio entwickelt. Unter dem Namen [Tidyverse](https://www.tidyverse.org/) werden eine Reihe von Packages angeboten, den R-Alltag enorm erleichtert. Wir werden später näher auf das "Tidy"-Universum eingehen, an dieser Stelle können wir die Sammlung einfach mal die wichtigsten Packages aus `tidyverse` installieren (heute werden wir davon nur einen kleinen Teil benutzen).

    install.packages("dplyr")
    install.packages("tidyr")
    install.packages("readr")
    install.packages("lubridate")

Um ein `package` in R verwenden zu können, gibt es zwei Möglichkeiten:

-   entweder man lädt es zu Beginn der R-session mittles `library(dplyr)` (ohne Anführungs- und Schlusszeichen).
-   oder man ruft eine `function` mit vorangestelltem Packetname sowie zwei Doppelpunkten auf. `dplyr::filter()` ruft die Funktion `filter()` des Packets `dplyr` auf.

Letztere Notation ist vor allem dann sinnvoll, wenn sich zwei unterschiedliche Funktionen mit dem gleichen namen in verschiedenen pacakges existieren. `filter()` existiert als Funktion einersits im package `dplyr` sowie in `stats`. Dieses Phänomen nennt man "masking".

Zu Beginn laden wir die nötigen Pakete :

```{r,message = F, echo = TRUE}
library(readr)
library(lubridate)

# Im Unterschied zu install.packages() werden bei library()
# keine Anführungs- und Schlusszeichen gesetzt.
```

`dplyr` liefert viele Funktionen, für die es in der normalen R-Umgebung ("base R") keine wirkliche Alternative gibt. Andere Funktionen sind alternativen zu Base-R Funktionen (`read_csv` statt `read.csv`, `read_delim` statt `read.delim`.

Diese verhalten sich leicht anders als Base-R Funktionen: Sie treffen weniger Annahmen und sind etwas konservativer. Wir verwenden oft Tidyverse Funktionen, ihr könnt aber selber entscheiden welche Version ihr benutzt.

## Aufgabe 1

Erstelle eine `data.frame` mit nachstehenden Daten.

Tipps:

-   Eine leere `data.frame` zu erstellen ist schwieriger als wenn erstellen und befüllen der `data.frame` in einem Schritt erfolgt
-   R ist dafür gedacht, Spalte für Spalte zu arbeiten ([warum?](http://www.noamross.net/blog/2014/4/16/vectorization-in-r--why.html)), nicht Reihe für Reihe. Versuche dich an dieses Schema zu halten.

```{r}
# Musterlösung

df <- data.frame(
  Tierart = c("Fuchs","Bär","Hase","Elch"),
  Anzahl = c(2,5,1,3),
  Gewicht = c(4.4, 40.3,1.1,120),
  Geschlecht = c("m","f","m","m"),
  Beschreibung = c("Rötlich","Braun, gross", "klein, mit langen Ohren","Lange Beine, Schaufelgeweih")
  )
```

```{r, echo = FALSE, purl=FALSE}
knitr::kable(df)
```

## Aufgabe 2

Was für Datentypen wurden (in Aufgabe 1) von R automatisch angenommen? Sind diese sinnvoll?

```{r}
# Musterlösung

str(df)
typeof(df$Anzahl)
# Anzahl wurde als `double` interpretiert, ist aber eigentlich ein `integer`. 

df$Anzahl <- as.integer(df$Anzahl)
```

## Aufgabe 3

Nutze die Spalte `Gewicht` um die Tiere in 3 Gewichtskategorien einzuteilen:

-   leicht: \< 5kg
-   mittel: 5 - 100 kg
-   schwer: \> 100kg

```{r}
# Musterlösung

df$Gewichtsklasse[df$Gewicht > 100] <- "schwer"
df$Gewichtsklasse[df$Gewicht <= 100 & df$Gewicht > 5] <- "mittel"
df$Gewichtsklasse[df$Gewicht <= 5] <- "leicht"
```

## Aufgabe 4

Importiere den Datensatz [weather.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/weather.csv) (Rechtsklick -\> Speichern Unter, Quelle MeteoSchweiz). Es handelt sich dabei um die stündlich gemittelten Temperaturdaten an verschiedenen Standorten in der Schweiz. Wir empfehlen [`read_csv()`](http://r4ds.had.co.nz/data-import.html) anstelle von `read.csv()`.

Achtung! `read_csv` erwartet leicht andere inputs als `read.csv`, schaut euch die Hilfe dazu an (`?read_csv`).

```{r, purl = FALSE}
download.file("https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/weather.csv", "weather.csv")
```

```{r, message = F}
# Musterlösung

wetter <- readr::read_csv("weather.csv")
```

```{r, purl=F}
knitr::kable(head(wetter,10))
```

## Aufgabe 5

Schau dir die Rückmeldung von `read_csv()`an. Sind die Daten korrekt interpretiert worden?

```{r}
# Musterlösung
# Die Spalte 'time' wurde als 'integer' interpretiert. Dabei handelt es
# sich offensichtlich um Zeitangaben.
```

## Aufgabe 6

Die Spalte `time` ist eine Datum/Zeitangabe im Format JJJJMMTTHH (siehe [meta.txt](meta.txt)). Damit R dies als Datum-/Zeitangabe erkennt, müssen wir die Spalte in einem R-Format (`POSIXct`) einlesen und dabei R mitteilen, wie sie aktuell formatiert ist. Lies die Spalte mit `as.POSIXct()` ein und spezifiziere sowohl `format` wie auch `tz`.

Tipps:

-   Wenn keine Zeitzone festgelegt wird, trifft `as.POSIXct()` eine Annahme (basierend auf `Sys.timezone()`). In unserem Fall handelt es sich aber um Werte in UTC (siehe [metadata.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/metadata.csv))
-   `as.POSIXct`erwartet `character`: Wenn du eine Fehlermeldung hast die `'origin' must be supplied` (o.ä) heisst, hast du der Funktion vermutlich einen `Numeric` übergeben.

```{r}
wetter$time <- as.POSIXct(as.character(wetter$time), format = "%Y%m%d%H",tz = "UTC")
```

```{r, purl=F}
knitr::kable(head(wetter,10),caption = "Die neue Tabelle sollte so aussehen")
```

## Aufgabe 7

Erstelle zwei neue Spalten mit Wochentag (Montag, Dienstag, etc) und Kalenderwoche. Verwende dazu die neu erstellte `POSIXct`-Spalte

```{r}
# Musterlösung

wetter$wochentag <- wday(wetter$time,label = T)
wetter$kw <- week(wetter$time)
```

```{r, purl=F}
knitr::kable(head(wetter,10))
```

## Aufgabe 8

Erstelle eine neue Spalte basierend auf die Temperaturwerte mit der Einteilung "kalt" (unter Null Grad) und "warm" (über Null Grad)

```{r}
# Musterlösung

wetter$temp_kat[wetter$tre200h0>0] <- "warm"
wetter$temp_kat[wetter$tre200h0<=0] <- "kalt"
```

```{r, purl=F}
knitr::kable(head(wetter,10))
```

```{r, purl = FALSE, include = FALSE}
library(ggplot2)

p <- ggplot(wetter, aes(time, tre200h0)) +
  geom_smooth() +
  theme_minimal()

ggsave("preview.png", p)
```

## Musterlösung

```{r, echo = FALSE, message=FALSE, results = "asis", purl = FALSE, include = TRUE}
#distill::mypurl()
```