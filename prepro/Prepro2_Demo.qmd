---
date: 2022-10-17
lesson: PrePro2
thema: Piping / Joins
index: 1
---

# Prepro 2: Demo

{{< include ../_before-article.qmd >}}

```{r}
#| echo: false
#| message: false
#| results: asis
#| purl: false
#distill::mypurl()
```

## Piping

Gegeben ist ein character string (`diary`). Wir wollen aus diesem Text die Temperaturangabe aus dem String extrahieren und danach den Wert von Kelvin in Celsius nach der folgenden Formel umwandeln und zum Schluss den Mittelwert über all diese Werte berechnen.

$$°C = K - 273.15$$

```{r}
diary <- c(
  "The temperature is 310° Kelvin",
  "The temperature is 322° Kelvin",
  "The temperature is 410° Kelvin"
)

diary
```

Dafür haben wir eine Hilfsfunktion `subtrahieren`, welche zwei Werte annimmt, den `minuend` und den `subtrahend`:

```{r}
subtrahieren <- function(minuend, subtrahend){
  minuend - subtrahend
}
```

Zudem brauchen wir die Funktion `substr()`, welche aus einem `character` einen teil "raus schnipseln" kann.

```{r}
# Wenn die Buchstaben einzelne _Elemente_ eines Vektors wären, würden wir diese
# folgendermassen subsetten:

charvec1 <- c("a", "b", "c", "d", "e", "f", "g", "h")
charvec1[4:6]

# Aber wenn diese in einem einzigen character gespeichert sind, brauchen wir substr:
charvec2 <- "abcdefgh"
substr(charvec2, 4, 6)
```

Übersetzt in `R`-Code entsteht folgende Operation:

```{r}
# 1. Nimm diary
# 2. Extrahiere auf jeder Zeile die Werte 20 bis 22
# 3. Konvertiere "character" zu "numeric"
# 4. Subtrahiere 273.15
# 5. Berechne den Mittlwert

output <- mean(subtrahieren(as.numeric(substr(diary, 20, 22)),273.15))
#                                             \_1_/
#                                      \________2__________/
#                           \___________________3___________/
#              \________________________________4__________________/
#         \_____________________________________5____________________/
```

Die ganze Operation liest sich etwas leichter, wenn diese sequentiell notiert wird:

```{r}
temp <- substr(diary, 20, 22)       # 1, 2
temp <- as.numeric(temp)            # 3
temp <- subtrahieren(temp, 273.15)  # 4
output <- mean(temp)                # 5
```

Umständlich ist dabei einfach, dass die Zwischenresultate immer abgespeichert und in der darauf folgenden Operation wieder abgerufen werden müssen. Hier kommt "piping" ins Spiel: *Mit "piping" wird der Output der einen Funktion der erste Parameter der darauf folgenden Funktion.*

```{r}
library(magrittr)

diary %>%                            # 1
  substr(20, 22) %>%                 # 2
  as.numeric() %>%                   # 3 
  subtrahieren(273.15) %>%           # 4
  mean()                             # 5
```

Noch ein Hinweis: die `%>%` Pipe Operation aus `magrittr` wurde in R so beliebt, dass in R 4.1 ein "base R pipe" eingeführt. Diese sieht folgendermassen aus:

```{r}
diary |>                             # 1
  substr(20, 22) |>                  # 2
  as.numeric() |>                    # 3 
  subtrahieren(273.15) |>            # 4
  mean()                             # 5
```

## Joins

```{r}
studierende <- data.frame(
  Matrikel_Nr = c(100002, 100003, 200003),
  Studi = c("Patrick", "Manuela", "Eva"),
  PLZ = c(8006, 8001, 8820)
)

studierende

ortschaften <- data.frame(
  PLZ = c(8003, 8006, 8810, 8820),
  Ortsname = c("Zürich", "Zürich", "Horgen", "Wädenswil")
)

ortschaften
```

```{r}
#| message: false
#Load library
library(dplyr)

inner_join(studierende, ortschaften, by = "PLZ")

left_join(studierende, ortschaften, by = "PLZ")

right_join(studierende, ortschaften, by = "PLZ")

full_join(studierende, ortschaften, by = "PLZ")
```

```{r}
studierende <- data.frame(
  Matrikel_Nr = c(100002, 100003, 200003),
  Studi = c("Patrick", "Manuela", "Pascal"),
  Wohnort = c(8006, 8001, 8006)
)

left_join(studierende, ortschaften, by = c("Wohnort" = "PLZ"))
```
