---
date: 2022-10-24
lesson: InfoVis1
thema: Plots & Facets
index: 3
---

# Infovis 1: Übung


```{r}
#| include: false
#| purl: false
library(knitr)

knitr::opts_chunk$set(echo = FALSE,include = TRUE,message = FALSE, collapse=TRUE) 
```

In dieser Übung geht es darum, die Grafiken aus dem Blog-post @kovic2014 zu rekonstruieren. Schau dir die Grafiken in dem Blogpost durch. Freundlicherweise wurden im Blogbeitrag die `ggplot2` Standardeinstellungen benutzt, was die Rekonstruktion relativ einfach macht. Die Links im Text verweisen auf die Originalgrafik, die eingebetteten Plots sind meine eigenen Rekonstruktionen. 

Importiere als erstes den Datensatz [initiative_masseneinwanderung_kanton.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/infovis/tagi_data_kantone.csv) (dieser ist auch auf der Blog-Seite verfügbar).

```{r}
#| message: false
library(dplyr)
library(ggplot2)
library(readr)

kanton <- read_csv("data/tagi_data_kantone.csv") 
```

## Aufgabe 1

Rekonstruiere [Grafik 1](https://blog.tagesanzeiger.ch/datenblog/wp-content/uploads/sites/32/2014/03/Kantone-2.png) [@kovic2014]. Erstelle dazu einen Scatterplot wo der Ausländeranteil der Kantone dem Ja-Anteil gegenüber gestellt wird. Speichere den Plot einer Variabel `plot1`.

- nutze `ggplot(kanton, aes(auslanderanteil, ja_anteil))` um den ggplot zu initiieren. Füge danach ein einen Punkte Layer hinzu (`geom_point()`)
- nutze `coord_fixed()` um die beiden Achsen in ein fixes Verhältnis zu setzen (1:1).
- Optional: 
  - setze die Achsen Start- und Endwerte mittels `scale_y_continuous` bzw. `scale_x_continuous`.
  - Setze analog @kovic2014 die `breaks` (0.0, 0.1...0.7) manuell (innerhalb `scale_*_continuous`)

Rekonstruktion:

```{r}
# Lösung zu Aufgabe 1

plot1 <- ggplot(kanton, aes(auslanderanteil, ja_anteil)) +
  geom_point() +
  coord_fixed(1) +
  scale_y_continuous(breaks = c(0,0.1,0.3,0.5,0.7),limits =  c(0,0.7)) +
  scale_x_continuous(breaks = c(0,0.1,0.3,0.5,0.7),limits =  c(0,0.7)) +
  labs(y = "Anteil Ja-Stimmen", x = "Ausländeranteil")

plot1
```

## Aufgabe 2

Rekonstruiere [Grafik 2](https://blog.tagesanzeiger.ch/datenblog/wp-content/uploads/sites/32/2014/03/Kantone-LOESS-986x923.png). Erweitere dazu `plot1` mit einer Trendlinie.

```{r}
# Lösung zu Aufgabe 2

plot1 +
  geom_smooth()
```

## Aufgabe 3

Importiere die Gemeindedaten [initiative_masseneinwanderung_gemeinde.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/infovis/tagi_data_gemeinden.csv). Rekonstruiere danach [Grafik 3](https://blog.tagesanzeiger.ch/datenblog/wp-content/uploads/sites/32/2014/03/Gemeinden-2-986x939.png) indem du den Ausländeranteil aller Gemeinden dem Ja-Stimmen-Anteil gegenüber. Speichere den Plot als `plot2`.

```{r}
# Lösung zu Aufgabe 3

gemeinde <- read_csv("data/tagi_data_gemeinden.csv")

plot2 <- ggplot(gemeinde, aes(anteil_ausl, anteil_ja)) +
  geom_point() +
  labs(x = "Ausländeranteil",y = "Anteil Ja-Stimmen") +
  coord_fixed(1) +
  lims(x = c(0,1), y = c(0,1))

plot2
```

## Aufgabe 4

Rekonstruiere [Grafik 4](https://blog.tagesanzeiger.ch/datenblog/wp-content/uploads/sites/32/2014/03/Gemeinden-GAM-2-986x939.png) indem `plot2` mit einer Trendlinie erweitert wird.

```{r}
# Lösung zu Aufgabe 4

plot2 +
  geom_smooth()
```

## Aufgabe 5

Rekonstruiere [Grafik 5](https://blog.tagesanzeiger.ch/datenblog/wp-content/uploads/sites/32/2014/03/Gemeinden-x-Kantone-2-986x857.png) indem `plot2` mit `facetting` erweitert wird. Die Facets sollen die einzelnen Kantone sein. Speichere den Plot als `plot3`.

```{r}
# Lösung zu Aufgabe 5

plot3 <- plot2 +
  facet_wrap(~kanton)
plot3
```

## Aufgabe 6

Rekonstruiere [Grafik 6](https://blog.tagesanzeiger.ch/datenblog/wp-content/uploads/sites/32/2014/03/Gemeinden-x-Kantone-LOESS-2-986x857.png) indem `plot3` mit einer Trendlinie erweitert wird.

Rekonstruktion:

```{r}
#| warning: false
# Lösung zu Aufgabe 6

plot3 +
  geom_smooth()
```


## Aufgabe 7

Rekonstruiere [Grafik 7](https://blog.tagesanzeiger.ch/datenblog/wp-content/uploads/sites/32/2014/03/Gemeinden-x-Quantile-2-986x637.png) indem `plot2`mit `facetting` erweitert wird. Die Facets sollen nun den Grössen-Quantilen entsprechen. Speichere den Plot unter `plot4`.

Rekonstruktion:

```{r}
# Lösung zu Aufgabe 7

plot4 <- plot2 +
  facet_wrap(~quantile)
plot4
```

## Aufgabe 8

Rekonstruiere [Grafik 8](https://blog.tagesanzeiger.ch/datenblog/wp-content/uploads/sites/32/2014/03/Gemeinden-x-Quantile-LOESS-2-986x637.png) indem `plot4` mit einer Trendlinie ausgestattet wird.

```{r}
# Lösung zu Aufgabe 8

plot4 +
  geom_smooth()
```

## Aufgabe 9 (Optional, fortgeschritten)

Rekonstruiere die [Korrelationstabelle](https://tagi_dwpro.s3.amazonaws.com/UMvkt/2/fs.html).

Tipp: 
- Nutze `group_by()` und `summarise()`
- Nutze `cor.test()` um den Korrelationskoeffizienten sowie den p-Wert zu erhalten. 
- Mit `$estimate` und `$p.value` können die entsprechenden Werte direkt angesprochen werden

Hinweis: aus bisher unerklärlichen Gründen weiche gewisse meiner Werte leicht von den Berechnungen aus @kovic2014 ab.

```{r}
# Lösung zu Aufgabe 9

korr_tab <- gemeinde %>%
  group_by(kanton) %>%
  summarise(
    Korr.Koeffizient = cor.test(anteil_ja,anteil_ausl,method = "pearson")$estimate,
    Signifikanz_val = cor.test(anteil_ja,anteil_ausl,method = "pearson")$p.value,
    Signifikanz = ifelse(Signifikanz_val < 0.001,"***",ifelse(Signifikanz_val<0.01,"**",ifelse(Signifikanz_val<0.05,"*","-")))
  ) %>%
  select(-Signifikanz_val)

```

```{r}
#| echo: false
#| purl: false
knitr::kable(korr_tab,caption = "Legende: * = p<0.05, ** = p<0.01, ***=p<0.001.")
```

