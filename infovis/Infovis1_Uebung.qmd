---
date: 2022-10-24
lesson: InfoVis1
thema: Plots & Facets
index: 3
---

# Infovis 1: Übung

```{r}
#| include: false
#| purl: false
library(knitr)

knitr::opts_chunk$set(echo = FALSE,include = TRUE,message = FALSE, collapse=TRUE) 
```

In dieser Übung geht es darum, die Grafiken aus dem Blog-post @kovic2014 zu rekonstruieren. Schau dir die Grafiken in dem Blogpost durch. Freundlicherweise wurden im Blogbeitrag die `ggplot2` Standardeinstellungen benutzt, was die Rekonstruktion relativ einfach macht. Die Links im Text verweisen auf die Originalgrafik, die eingebetteten Plots sind meine eigenen Rekonstruktionen. 

Importiere als erstes den Datensatz [tagi_data_kanton.csv](https://moodle.zhaw.ch/mod/resource/view.php?id=602257) (dieser ist auch auf der Blog-Seite verfügbar).

```{r}

library(dplyr)
library(ggplot2)
library(readr)

kanton <- read_csv("data/tagi_data_kantone.csv") 
```

## Aufgabe 1

- nutze `ggplot(kanton, aes(auslanderanteil, ja_anteil))` um den ggplot zu initiieren. Füge danach ein einen Punkte Layer hinzu (`geom_point()`)
- nutze `coord_fixed()` um die beiden Achsen in ein fixes Verhältnis zu setzen (1:1).
- Optional: 
  - setze die Achsen Start- und Endwerte mittels `scale_y_continuous` bzw. `scale_x_continuous`.
  - Setze analog @kovic2014 die `breaks` (0.0, 0.1...0.7) manuell (innerhalb `scale_*_continuous`)

Rekonstruktion:

```{r}
#| label: fig-ggplot-ex1
#| fig-cap: "Generierter Plot"

# Lösung zu Aufgabe 1

plot1 <- ggplot(kanton, aes(auslanderanteil, ja_anteil)) +
  geom_point() +
  coord_fixed(1) +
  scale_y_continuous(breaks = c(0,0.1,0.3,0.5,0.7),limits =  c(0,0.7)) +
  scale_x_continuous(breaks = c(0,0.1,0.3,0.5,0.7),limits =  c(0,0.7)) +
  labs(y = "Anteil Ja-Stimmen", x = "Ausländeranteil")

plot1
```

## Aufgabe 2

```{r}
#| label: fig-ggplot-ex2
#| fig-cap: "Generierter Plot"

# Lösung zu Aufgabe 2

plot1 +
  geom_smooth()
```

## Aufgabe 3

Importiere die Gemeindedaten [tagi_data_gemeinden.csv](https://moodle.zhaw.ch/mod/resource/view.php?id=602260).
```{r}
#| label: fig-ggplot-ex3
#| fig-cap: "Generierter Plot"

# Lösung zu Aufgabe 3

gemeinde <- read_csv("data/tagi_data_gemeinden.csv")

plot2 <- ggplot(gemeinde, aes(anteil_ausl, anteil_ja)) +
  geom_point() +
  labs(x = "Ausländeranteil",y = "Anteil Ja-Stimmen") +
  coord_fixed(1) +
  lims(x = c(0,1), y = c(0,1))

plot2
```

## Aufgabe 4

```{r}
#| label: fig-ggplot-ex4
#| fig-cap: "Generierter Plot"

# Lösung zu Aufgabe 4

plot2 +
  geom_smooth()
```

## Aufgabe 5

```{r}
#| label: fig-ggplot-ex5
#| fig-cap: "Generierter Plot"

# Lösung zu Aufgabe 5

plot3 <- plot2 +
  facet_wrap(~kanton)
plot3
```

## Aufgabe 6

```{r}

#| label: fig-ggplot-ex6
#| fig-cap: "Generierter Plot"

# Lösung zu Aufgabe 6

plot3 +
  geom_smooth()
```


## Aufgabe 7

Rekonstruktion:

```{r}
#| label: fig-ggplot-ex7
#| fig-cap: "Generierter Plot"

# Lösung zu Aufgabe 7

plot4 <- plot2 +
  facet_wrap(~quantile)
plot4
```

## Aufgabe 8

```{r}
#| label: fig-ggplot-ex8
#| fig-cap: "Generierter Plot"

# Lösung zu Aufgabe 8

plot4 +
  geom_smooth()
```

## Aufgabe 9 (Optional, fortgeschritten)

Tipp: 
- Nutze `group_by()` und `summarise()`
- Nutze `cor.test()` um den Korrelationskoeffizienten sowie den p-Wert zu erhalten. 
- Mit `$estimate` und `$p.value` können die entsprechenden Werte direkt angesprochen werden

Hinweis: aus bisher unerklärlichen Gründen weiche gewisse meiner Werte leicht von den Berechnungen aus @kovic2014 ab.

```{r}
# Lösung zu Aufgabe 9

korr_tab <- gemeinde %>%
  group_by(kanton) %>%
  summarise(
    Korr.Koeffizient = cor.test(anteil_ja,anteil_ausl,method = "pearson")$estimate,
    Signifikanz_val = cor.test(anteil_ja,anteil_ausl,method = "pearson")$p.value,
    Signifikanz = ifelse(Signifikanz_val < 0.001,"***",ifelse(Signifikanz_val<0.01,"**",ifelse(Signifikanz_val<0.05,"*","-")))
  ) %>%
  select(-Signifikanz_val)

```

```{r}
#| echo: false
#| purl: false
knitr::kable(korr_tab,caption = "Legende: * = p<0.05, ** = p<0.01, ***=p<0.001.")
```

## Musterlösung

```{r}
#| echo: false

#| results: asis
#| purl: false
#distill::mypurl()
```