---
date: 2022-12-06
lesson: RaumAn4
thema: Einführung Rasterdaten
index: 2
---

# Rauman 4: Übung B

Einer der wichtigsten Aspekte der bevorstehenden Übung (Multi-Criteria Evaluation (MCE)) ist die Verwendung und Bearbeitung von **Rasterdatensätzen**. In "R" werden hauptsächlich zwei Pakete zur Bearbeitung von Rasterdaten verwendet: `terra` und das Paket `raster`. Das letztere wird immer noch stark genutzt, wird aber unweigerlich durch das erstere ersetzt.

Im dieser Übung werden wir `terra` verwenden, um zu zeigen, wie wir einen Rasterdatensatz importieren können. Unter dem untenstehenden Link können Sie eine tif-Datei herunterladen, die das "Digitale Höhenmodell" (DHM)* des Kantons Schwyz in der Schweiz darstellt. Laden Sie den Datensatz herunter und führen Sie den angegebenen Code aus.

- Datensatz: [dhm25m.tif](https://moodle.zhaw.ch/mod/resource/view.php?id=602285)

```{r}
#| results: asis
#| echo: false
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(terra)
```

Importieren Sie Ihr Raster mit der Funktion `rast`

```{r}
dhm_schwyz <- rast("datasets/rauman/dhm25m.tif")
```

Sie erhalten einige wichtige Metadaten über den Rasterdatensatz, wenn Sie den Variablennamen in die Konsole eingeben.  

```{r}
dhm_schwyz 
```

Um einen schnellen Überblick eines Rasterdatensatz zu erhalten, können wir einfach die `plot()` Funktion verwenden.

```{r}
#| echo: true
#| label: fig-shape-ex1
#| fig-cap: "Generierter Plot"

plot(dhm_schwyz)
```

Leider ist das Verwenden von `Rastern` in ggplot nicht sehr einfach. Da `ggplot` ein universelles Plot-Framework ist, stossen wir schnell an die Grenzen des Möglichen, wenn wir etwas so Spezielles wie Karten erstellen. Aus diesem Grund werden wir ein neues Plot-Framework einführen, das auf Karten spezialisiert ist und in einem sehr ähnlichen Design wie ggplot gebaut wurde: `tmap`. Installieren und laden Sie dieses Paket jetzt.

```{r}
library(tmap)
```

Genau wie `ggplot` basiert `tmap` auf der Idee von "Ebenen", die durch ein `+` verbunden sind. Jede Ebene hat zwei Komponenten:

- eine Datensatzkomponente, die immer `tm_shape(dataset)` ist (ersetzen Sie `dataset` durch Ihre Variable)
- eine Geometriekomponente, die beschreibt, wie das vorangegangene `tm_shape()` visualisiert werden soll. Dies kann `tm_dots()` für Punkte, `tm_polygons()` für Polygone, `tm_lines()` für Linien usw. sein. Für Einzelbandraster (was bei `dhm_schwyz` der Fall ist) ist es `tm_raster()`

```{r}
#| label: fig-shape-ex2
#| fig-cap: "Generierter Plot"

tm_shape(dhm_schwyz) + 
  tm_raster() 
```

Beachten Sie, dass `tm_shape()` und `tm_raster()` (in diesem Fall) zusammengehören. Das eine kann nicht ohne das andere leben.

Wenn Sie die Hilfe von `?tm_raster` konsultieren, werden Sie eine Vielzahl von Optionen sehen, mit denen Sie die Visualisierung Ihrer Daten verändern können. Zum Beispiel ist der Standardstil von `tm_raster()` die Erstellung von "Bins" mit einer diskreten Farbskala. Wir können dies mit `style = "cont"` ausser Kraft setzen.

```{r}
#| label: fig-shape-ex3
#| fig-cap: "Generierter Plot"

tm_shape(dhm_schwyz) + 
  tm_raster(style = "cont") 
```

Das sieht schon ziemlich toll aus, aber vielleicht wollen wir die Standard-Farbpalette ändern. Glücklicherweise ist das in `tmap` viel einfacher als in `ggplot2`. Um sich die verfügbaren Paletten anzusehen, geben Sie `tmaptools::palette_explorer()` oder `RColorBrewer::display.brewer.all()` in der Konsole ein (für Ersteres müssen Sie möglicherweise zusätzliche Pakete installieren, z.B. `shinyjs`).

```{r}
#| label: fig-shape-ex4
#| fig-cap: "Generierter Plot"

tm_shape(dhm_schwyz) + 
  tm_raster(style = "cont", palette = "Spectral") 
```

Sie können Layout-Anpassungen mit `tm_layout()` vornehmen, prüfen Sie `?tm_layout`, um alle verfügbaren Optionen zu sehen!

::: {.column-body}
```{r}
#| label: fig-shape-ex5
#| fig-cap: "Generierter Plot"

tm_shape(dhm_schwyz) + 
  tm_raster(style = "cont", palette = "Spectral", legend.is.portrait = FALSE, title = "") +
  tm_layout(legend.outside = TRUE, legend.outside.position = "bottom",frame = FALSE)
```
:::
