---
date: 2022-12-12
lesson: RaumAn5
thema: Multi-Criteria Evaluation (MCE)
index: 1
execute: 
  echo: false
---

# Rauman 5: Übung

In der folgenden Übung möchten wir potentielle Standorte für Windkraftanlagen im Kanton Schwyz ermitteln. Zu diesem Zweck führen wir eine Multikriterien-Evaluation durch. Diese besteht im Wesentlichen aus zwei Teilen:

- Ausschlussgebiete
- Potenzialflächen

Als Auschlussgebiete gelten Flächen, wo keine Windkraftanlagen gebaut werden können. Dazu gehören bewohnte Flächen, nationale Schutzgebiete, Waldgebiete und Seen. Um diese Gebiete zu ermitteln müssen die entsprechenden Datensätze zusammengeführt und vom Resultat der *Potentialflächen* ausgeschlossen werden. 

Als Potentialflächen gelten gebiete mit hoher Eigung. Eine Gebiet ist umsobesser geeignet:

1. Je weiter weg es sich von bewohnte Flächen, Nationale Schutzgebieten und Waldgebieten befindet
2. Je näher es sich zu einer Strasse befindet
3. Je höher die Windgeschwindigkeit ist
4. Je geringer die Vereisungshäufigkeit ist
5. Je geringer die Hangneigung ist


Die Eignungsbewertung aufgrund der Distanzen (Punkt 1 & 2 in der obigen Aufzähung) könnt ihr aus der folgenden Tabelle entnehmen:

<div style="background-color: grey">

```{r}
#| output: asis
#| echo: false
#| label: tbl-bewerungstabelle-dist
#| tbl-cap: Bewertungstabelle für die Distanz zu verschiedenen Gebieten.


library(here)
library(readODS)
library(purrr)
library(kableExtra)
library(dplyr)

reclassify_ods <- here("rauman", "Reclassify.ods")

sheets1 <- c("Schutzgebiete", "Waldgebiete", "Siedlungsgebiete", "Strassen")

header_above <- rep(2,length(sheets1))
names(header_above) <- sheets1

map(sheets1, function(x){
  read_ods(reclassify_ods, x) |>
  mutate(Dist = paste(Von,Bis,sep = "-")) |>
  transmute(Dist, Score = Bewertung)
}) |>
(\(x)do.call(cbind, x))() |>
kableExtra::kbl() |>
  kable_classic( )  |>
  add_header_above(header_above) 


```

</div>

Die Bewerungen für die Punkte 3, 4 und 5 (Windgeschwindigkeit, Vereisungshäufigkeit und Hangneigung) sind wie folgt:

<div style="background-color: grey">

```{r}
#| output: asis
#| echo: false
#| label: tbl-bewerungstabelle-other
#| tbl-cap: Bewertungstabelle die Windgeschwindigkeit (m/s), Vereisungshäufigkeit (Tage/Jahr) und Hangneigung (Grad)

sheets1 <- c("Windgeschwindigkeit", "Vereisungshaeufigkeit", "Hangneigung")
einheit <- c("Speed", "Days", "Slope")

header_above <- rep(2,length(sheets1))
names(header_above) <- sheets1

map2(sheets1, einheit, function(x, z){
  y <- read_ods(reclassify_ods, x) |>
  mutate(Dist = paste(Von,Bis,sep = "-")) |>
  transmute(Dist, Score = Bewertung)
  
  colnames(y) <- c(z, "Score")
  y
}) |>
(\(x)do.call(cbind, x))() |>
kableExtra::kbl() |>
  kable_classic( )  |>
  add_header_above(header_above) 


```


</div>
<!--![](images/potentialflaechen-mermaid.png)-->




## Übungen 1: Vektor Daten laden und anzeigen

Laden Sie das File [windkraft_geodata.gpkg](https://moodle.zhaw.ch/mod/resource/view.php?id=663498) von Moodle herunter. Dieses beinhaltet alle Vektordaten, die für die Bearbeitung der Multikriterien-Evaluation benötigt wird (Bewohnte Flächen, Nationale Schutzgebiete, Seeflächen, Strassen, Waldgebiete sowie die Kantonsgrenze von Schwyz).

Explorieren Sie die Daten visuell und versuchen Sie ein Verständnis für die Datensätze zu bekommen. Zur Visualisierung können Sie die Funktionen `plot` oder die Packages `tmap` oder `ggplot2` verwenden.

Wir werden die folgenden Pakete in dieser Übung verwenden:

```{r}
#| echo: true
library(sf)
library(terra)
library(dplyr)
library(tmap)
```

```{r}
#| output: false


gpkg_path  <- "datasets/rauman/windkraft_geodata.gpkg"

#Vector data
st_layers(gpkg_path)

kt_schwyz <- read_sf(gpkg_path, "Untersuchungsgebiet_Schwyz")
siedlungsgebiet <- read_sf(gpkg_path, "Bewohnte_Flaeche")
wald <- read_sf(gpkg_path, "Waldgebiete")
schutzgebiete <- read_sf(gpkg_path, "Nationale_Schutzgebiete")
lakes <- read_sf(gpkg_path, "Seeflaechen")
strassen <- read_sf(gpkg_path, "Strassen")


```

```{r}
#| include: false

#Plot vector data
plot(lakes,max.plot = 1)
#plot(strassen, max.plot = 1)
#plot(wald, max.plot = 1)
plot(siedlungsgebiet, max.plot = 1)
```

## Übung 2: Entfernungen zu Kriterien berechnen

Beginnen wir mit den Enfernungskriterien. Bei der Bewertung geeigneter Standorte für Windkraftanlagen ist die Entfernung zu Waldgebieten, nationalen Schutzgebieten,  bewohnten Gebieten und Strassen relevant. Mit Ausnahme von Strassen gilt: je weiter weg desto besser, das ist aber an dieser Stelle noch nicht relevant. 

Starten wir mit der Distanz zum Wald. Es geht nun darum für den Punkt im Raum zu wissen, wie weit weg der nächstgelegene Wald ist. Dazu müssen wir den Vektordatensatz zuerst in Raster konvertieren. Und dies geht folgendermassen:

1. Erstelle eine Raster "Template" 
```{r}
#| echo: true
template <- rast(ext(kt_schwyz), resolution = c(250, 250), crs = "EPSG:21781")
```

2. Vektorisiere den Wald mit der Funktion `rasterize()` und `vect()`, basierend auf dem Template. Alle Wald Zellen sollen den Wert 1 erhalten (`field = 1`)

```{r}
#| echo: true
wald_r <- rasterize(vect(wald), template, field = 1) 
```

3. Berechne die Distanz mit der Funktion `distance()`

```{r}
#| echo: true
wald_dist <- distance(wald_r)

plot(wald_dist)
```


Versuche die drei Schritte mit den anderen drei Datensätzen durchzuführen. Für Profis: Erstelle dazu eine Funktion.

```{r}
distance_vect <- function(vec, template){
  vec_r <- rasterize(vect(vec), template, field = 1) 
  distance(vec_r)
}


siedlungsgebiet_dist <- distance_vect(siedlungsgebiet, template)
schutzgebiete_dist <- distance_vect(schutzgebiete, template)
strassen_dist <- distance_vect(strassen, template)
```

## Übung 3: Distanzkriterien Bewerten

Jetzt wo wir die Distanzen berechnet haben können wir diese gemäss @tbl-bewerungstabelle-dist bewerten. Hierfür brauchen wir die Function `classify()`. Wie wir aus der Dokumentation der Funktion (mit `?classify`) entnehmen können, müssen wir die Distanzbewerungen in einer Matrix mit 3 Spalten festhalten. Die ersten beiden Spalten stellen die "von" und "bis" Werte dar, die 3 Spalte den neuen Wert.

```{r}
#| echo: true
wald_reclass_matrix <- matrix(c(
    0,10,0,
    10,20,0.1,
    20,30,0.2,
    30,40,0.3,
    40,50,0.4,
    50,60,0.5,
    60,70,0.6,
    70,80,0.7,
    80,90,0.8,
    90,100,0.9,
    100,Inf,1.0), ncol = 3, byrow = TRUE)


wald_reclass_matrix
```


```{r}
#| echo: true
wald_classify <- classify(wald_dist, wald_reclass_matrix)

plot(wald_classify)
```


```{r}
# Siedlungsgebiet
siedlungsgebiet_reclass_matrix <- c(0,80,0,
                        80,160,0.1,
                        160,240,0.2,
                        240,320,0.3,
                        320,400,0.4,
                        400,480,0.5,
                        480,560,0.6,
                        560,640,0.7,
                        640,720,0.8,
                        720,800,0.9,
                        800,Inf,1.0) |> matrix(ncol = 3, byrow = TRUE)

siedlungsgebiet_reclass <- classify(siedlungsgebiet_dist, siedlungsgebiet_reclass_matrix)
```


```{r}
# Schutzgebiete
schutzgebiete_reclass_matrix <- c(0,50,0,
                          50,100,0.1,
                          100,150,0.2,
                          150,200,0.3,
                          200,250,0.4,
                          250,300,0.5,
                          300,350,0.6,
                          350,400,0.7,
                          400,450,0.8,
                          450,500,0.9,
                          500,Inf,1.0) |> matrix(ncol = 3, byrow = TRUE)

schutzgebiete_reclass <- classify(schutzgebiete_dist, schutzgebiete_reclass_matrix)

```

```{r}
### Strassen  
strassen_reclass_matrix <- c(0,250,1.0,
                     250,500,0.9,
                     500,750,0.8,
                     750,1000,0.7,
                     1000,1250,0.6,
                     1250,1500,0.5,
                     1500,1750,0.4,
                     1750,2000,0.3,
                     2000,2250,0.2,
                     2250,2500,0.1,
                     2500,Inf,0) |> matrix(ncol = 3, byrow = TRUE)
strassen_reclass <- classify(strassen_dist, strassen_reclass_matrix)

```


## Übung 4: Rasterdaten einlesen

Zur Bewertung der Standorte Hinsichtlich Windgeschwindigkeit und Vereisungshäufigkeit stehen uns Rasterdatensätze zur Verfügung. Lade die beiden nachfolgenden Datensätze herunter und mit der Funktion `rast()` in R ein.

- [eis250m.tif](https://moodle.zhaw.ch/mod/resource/view.php?id=602288) (Vereisungshäufigkeit in Tage/Jahr)
- [wind250m.tif](https://moodle.zhaw.ch/mod/resource/view.php?id=602297) (Durchschnittliche Windgeschwindigkeit)

Explorieren Sie die Daten visuell und versuchen Sie ein verständnis für die Datensätze zu bekommen. Zur Visualisierung können Sie die Funktionen `plot` oder `tmap` verwenden.

```{r}
#Raster data
eis250m <- rast("datasets/rauman/eis250m.tif")
wind250m <- rast("datasets/rauman/wind250m.tif")

tm_shape(eis250m) + tm_raster(style = "cont") + tm_shape(kt_schwyz) + tm_borders()
# tmap_mode("view")
#tm_shape(eis250m) + tm_raster(style = "cont") + tm_shape(kt_schwyz) + tm_borders()

```


## Übung 5: Windgeschwindigkeit und Vereisungshäufigkeit bewerten

Die beiden Rasterdatensätze `eis250m.tif` und `wind250m.tif`. können wir direkt mit `classify()` gemäss @tbl-bewerungstabelle-other bewerten. Versuche dies analog der Bewertung der Distanzwerte.

```{r}
#| include: false

#### reclassify wind
wind_reclass_matrix <- c(0,35,0,
                      35,40,0.1,
                      40,45,0.2,
                      45,50,0.3,
                      50,55,0.4,
                      55,60,0.5,
                      60,65,0.6,
                      65,70,0.7,
                      70,75,0.8,
                      75,Inf,0.9) |> matrix(ncol = 3, byrow = TRUE)
wind_reclass <- classify(wind250m, wind_reclass_matrix)

#### reclassify ice    
ice_reclass_matrix <- c(0,6,1,
                   6,12,0.9,
                   12,18,0.8,
                   18,24,0.7,
                   24,30,0.6,
                   30,36,0.5,
                   36,Inf,0.4) |> matrix(ncol = 3, byrow = TRUE)
ice_reclass <- classify(eis250m, ice_reclass_matrix)

```






## Übung 6: Neigung berechnen und Bewerten

Für die Berechnung und anschilessende Bewertung der Hangneigung brauchen wir ein Höhenmodell. Lade folgendes Höhenmodell herunter und in R ein, und berechne Anschliessend die Hangneigung mit der Funktion `terrain()` (beachten Sie die Einheit des Output!). Bewerten Sie die Hangneigung danach gemäss Tabelle @tbl-bewerungstabelle-other. 

- [dhm250m.tif](https://moodle.zhaw.ch/mod/resource/view.php?id=694260) (Höhenmodell)


```{r}
dhm250m <- rast("datasets/rauman/dhm250m.tif")

neigung <- terrain(dhm250m, v="slope",unit="degrees")

#### reclassify slope
neigung_relass_matrix <- c(0,2,1,
                       2,4,0.9,
                       4,6,0.8,
                       6,8,0.7,
                       8,10,0.6,
                       10,12,0.5,
                       12,14,0.4,
                       14,16,0.3,
                       16,18,0.2,
                       18,20,0.1,
                       20,90,0) |> matrix(ncol = 3, byrow = TRUE)
neigung_relass <- classify(neigung, neigung_relass_matrix)
```




## Übung 7: Gewichtetes Overlay

Nun können wir sämtliche Bewertungen zusammenfliessen lassen. Dazu gibt es eine Vielzahl von Möglichkeiten. Wir können alle Kriterien addieren und dann durch die Anzahl Kriterien dividieren, um so einen Mittelwert zu erhalten. 



```{r}
#| echo: true
# TODO: KÖNNEN WIR DIESEN HACK VERMEIDEN?
crs(siedlungsgebiet_reclass) <- crs(neigung_relass)
crs(schutzgebiete_reclass) <- crs(neigung_relass)
crs(strassen_reclass) <- crs(neigung_relass)
```


```{r}
#| echo: true

overlay1 <- (neigung_relass+ice_reclass+wind_reclass+siedlungsgebiet_reclass+schutzgebiete_reclass+strassen_reclass)/6

overlay1
plot(overlay1)
```


```{r}
#| echo: true

overlay2 <- (neigung_relass*10+ice_reclass*5+wind_reclass*7+siedlungsgebiet_reclass*5+schutzgebiete_reclass*2+strassen_reclass*30)/(10+5+7+5+2+30)

overlay2
plot(overlay2)

```

```{r}
knitr::opts_chunk$set(eval=FALSE)

```

## Übung 8: Ausschlusskriterien zusammenführen (optional)

Führen Sie die Ausschlusskriterien Siedlungsgebiete, nationale Schutzgebiete, Seeflächen und Waldgebiete zusammen. Diese Vektordatensätze sind als Data Frames strukturiert und können daher durch einfaches Kombinieren zusammengeführt werden. Beachten Sie dabei, dass die Data Frames unterschiedliche Grössen haben. Zusätzlich müssen wir aus dem neu erstellten Vektordatensatz (Ausschlussgebiet) ein Raster erstellen. Dazu können Sie die Funktion `rasterize` verwenden. Die Ausgabe soll ein Raster mit 0 und 1 sein, wobei die Felder des Ausschlussbereichs den Wert 0 und die restlichen Felder den Wert 1 haben.
  
* **Tipp**: Um ein Raster mit nur 0 und 1 zu erhalten, verwenden Sie die Optionen "rasterize" field = 0 und background = 1.
* **Tipp**: Um Vektordaten zu rastern, müssen Sie vorher ein leeres Raster erstellen. Dieses Raster sollte die gleichen Grenzen (extent), die gleiche Auflösung und das gleiche Koordinatensystem (crs) haben wie die anderen Rastersätze. Verwenden Sie dazu den folgenden Code.*
  

```{r}
#| include: false

#Merge exclusion area
exclusion_areas <- dplyr::bind_rows(siedlungsgebiet, wald, schutzgebiete, lakes)

#create raster
r <- rast(ext(kt_schwyz), 
          resolution = c(250, 250), 
          crs = "EPSG:21781")

exclusion_areas_r <- rasterize(vect(exclusion_areas), r,
                       field = 0, background = 1) |> crop(kt_schwyz)
plot(raster_exclusion_areas, main="Exclusion area", axes=FALSE, legend=FALSE, col=terrain.colors(2))
```


## Übung 9: Potenzielle Gebiete mit Ausschlusskriterien überschneiden (optional)

Durch einfache Multiplikation des Ausschluss-Layers (Ergebnis aus Übung 2) mit dem gewichteten Overlay-Layer (Ergebnis aus Übung 7) schliessen wir alle Flächen mit dem Wert 0 (Ausschlussflächen) aus und behalten alle anderen Flächen mit dem Wert 1 (z.B. 0x3=0, 1x3=3). Erstellen Sie als Abschluss der Studie eine endgültige Darstellung der Potenzialflächen für Windkraftanlagen im Kanton Schwyz. Diskutieren Sie die Ergebnisse und bestimmen Sie drei mögliche Standorte, an denen eine konkrete Planung von Windkraftanlagen möglich wäre.


```{r}
#| include: false

# Transforming  the layer depicting the exclusion areas from SpatRaster class to RasterLayer class, so we can perform the final raster multiplication operation
# raster_exclusion_areas <- raster_exclusion_areas |> raster::raster()
# final_model <- weighted_overlay * raster_exclusion_areas
# plot(final_model, main="Potential sites for wind power plants in Kt. Schwyz", axes=FALSE, legend=F)
```
