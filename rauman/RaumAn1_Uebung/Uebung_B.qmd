---
title: RaumAn1 - Übung B - Spatial Joins
author:
  - name: Patrick Laube
  - name: Nils Ratnaweera
  - name: Nikolaos Bakogiannis
image: distill-preview-b.png  
categories: RaumAn1
draft: false  
---

```{r, echo = FALSE}
knitr::opts_chunk$set(echo = FALSE)
```

Für die kommende Übung arbeiten wir mit nachstehendem Datensatz. Lade diesen Herunter und importiere ihn in R.

```{r, echo = FALSE, purl = FALSE, results = "asis"}
check_download <- function(files, folder, url = "https://github.com/ResearchMethods-ZHAW/datasets/raw/main/"){
  full_url <- paste0(url,folder,"/",files)
  exists_bool <- !file.exists(files)
  if(sum(exists_bool)>0){
    download.file(full_url[exists_bool],files[exists_bool])
    }
  cat(paste0("- [",files,"](",full_url,")"),sep = "\n")
}

check_download(c("gruental.gpkg"), "rauman")
```

Zudem brauchen wir die folgenden libraries:

```{r, echo = TRUE}
library(dplyr)
library(sf)
library(ggplot2)
```

### Aufgabe 1: Geopackage "Layers"

Allenfalls ist euch beim Importieren des Geopackage `gruental.pgkg` folgende Warnmeldung aufgefallen:

```
Warning message:
In evalq((function (..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,  :
  automatically selected the first layer in a data source containing more than one.
```

Diese Warnmeldung weist darauf hin, dass das Geopackage `gruental.gpkg` mehrere Layers (rep. Datensätze) enthält und nur der erste Layer importiert wurde. Bringe mit dem Befehl `st_layers` die Layer Namen in Erfahrung und nutze diese im Anschluss in `st_read` (als Argument `layer = `) um die layers einzeln zu importieren und in variablen zu speichern (zB in als Variable `wiesen` und `baeume`).

```{r include=FALSE}
st_layers("gruental.gpkg")

wiesen <- read_sf("gruental.gpkg","wiesen")
baeume <- read_sf("gruental.gpkg", "baeume")
```

### Aufgabe 2: Datensätze erkunden

Nimm dir etwas Zeit und erkunde die beiden Datensätze. Nutze dafür auch die Visualisierungsmöglichkeiten von `ggplot` (insbesondere `geom_sf`).

```{r, fig.cap="Beispielsweise kannst du die Daten in dieser Weise visualisieren."}
ggplot(wiesen) +
  geom_sf(fill = "chartreuse4") +
  geom_sf(data = baeume) +
  theme_void()
```

### Aufgabe 3:  Spatial Join mit Punkten

Wir wollen nun für jeden *Baum* wissen, ob er sich in einer Wiese befindet oder nicht. Dazu nutzen wir die GIS-Technik *Spatial Join*, die in der Vorlesung beschrieben wurde. In `sf` können wir Spatial Joins mit der Funktion `st_join` durchführen, dabei gibt es nur `left` sowie `inner`-Joins (vgl. PrePro 1 & 2). So müssen die Punkte "Links", also an erste Stelle aufgeführt werden, da wir ja Attribute *an* die Punkte anheften wollen.

Beachte, dass der Output eine neue Spalte `flaechen_typ` aufweist. Diese ist leer (`NA`) wenn sich der entsprechende Baum nicht in einer Wiese befindet. Wie viele Bäume befinden sich in einer Wiese, wie viele nicht?

```{r}
baeume_join <- st_join(baeume, wiesen) 

anzahl_in_wiese <- sum(!is.na(baeume_join$flaechen_typ))
anzahl_nicht_in_wiese <- sum(is.na(baeume_join$flaechen_typ))
```

### Aufgabe 4: Spatial Join mit Flächen

Analog der Vorlesung wollen wir nun in Erfahrung bringen, wie hoch der Wiesen-Anteil im Umkreis von 20m um jeden Baum ist. Dazu sind folgende Schritte nötig: 

1. Als erster Schritt müssen wir jeden Baum mit einem 20m Puffer verstehen. Nutze dazu `st_buffer` um speichere den Output als `baeume_20m`. Schau dir `baeume_20m` nun genau an. Um welchen Geometrietyp handelt es sich dabei nun?
2. Berechnen nun die Schnittmenge aus `baeume_20m` und `wiesen` mit der Funktion `st_intersection` und speichere den Output als `baeume_wiesen`. Exploriere nun `baeume_wiesen`, auch mit `ggplot()`. Was ist passiert? Überprüfe die Anzahl Zeilen pro Datensatz. Haben die sich verändert? Wenn ja, warum?
3. Berechnen nun die Flächengrösse pro Geometrie mit der Funktion `st_area()`. Speichere den Output in einer neuen Spalte von `baeume_wiesen` (z.B. mit dem Namen `wiesen_flaeche`). Tipp: Konvertiere den Output aus `st_area` einen nummerischen Vektor mit `as.numeric()`.
4. Berechne nun aus `wiesen_flaeche` den `wiesen_anteil`. Tipp: 100% ist die Kreisfläche aus $r^2\times \pi$, wobei in unserem Fall $r = 20$ entspricht.

Um die berechneten Werte in den Datensatz `baeume` zu überführen braucht es noch folgende Schritte:

1. Konvertiere `baeume_wiesen` in eine `data.frame` mit `st_drop_geometry` und speichere diese als `baeume_wiesen_df`
2. Nutze die Spalte `baum_id` in `baeume_wiesen_df` um den berechneten `wiesen_anteil` in den Datenatz `baeume` zu überführen. Tipp: Nutze dafür einen `left_join`
3. Ersetze alle `NA` Werte in der Spalte `wiesen_anteil` mit 0.

```{r}
baeume_20m <- st_buffer(baeume, 20)

baeume_wiesen <- st_intersection(baeume_20m, wiesen) 

baeume_wiesen$wiesen_flaeche <- as.numeric(st_area(baeume_wiesen))

baeume_wiesen$wiesen_anteil <- baeume_wiesen$wiesen_flaeche/(20^2*pi)

baeume_wiesen_df <- st_drop_geometry(baeume_wiesen)

baeume_2 <- left_join(baeume, baeume_wiesen_df, by = "baum_id") %>%
  mutate(wiesen_anteil = ifelse(is.na(wiesen_anteil),0,wiesen_anteil))
```

::: {.column-page}
```{r, fig.cap="Nach dieser Übung kannst du das Resultat optional in dieser Weise visualisieren."}
ggplot() +
  geom_sf(data = wiesen) +
  geom_sf(data = baeume_20m, fill = NA, color = "grey") +
  geom_sf(data = baeume_2, aes(colour = wiesen_anteil)) +
  scale_color_binned("Wiesen Anteil",low = "blue", high = "red", limits = c(0,1), label = scales::label_percent()) +
  coord_sf(datum = 2056)
```
:::

## Musterlösung

```{r, echo = FALSE, message=FALSE, results = "asis", purl = FALSE}
#distill::mypurl()
```


