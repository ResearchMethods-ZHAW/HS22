---
title: "Übungen A - Einführung"
author:
  - name: Patrick Laube
  - name: Nils Ratnaweera
  - name: Nikolaos Bakogiannis
image: distill-preview-a.png
description: " "
lerneinheit: RaumAn1
draft: false  
---

{{< include /../../_before-article.qmd >}}

Es gibt bereits eine Vielzahl von Packages um in R mit räumlichen Daten zu arbeiten, die ihrerseits wiederum auf weiteren Packages basieren (Stichwort `dependencies`). Für *Vektordaten* dominierte lange das Package [`sp`](https://cran.r-project.org/package=sp), welches nun durch [`sf`](https://r-spatial.github.io/sf/) abgelöst wurde. Wir werden wenn immer möglich mit `sf` arbeiten und nur in Ausnahmefällen auf andere Packages zurück greifen.

Für die kommenden Übungen könnt ihr folgende Packages installieren bzw. laden:

```{r warning=FALSE, echo = TRUE}
library(sf)
library(dplyr)
library(ggplot2)
```

### Aufgabe 1: Vektor Daten runterladen und importieren

Lade zunächst die Datensätze unter folgenden Links herunter:

Es handelt sich um Geodatensätze im Format Geopackage ("\*.gpkg"), eine alternatives Datenformat zum bekannteren Format "Shapefiles". Importiere die Datensätze wie folgt:

```{r, echo = TRUE}
kantone <- read_sf(here("data","kantone.gpkg"))
gemeinden <- read_sf(here("data","gemeinden.gpkg")) 
```

Schau Dir die importierten Datensätze an. Am meisten Informationen zu `sf` Objekten bekommst du, wenn du dir den Datensatz **in der Konsole** anschaust (in dem du den Variabel-Name in der Konsole eintippst). Mit dem RStudio Viewer werden `sf` Objekte nur sehr langsam geladen und die Metadaten werden nicht angezeigt.

### Aufgabe 2: Daten Visualisieren

Vektordaten (`sf` Objekte) lassen sich teilweise sehr schön in die bekannten Tidyverse workflows integrieren. Das merkt man schnell, wenn man die Daten visualisieren möchte. In InfoVis 1 & 2 haben wir intensiv mit `ggplot2` gearbeitet und dort die Layers `geom_point()` und `geom_line()` kennen gelernt. Zusätzlich beinhaltet `ggplot` die Möglichkeit, mit `geom_sf()` Vektordaten direkt und sehr einfach zu plotten. Führe die angegebenen R-Befehle aus und studiere die entstehenden Plots. Welche Unterschiede findest Du? Wie erklärst Du diese Unterschiede?

```{r echo = TRUE, eval=FALSE}
ggplot(gemeinden) + 
  geom_sf()

ggplot(kantone) + 
  geom_sf()
```

### Input: Koodinatensysteme

In der obigen visualierung fällt folgendes auf:

- die X/Y Achsen weisen zwei ganz unterschiedlichen Zahlenbereiche auf (vergleiche die Achsenbeschriftungen)
- der Umriss der Schweiz sieht in den beiden Datensätzen unterschiedlich aus (`kantone` ist gegenüber `gemeinden` gestaucht)

Dies hat natürlich damit zu tun, dass die beiden Datensätze in unterschiedlichen Koordinatensystemen erfasst wurden. Koordinatensysteme werden mit CRS (**C**oordinate **R**eference **S**ystem) abgekürzt. Mit `st_crs()` können die zugewiesenen Koordinatensysteme abgefragt werden.

```{r, echo = TRUE}
st_crs(kantone)
st_crs(gemeinden)
```

Leider sind in unserem Fall keine Koordinatensysteme zugewiesen. Mit etwas Erfahrung kann man das Koordinatensystem aber erraten, so viele kommen nämlich gar nicht in Frage. Am häufigsten trifft man hierzulande eines der drei folgenden Koordinatensysteme an:

- [CH1903 LV03](https://epsg.io/21781): das alte Koordinatensystem der Schweiz
- [CH1903+ LV95](https://epsg.io/2056): das neue Koordinatensystem der Schweiz
- [WGS84](https://epsg.io/4326): ein häufig genutztes weltumspannendes geodätisches Koordinatensystem, sprich die Koordinaten werden in Länge und Breite angegeben (Lat/Lon).

Nun gilt es, anhand der Koordinaten die in der Spalte `geometry` ersichtlich sind das korrekte Koordinatensystem festzustellen. Wenn man sich auf [epsg.io/map](https://epsg.io/map#srs=4326&x=8.407288&y=46.773731&z=9&layer=streets) die Schweiz anschaut, kann man die Koordinaten in verschiedenen Koordinatensystem betrachten.

**Bedienungshinweise**:

<fig>
<img src = "koordinatenpaar.jpg" width = 50%>
<figcaption>Koordinanten (des Fadenkreuzes) werden im ausgewählten Koordinatensystem dargestellt</figcaption>
</fig>

<fig>
<img src = "koordinatensystem.jpg" width = 50%>
<figcaption>Das Koordinatensystem, in welchem die Koordinaten dargestellt werden sollen, kann mit "Change" angepasst werden</figcaption>
</fig>

<img src = "reproject.jpg" width = 50%>
<figcaption>Für Enthusiasten: Schau Dir die Schweiz in verschiedenen Koordinatensystemen an, in dem Du auf "Reproject Map" klickst</figcaption>
</fig>

Wenn man diese Koordinaten mit den Koordinaten unserer Datensätze vergleicht, dann ist schnell klar, dass es sich beim Datensatz `kantone` um das Koordinatensystem WGS84 handelt und bei `gemeinden` das Koordinatensystem CH1903+ LV95. Diese Koordinatensyteme weisen wir nun mit `st_set_crs()` und dem entsprechenden *EPSG*-Code (siehe die jeweiligen Links) zu.

```{r, echo = TRUE}
kantone <- st_set_crs(kantone, 4326)
gemeinden <- st_set_crs(gemeinden, 2056)

# zuweisen mit st_set_crs(), abfragen mit st_crs()
st_crs(kantone)
```

Auch wenn das CRS der Datensätze bekannt ist, nutzt ggplot immer noch `EPSG 4326` um die Achsen zu beschriften.  Wenn das stört, kann man `coord_sf(datum = 2056)` in einem weiteren Layer spezifizieren. Oder aber man blendet die Achsenbeschriftung mit `theme_void()` komplett aus. Versuche beide Varianten.

```{r}
ggplot() + 
  geom_sf(data = kantone) +
  coord_sf(datum = 2056)
```

### Aufgabe 3: Koordinatensyteme *transformieren*

In der vorherigen Übung haben wir das bestehende Koordinatensystem *zugewiesen*. Dabei haben wir die bestehenden Koordinaten (in der Spalte `geom`) *nicht* manipuliert. Ganz anders ist eine *Transformation* der Daten von einem Koordinatensystem in das andere. Bei einer Transformation werden die Koordinaten in das neue Koordinatensystem umgerechnet und somit manipuliert. Aus praktischen Gründen wollen <!-- Was sind diese Gründe? genauer erläutern? -->
wir all unsere Daten ins neue Schweizer Koordinatensystem CH1903+ LV95 transfomieren. Transformiere den Datensatz `kantone` mit `st_transform()`in CH1903+ LV95, nutze dafür den korrekten EPSG-Code.

Vor der Transformation (betrachte die Attribute `Bounding box` sowie `Geodetic CRS`): 

```{r, echo = TRUE}
kantone
```

```{r, eval = FALSE}
kantone <- st_transform(kantone, 2056)
```

Nach der Transformation (betrachte die Attribute `Bounding box` sowie `Projected CRS`):

```{r, echo = TRUE}
kantone
```

### Aufgabe 4: Chloroplethen Karte

Nun wollen wir die Gemeinden respektive die Kantone nach ihrer Einwohnerzahl einfärben. Dafür verwenden wir wie gewohnt die Methode `aes(fill = ...)` von `ggplot`. 

Tips: 

- um die *scientific notation* (z.B. `3e+03`) zu verhindern, könnt ihr den Befehl `options(scipen = 999)` ausführen
- um die Darstellung der Gemeinde- (bzw. Kantons-) Grenzen zu verhindern, könnt ihr im entsprechenden Layer `color = NA` setzen. Alternativ könnt ihr die Linienbreite mit `size = ` verändern.

```{r, fig.show="hold", out.width="49%", fig.cap="Der Vergleich dieser beiden Darstellungen veranschaulicht die MAUP Problematik sehr deutlich"}
ggplot(kantone, aes(fill = EINWOHNERZ/1e6)) +
  geom_sf(color= "white",size = .05) +
  labs(title = "Anzahl Einwohner pro Kanton",
       subtitle = "in Millionen") +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.key.width = unit(0.15, 'npc'),
        legend.key.height = unit(0.02, 'npc'),
        legend.text = element_text(angle = 90,hjust = 0.5),
        legend.text.align = 1)

ggplot(gemeinden,aes(fill = EINWOHNERZ/1e6)) +
  geom_sf(color= "white",size = .05) +
  scale_fill_continuous("Einwohner (in Mio)") +
  labs(title = "Anzahl Einwohner pro Gemeinde",
       subtitle = "in Millionen") +
  theme(legend.position = "bottom",
        legend.title = element_blank(),
        legend.key.width = unit(0.15, 'npc'),
        legend.key.height = unit(0.02, 'npc'),
        legend.text = element_text(angle = 90,hjust = 0.5),
        legend.text.align = 1)
```

## Musterlösung

```{r, echo = FALSE, message=FALSE, results = "asis", purl = FALSE}
#distill::mypurl()
```


