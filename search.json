[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Research Methods HS22",
    "section": "",
    "text": "Das Modul „Research Methods” vermittelt vertiefte Methodenkompetenzen für praxisorientiertes und angewandtes wissenschaftliches Arbeiten im Fachbereich „Umwelt und Natürliche Ressourcen” auf MSc-Niveau. Die Studierenden erarbeiten sich vertiefte Methodenkompetenzen für die analytische Betrachtung der Zusammenhänge im Gesamtsystem „Umwelt und Natürliche Ressourcen”. Die Studierenden erlernen die methodischen Kompetenzen, auf denen die nachfolgenden Module im MSc Programm UNR aufbauen. Das Modul vermittelt einerseits allgemeine, fächerübergreifende methodische Kompetenzen (z.B. Wissenschaftstheorie, computer-gestützte Datenverarbeitung und Statistik).\nHier werden die Unterlagen für die R-Übungsteile bereitgestellt. Es werden sukzessive sowohl Demo-Files, Aufgabenstellungen und Lösungen veröffentlicht.\nDiese Website wurde am 2022-09-12 11:26:34 zum letzten Mal aktualisiert."
  },
  {
    "objectID": "PrePro.html",
    "href": "PrePro.html",
    "title": "Pre-Processing",
    "section": "",
    "text": "Die Lesson vermittelt zentralste Fertigkeiten zur Vorverarbeitung von strukturierten Daten in der umweltwissenschaftlichen Forschung: Datensätze verbinden (Joins) und umformen („reshape”, „split-apply-combine”). Im Anwendungskontext haben Daten selten von Anfang an diejenige Struktur, welche für die statistische Auswertung oder für die Informationsvisualisierung erforderlich wäre. In dieser lesson lernen die Studierenden die für diese oft zeitraubenden Preprocessing-Schritte notwendigen Konzepte und R-Werkzeuge kennen und kompetent anzuwenden.\n\n\n\n\n\n\n   \n     \n     \n       Sortieren nach\n       Voreinstellung\n         \n          Datum - Datum (aufsteigend)\n        \n         \n          Datum - Neueste\n        \n         \n          Titel\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitel\n\n\nDatum\n\n\nLesson\n\n\nThema\n\n\n\n\n\n\nPrepro 1: Demo\n\n\n2022-10-11\n\n\nPrePro1\n\n\nDatentypen\n\n\n\n\nPrePro 1: Übung\n\n\n2022-10-11\n\n\nPrePro1\n\n\nDatentypen\n\n\n\n\nPrepro 2: Demo\n\n\n2022-10-17\n\n\nPrePro2\n\n\nPiping / Joins\n\n\n\n\nPrepro 2: Übung A\n\n\n2022-10-17\n\n\nPrePro2\n\n\nPiping / Joins\n\n\n\n\nPrepro 2: Übung B\n\n\n2022-10-17\n\n\nPrePro2\n\n\nPiping / Joins\n\n\n\n\nPrepro 3: Demo\n\n\n2022-10-18\n\n\nPrePro3\n\n\nSplit-Apply-Combine\n\n\n\n\nPrepro 3: Übung\n\n\n2022-10-18\n\n\nPrePro3\n\n\nSplit-Apply-Combine\n\n\n\n\n\n\nKeine Treffer"
  },
  {
    "objectID": "prepro/Prepro1_Demo.html",
    "href": "prepro/Prepro1_Demo.html",
    "title": "Prepro 1: Demo",
    "section": "",
    "text": "Datentypen\n\nNumerics\nUnter die Kategorie numeric fallen in R zwei Datentypen:\n\ndouble: Gleitkommazahl (z.B. 10.3, 7.3)\ninteger: Ganzzahl (z.B. 10, 7)\n\n\nDoubles\nFolgendermassen wird eine Gleitkommazahl einer Variabel zuweisen:\n\nx <- 10.3\n\nx\n## [1] 10.3\n\ntypeof(x)\n## [1] \"double\"\n\nStatt <- kann auch = verwendet werden. Dies funktioniert aber nicht in allen Situationen, und ist zudem leicht mit == zu verwechseln.\n\ny = 7.3\n\ny\n## [1] 7.3\n\nOhne explizite Zuweisung nimmt R immer den Datentyp doublean:\n\nz <- 42\ntypeof(z)\n## [1] \"double\"\nis.integer(z)\n## [1] FALSE\nis.numeric(z)\n## [1] TRUE\nis.double(z)\n## [1] TRUE\n\n\n\n\nGanzzahl / Integer\nErst wenn man eine Zahl explizit als integer definiert (mit as.integer() oder L), wird sie auch als solches abgespeichert.\n\na <- as.integer(z)\nis.numeric(a)\n## [1] TRUE\nis.integer(a)\n## [1] TRUE\n\nc <- 8L\nis.numeric(c)\n## [1] TRUE\nis.integer(c)\n## [1] TRUE\n\n\ntypeof(a)\n## [1] \"integer\"\n\nis.numeric(a)\n## [1] TRUE\nis.integer(a)\n## [1] TRUE\n\nMit c() können eine Reihe von Werten in einer Variabel zugewiesen werden (als vector). Es gibt zudem auch character vectors.\n\nvector <- c(10,20,33,42,54,66,77)\nvector\n## [1] 10 20 33 42 54 66 77\nvector[5]\n## [1] 54\nvector[2:4]\n## [1] 20 33 42\n\nvector2 <- vector[2:4]\n\nEine Ganzzahl kann explizit mit as.integer() definiert werden.\n\na <- as.integer(7)\nb <- as.integer(3.14)\na\n## [1] 7\nb\n## [1] 3\ntypeof(a)\n## [1] \"integer\"\ntypeof(b)\n## [1] \"integer\"\nis.integer(a)\n## [1] TRUE\nis.integer(b)\n## [1] TRUE\n\nEine Zeichenkette kann als Zahl eingelesen werden.\n\nc <- as.integer(\"3.14\")\nc\n## [1] 3\ntypeof(c)\n## [1] \"integer\"\n\n\n\nLogische Abfragen\nWird auch auch als boolesch (Eng. boolean) bezeichnet.\n\ne <- 3\nf <- 6\ng <- e > f\ne\n## [1] 3\nf\n## [1] 6\ng\n## [1] FALSE\ntypeof(g)\n## [1] \"logical\"\n\n\n\nLogische Operationen\n\nsonnig <- TRUE\ntrocken <- FALSE\n\nsonnig & !trocken\n## [1] TRUE\n\nOft braucht man auch das Gegenteil / die Negation eines Wertes. Dies wird mittels ! erreicht\n\nu <- TRUE\nv <- !u \nv\n## [1] FALSE\n\n\n\nZeichenketten\nZeichenketten (Eng. character) stellen Text dar\n\ns <- as.character(3.14)\ns\n## [1] \"3.14\"\ntypeof(s)\n## [1] \"character\"\n\nZeichenketten verbinden / zusammenfügen (Eng. concatenate)\n\nfname <- \"Hans\"\nlname <- \"Muster\"\npaste(fname,lname)\n## [1] \"Hans Muster\"\n\nfname2 <- \"hans\"\nfname == fname2\n## [1] FALSE\n\n\n\nFactors\nMit Factors wird in R eine Sammlung von Zeichenketten bezeichnet, die sich wiederholen, z.B. Wochentage (es gibt nur 7 unterschiedliche Werte für “Wochentage”).\n\nwochentage <- c(\"Donnerstag\",\"Freitag\",\"Samstag\",\"Sonntag\",\"Montag\",\"Dienstag\",\"Mittwoch\",\n                \"Donnerstag\",\"Freitag\",\"Samstag\",\"Sonntag\", \"Montag\",\"Dienstag\",\"Mittwoch\")\n\ntypeof(wochentage)\n## [1] \"character\"\n\nwochentage_fac <- as.factor(wochentage)\n\nwochentage\n##  [1] \"Donnerstag\" \"Freitag\"    \"Samstag\"    \"Sonntag\"    \"Montag\"    \n##  [6] \"Dienstag\"   \"Mittwoch\"   \"Donnerstag\" \"Freitag\"    \"Samstag\"   \n## [11] \"Sonntag\"    \"Montag\"     \"Dienstag\"   \"Mittwoch\"\nwochentage_fac\n##  [1] Donnerstag Freitag    Samstag    Sonntag    Montag     Dienstag  \n##  [7] Mittwoch   Donnerstag Freitag    Samstag    Sonntag    Montag    \n## [13] Dienstag   Mittwoch  \n## Levels: Dienstag Donnerstag Freitag Mittwoch Montag Samstag Sonntag\n\nWie man oben sieht, unterscheiden sich character vectors und factors v.a. dadurch, dass letztere über sogenannte levels verfügt. Diese levels entsprechen den eindeutigen Werten.\nZudem ist fällt auf, dass die Reihenfolge der Wohentag alphabetisch sortiert ist. Eine Ordnung kann man mit dem Befehl ordered = T festlegen, dabei muss die Reihenfolge der Werte im Argument levels = explizit festgehalten werden1.\n\nfactor(wochentage, levels = c(\"Montag\", \"Dienstag\", \"Mittwoch\", \"Donnerstag\", \"Freitag\", \"Samstag\", \"Sonntag\"), ordered = TRUE)\n##  [1] Donnerstag Freitag    Samstag    Sonntag    Montag     Dienstag  \n##  [7] Mittwoch   Donnerstag Freitag    Samstag    Sonntag    Montag    \n## [13] Dienstag   Mittwoch  \n## 7 Levels: Montag < Dienstag < Mittwoch < Donnerstag < Freitag < ... < Sonntag\n\nBeachtet das <-Zeichen zwischen den Levels!\n\n\nZeit/Datum\nUm in R mit Datum/Zeit Datentypen umzugehen, müssen sie als POSIXct eingelesen werden. Anders als Beispielsweise bei Excel, sollten in R Datum und Uhrzeit immer zusammen gespeichert werden (in einem Objekt oder einem Vektor).\n\ndatum <- \"2017-10-01 13:45:10\"\n\n# konvertiert character in POSIXct:\nas.POSIXct(datum) \n## [1] \"2017-10-01 13:45:10 CEST\"\n\nWenn das die Zeichenkette in dem obigen Format (Jahr-Monat-Tag Stunde:Minute:Sekunde) daher kommt, braucht as.POSIXctkeine weiteren Informationen.\nSollte das Format von dem aber Abweichen, muss man der Funktion das genaue Schema jedoch mitteilen. Der Syntax dafür kann via ?strptime nachgeschlagen werden.\n\ndatum <- \"01.10.2017 13:45\"\n\n# konvertiert character in POSIXct:\nas.POSIXct(datum,format = \"%d.%m.%Y %H:%M\")\n## [1] \"2017-10-01 13:45:00 CEST\"\n\ndatum <- as.POSIXct(datum,format = \"%d.%m.%Y %H:%M\")\n\nBeachtet, dass in den den obigen Beispiel R automatisch eine Zeitzone angenommen hat (CEST). R geht davon aus, dass die Zeitzone der System Timezone (Sys.timezone()) entspricht.\nUm nun aus dem Datum wieder Spezifische bestandteile zu extrahieren, kann man theoretisch die gleichen Codes nochmal verwenden.\n\nstrftime(datum, format = \"%m\") # extrahiert den Monat als Zahl\n## [1] \"10\"\nstrftime(datum, format = \"%b\") # extrahiert den Monat mit Namen (abgekürzt)\n## [1] \"Okt\"\nstrftime(datum, format = \"%B\") # extrahiert den Monat mit Namen (ausgeschrieben)\n## [1] \"Oktober\"\n\nEinfacher sind an dieser Stelle aber die Functions aus lubridate:\n\nlibrary(lubridate)\n\nmonth(datum)                             # extrahiert den Monat als Zahl\n## [1] 10\nmonth(datum, label = TRUE, abbr = TRUE)  # extrahiert den Monat mit Namen (abgekürzt)\n## [1] Okt\n## 12 Levels: Jan < Feb < Mär < Apr < Mai < Jun < Jul < Aug < Sep < ... < Dez\nmonth(datum, label = TRUE, abbr = FALSE) # extrahiert den Monat mit Namen (ausgeschrieben)\n## [1] Oktober\n## 12 Levels: Januar < Februar < März < April < Mai < Juni < Juli < ... < Dezember\n\n\n\n\nData Frames und Conveniance Variabeln\nEine data.frame ist die gängigste Art, Tabellarische Daten zu speichern.\n\ndf <- data.frame(\n  Stadt = c(\"Zürich\",\"Genf\",\"Basel\",\"Bern\",\"Lausanne\"),\n  Einwohner = c(396027,194565,175131,140634,135629),\n  Ankunft = c(\"1.1.2017 10:00\",\"1.1.2017 14:00\",\n              \"1.1.2017 13:00\",\"1.1.2017 18:00\",\"1.1.2017 21:00\")\n)\n\nstr(df)\n## 'data.frame':    5 obs. of  3 variables:\n##  $ Stadt    : chr  \"Zürich\" \"Genf\" \"Basel\" \"Bern\" ...\n##  $ Einwohner: num  396027 194565 175131 140634 135629\n##  $ Ankunft  : chr  \"1.1.2017 10:00\" \"1.1.2017 14:00\" \"1.1.2017 13:00\" \"1.1.2017 18:00\" ...\n\nIn der obigen data.frame wurde die Spalte Einwohner als Fliesskommazahl abgespeichert. Dies ist zwar nicht tragisch, aber da wir wissen das es sich hier sicher um Ganzzahlen handelt, können wir das korrigieren. Wichtiger ist aber, dass wir die Ankunftszeit (SpalteAnkunft) von einem Factor in ein Zeitformat (POSIXct) umwandeln.\n\ndf$Einwohner <- as.integer(df$Einwohner)\n\ndf$Einwohner\n## [1] 396027 194565 175131 140634 135629\n\ndf$Ankunft <- as.POSIXct(df$Ankunft, format = \"%d.%m.%Y %H:%M\")\n\ndf$Ankunft\n## [1] \"2017-01-01 10:00:00 CET\" \"2017-01-01 14:00:00 CET\"\n## [3] \"2017-01-01 13:00:00 CET\" \"2017-01-01 18:00:00 CET\"\n## [5] \"2017-01-01 21:00:00 CET\"\n\nDiese Rohdaten können nun helfen, um Hilfsvariablen (convenience variables) zu erstellen. Z.B. können wir die Städte einteilen in gross, mittel und klein.\n\ndf$Groesse[df$Einwohner > 300000] <- \"gross\"\ndf$Groesse[df$Einwohner <= 300000 & df$Einwohner > 150000] <- \"mittel\"\ndf$Groesse[df$Einwohner <= 150000] <- \"klein\"\n\ndf$Groesse\n## [1] \"gross\"  \"mittel\" \"mittel\" \"klein\"  \"klein\"\n\nOder aber, die Ankunftszeit kann von der Spalte Ankunftabgeleitet werden.\n\ndf$Ankunft_stunde <- hour(df$Ankunft)\n\ndf$Ankunft_stunde\n## [1] 10 14 13 18 21\n\n\n\n\n\n\n\n\n\n\nordered = T kann nur bei der Funktion factor() spezifiziert werden, nicht bei as.factor(). Ansonsten sind factor() und as.factor() sehr ähnlich.↩︎"
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html",
    "href": "prepro/Prepro1_Uebung.html",
    "title": "PrePro 1: Übung",
    "section": "",
    "text": "Wir empfehlen die Verwendung von “Projects” innerhalb von RStudio. RStudio legt für jedes Projekt dann einen Ordner an, in welches die Projekt-Datei abgelegt wird (Dateiendung .Rproj). Sollen innerhalb des Projekts dann R-Skripts geladen oder erzeugt werden, werden diese dann auch im angelegten Ordner abgelegt. Mehr zu RStudio Projects findet ihr hier.\nDas Verwenden von Projects bringt verschiedene Vorteile, wie zum Beispiel:\n\nFestlegen der Working Directory ohne die Verwendung des expliziten Pfades (setwd()). Das ist sinnvoll, da sich dieser Pfad ändern kann (Zusammenarbeit mit anderen Usern, Ausführung des Scripts zu einem späteren Zeitpunkt)\nAutomatisches Zwischenspeichern geöffneter Scripts und Wiederherstellung der geöffneten Scripts bei der nächsten Session\nFestlegen verschiedener projektspezifischer Optionen\nVerwendung von Versionsverwaltungssystemen (z.B. git)"
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#arbeiten-mit-libraries-packages",
    "href": "prepro/Prepro1_Uebung.html#arbeiten-mit-libraries-packages",
    "title": "PrePro 1: Übung",
    "section": "Arbeiten mit Libraries / Packages",
    "text": "Arbeiten mit Libraries / Packages\nR ist ohne Zusatzpackete nicht mehr denkbar. Die allermeisten Packages werden auf CRAN gehostet und können leicht mittels install.packages() installiert werden. Eine sehr wichtige Sammlung von Packages wird von RStudio entwickelt. Unter dem Namen Tidyverse werden eine Reihe von Packages angeboten, den R-Alltag enorm erleichtert. Wir werden später näher auf das “Tidy”-Universum eingehen, an dieser Stelle können wir einfach mal die wichtigsten Packages aus tidyverse installieren (heute werden wir davon nur einen kleinen Teil benutzen).\n\ninstall.packages(\"dplyr\")\ninstall.packages(\"tidyr\")      # ← MIT Anführungs-/Schlusszeichen\ninstall.packages(\"readr\")\ninstall.packages(\"lubridate\")\ninstall.packages(\"ggplot2\")\n\nUm ein package in R verwenden zu können, gibt es zwei Möglichkeiten:\n\nentweder man lädt es zu Beginn der R-session mittles library(dplyr) (ohne Anführungs- und Schlusszeichen).\noder man ruft eine function mit vorangestelltem Packetname sowie zwei Doppelpunkten auf. dplyr::filter() ruft die Funktion filter() des Packets dplyr auf.\n\nLetztere Notation ist vor allem dann sinnvoll, wenn sich zwei unterschiedliche Funktionen mit dem gleichen namen in verschiedenen pacakges existieren. filter() existiert als Funktion einersits im package dplyr sowie in stats. Dieses Phänomen nennt man “masking”.\nZu Beginn laden wir die nötigen Pakete :\n\nlibrary(readr)                 # ← OHNE Anführungs-/Schlusszeichen\nlibrary(lubridate)\n\n\n\n\n\n\n\nHinweis\n\n\n\nWir nutzen readr um csvs zu importieren und verwenden die Funktion read_csv (mit underscore) als alternative zu read.csv (mit Punkt). Das ist eine persönliche Präferenz1, es ist euch überlassen welche Funktion ihr verwendet. Beachtet, dass die beiden Funktionen leicht andere Parameter erwarten."
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-1",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-1",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nErstelle eine data.frame mit nachstehenden Daten.\n\n\nMusterlösung\ndf <- data.frame(\n  Tierart = c(\"Fuchs\",\"Bär\",\"Hase\",\"Elch\"),\n  Anzahl = c(2,5,1,3),\n  Gewicht = c(4.4, 40.3,1.1,120),\n  Geschlecht = c(\"m\",\"f\",\"m\",\"m\"),\n  Beschreibung = c(\"Rötlich\",\"Braun, gross\", \"klein, mit langen Ohren\",\"Lange Beine, Schaufelgeweih\")\n  )\n\n\n\n\n\n\n\nTierart\nAnzahl\nGewicht\nGeschlecht\nBeschreibung\n\n\n\n\nFuchs\n2\n4.4\nm\nRötlich\n\n\nBär\n5\n40.3\nf\nBraun, gross\n\n\nHase\n1\n1.1\nm\nklein, mit langen Ohren\n\n\nElch\n3\n120.0\nm\nLange Beine, Schaufelgeweih"
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-2",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-2",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nWas für Datentypen wurden in der letzten Aufgabe automatisch angenommen? Ermittle diese mit str() und prüfe, ob diese sinnvoll sind und wandle um wo nötig.\n\n\nMusterlösung\nstr(df)\n## 'data.frame':    4 obs. of  5 variables:\n##  $ Tierart     : chr  \"Fuchs\" \"Bär\" \"Hase\" \"Elch\"\n##  $ Anzahl      : num  2 5 1 3\n##  $ Gewicht     : num  4.4 40.3 1.1 120\n##  $ Geschlecht  : chr  \"m\" \"f\" \"m\" \"m\"\n##  $ Beschreibung: chr  \"Rötlich\" \"Braun, gross\" \"klein, mit langen Ohren\" \"Lange Beine, Schaufelgeweih\"\ntypeof(df$Anzahl)\n## [1] \"double\"\n# Anzahl wurde als `double` interpretiert, ist aber eigentlich ein `integer`. \n\ndf$Anzahl <- as.integer(df$Anzahl)"
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-3",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-3",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nNutze die Spalte Gewicht um die Tiere in 3 Gewichtskategorien einzuteilen:\n\nleicht: < 5kg\nmittel: 5 - 100 kg\nschwer: > 100kg\n\n\n\nMusterlösung\ndf$Gewichtsklasse[df$Gewicht > 100] <- \"schwer\"\ndf$Gewichtsklasse[df$Gewicht <= 100 & df$Gewicht > 5] <- \"mittel\"\ndf$Gewichtsklasse[df$Gewicht <= 5] <- \"leicht\"\n\n\nDas Resultat:\n\n\n\n\n\n\n\n\n\n\n\n\n\nTierart\nAnzahl\nGewicht\nGeschlecht\nBeschreibung\nGewichtsklasse\n\n\n\n\nFuchs\n2\n4.4\nm\nRötlich\nleicht\n\n\nBär\n5\n40.3\nf\nBraun, gross\nmittel\n\n\nHase\n1\n1.1\nm\nklein, mit langen Ohren\nleicht\n\n\nElch\n3\n120.0\nm\nLange Beine, Schaufelgeweih\nschwer"
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-4",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-4",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nImportiere den Datensatz weather.csv (Quelle MeteoSchweiz). Es handelt sich dabei um die stündlich gemittelten Temperaturdaten an verschiedenen Standorten in der Schweiz.\n\n\n\n\n\n\nWarnung\n\n\n\nWenn du read_csv verwenden möchtest: Diese Funktion erwartet leicht andere inputs als read.csv, konsultiere dazu die Hilfe zu read_csv (mit ?read_csv).\n\n\n\n\nMusterlösung\nwetter <- read_csv(\"datasets/prepro/weather.csv\")\n\n\n\n\n\n\n\nstn\ntime\ntre200h0\n\n\n\n\nABO\n2000010100\n-2.6\n\n\nABO\n2000010101\n-2.5\n\n\nABO\n2000010102\n-3.1\n\n\nABO\n2000010103\n-2.4\n\n\nABO\n2000010104\n-2.5\n\n\nABO\n2000010105\n-3.0\n\n\nABO\n2000010106\n-3.7\n\n\nABO\n2000010107\n-4.4\n\n\nABO\n2000010108\n-4.1\n\n\nABO\n2000010109\n-4.1"
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-5",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-5",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nSchau dir die Rückmeldung von read_csv()an. Sind die Daten korrekt interpretiert worden?\n\n\nMusterlösung\n# Die Spalte 'time' wurde als 'integer' interpretiert. Dabei handelt es\n# sich offensichtlich um Zeitangaben."
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-6",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-6",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nDie Spalte time ist eine Datum/Zeitangabe im Format JJJJMMTTHH (siehe meta.txt). Damit R dies als Datum-/Zeitangabe erkennt, müssen wir die Spalte in einem R-Format (POSIXct) einlesen und dabei R mitteilen, wie sie aktuell formatiert ist. Lies die Spalte mit as.POSIXct() ein und spezifiziere sowohl format wie auch tz.\n\n\n\n\n\n\nTipp\n\n\n\n\nWenn keine Zeitzone festgelegt wird, trifft as.POSIXct() eine Annahme (basierend auf Sys.timezone()). In unserem Fall handelt es sich aber um Werte in UTC (siehe metadata.csv)\nas.POSIXcterwartet character: Wenn du eine Fehlermeldung hast die 'origin' must be supplied (o.ä) heisst, hast du der Funktion vermutlich einen Numeric übergeben.\n\n\n\n\n\nMusterlösung\nwetter$time <- as.POSIXct(as.character(wetter$time), format = \"%Y%m%d%H\",tz = \"UTC\")\n\n\n\n\n\nDie neue Tabelle sollte so aussehen\n\n\nstn\ntime\ntre200h0\n\n\n\n\nABO\n2000-01-01 00:00:00\n-2.6\n\n\nABO\n2000-01-01 01:00:00\n-2.5\n\n\nABO\n2000-01-01 02:00:00\n-3.1\n\n\nABO\n2000-01-01 03:00:00\n-2.4\n\n\nABO\n2000-01-01 04:00:00\n-2.5\n\n\nABO\n2000-01-01 05:00:00\n-3.0\n\n\nABO\n2000-01-01 06:00:00\n-3.7\n\n\nABO\n2000-01-01 07:00:00\n-4.4\n\n\nABO\n2000-01-01 08:00:00\n-4.1\n\n\nABO\n2000-01-01 09:00:00\n-4.1"
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-7",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-7",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 7",
    "text": "Aufgabe 7\nErstelle zwei neue Spalten mit Wochentag (Montag, Dienstag, etc) und Kalenderwoche. Verwende dazu die neu erstellte POSIXct-Spalte sowie eine geeignete Funktion aus lubridate.\n\n\nMusterlösung\nwetter$wochentag <- wday(wetter$time,label = T)\nwetter$kw <- week(wetter$time)\n\n\n\n\n\n\n\nstn\ntime\ntre200h0\nwochentag\nkw\n\n\n\n\nABO\n2000-01-01 00:00:00\n-2.6\nSa.\n1\n\n\nABO\n2000-01-01 01:00:00\n-2.5\nSa.\n1\n\n\nABO\n2000-01-01 02:00:00\n-3.1\nSa.\n1\n\n\nABO\n2000-01-01 03:00:00\n-2.4\nSa.\n1\n\n\nABO\n2000-01-01 04:00:00\n-2.5\nSa.\n1\n\n\nABO\n2000-01-01 05:00:00\n-3.0\nSa.\n1\n\n\nABO\n2000-01-01 06:00:00\n-3.7\nSa.\n1\n\n\nABO\n2000-01-01 07:00:00\n-4.4\nSa.\n1\n\n\nABO\n2000-01-01 08:00:00\n-4.1\nSa.\n1\n\n\nABO\n2000-01-01 09:00:00\n-4.1\nSa.\n1"
  },
  {
    "objectID": "prepro/Prepro1_Uebung.html#aufgabe-8",
    "href": "prepro/Prepro1_Uebung.html#aufgabe-8",
    "title": "PrePro 1: Übung",
    "section": "Aufgabe 8",
    "text": "Aufgabe 8\nErstelle eine neue Spalte basierend auf die Temperaturwerte mit der Einteilung “kalt” (unter Null Grad) und “warm” (über Null Grad)\n\n\nMusterlösung\nwetter$temp_kat[wetter$tre200h0>0] <- \"warm\"\nwetter$temp_kat[wetter$tre200h0<=0] <- \"kalt\"\n\n\n\n\n\n\n\nstn\ntime\ntre200h0\nwochentag\nkw\ntemp_kat\n\n\n\n\nABO\n2000-01-01 00:00:00\n-2.6\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 01:00:00\n-2.5\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 02:00:00\n-3.1\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 03:00:00\n-2.4\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 04:00:00\n-2.5\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 05:00:00\n-3.0\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 06:00:00\n-3.7\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 07:00:00\n-4.4\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 08:00:00\n-4.1\nSa.\n1\nkalt\n\n\nABO\n2000-01-01 09:00:00\n-4.1\nSa.\n1\nkalt"
  },
  {
    "objectID": "prepro/Prepro2_Demo.html",
    "href": "prepro/Prepro2_Demo.html",
    "title": "Prepro 2: Demo",
    "section": "",
    "text": "Diese Demo kann auch als R Script heruntergeladen werden (Rechtsklick → Save Target As..)"
  },
  {
    "objectID": "prepro/Prepro2_Demo.html#piping",
    "href": "prepro/Prepro2_Demo.html#piping",
    "title": "Prepro 2: Demo",
    "section": "Piping",
    "text": "Piping\nGegeben ist ein character string (diary). Wir wollen aus diesem Text die Temperaturangabe aus dem String extrahieren und danach den Wert von Kelvin in Celsius nach der folgenden Formel umwandeln und zum Schluss den Mittelwert über all diese Werte berechnen.\n\\[°C = K - 273.15\\]\n\ndiary <- c(\n  \"The temperature is 310° Kelvin\",\n  \"The temperature is 322° Kelvin\",\n  \"The temperature is 410° Kelvin\"\n)\n\ndiary\n## [1] \"The temperature is 310° Kelvin\" \"The temperature is 322° Kelvin\"\n## [3] \"The temperature is 410° Kelvin\"\n\nDazu brauchen wir die Funktion substr(), welche aus einem character einen Teil “raus schnipseln” kann.\n\n# Wenn die Buchstaben einzelne _Elemente_ eines Vektors wären, würden wir diese\n# folgendermassen subsetten:\n\ncharvec1 <- c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")\ncharvec1[4:6]\n## [1] \"d\" \"e\" \"f\"\n\n# Aber wenn diese in einem einzigen character gespeichert sind, brauchen wir substr:\ncharvec2 <- \"abcdefgh\"\nsubstr(charvec2, 4, 6)\n## [1] \"def\"\n\nZudem nutzen haben wir eine Hilfsfunktion subtrahieren, welche zwei Werte annimmt, den minuend und den subtrahend:\n\nsubtrahieren <- function(minuend, subtrahend){\n  minuend - subtrahend\n}\n\nsubtrahieren(10, 4)\n## [1] 6\n\nÜbersetzt in R-Code entsteht folgende Operation:\n\noutput <- mean(subtrahieren(as.numeric(substr(diary, 20, 22)),273.15))\n#                                             \\_1_/\n#                                      \\________2__________/\n#                           \\___________________3___________/\n#              \\________________________________4__________________/\n#         \\_____________________________________5____________________/\n\n# 1. Nimm diary\n# 2. Extrahiere auf jeder Zeile die Werte 20 bis 22\n# 3. Konvertiere \"character\" zu \"numeric\"\n# 4. Subtrahiere 273.15\n# 5. Berechne den Mittlwert\n\nDie ganze Operation liest sich etwas leichter, wenn diese sequentiell notiert wird:\n\ntemp <- substr(diary, 20, 22)       # 2\ntemp <- as.numeric(temp)            # 3\ntemp <- subtrahieren(temp, 273.15)  # 4\noutput <- mean(temp)                # 5\n\nUmständlich ist dabei einfach, dass die Zwischenresultate immer abgespeichert und in der darauf folgenden Operation wieder abgerufen werden müssen. Hier kommt “piping” ins Spiel: Mit “piping” wird der Output der einen Funktion der erste Parameter der darauf folgenden Funktion.\n\nlibrary(magrittr)\n\ndiary |>                            # 1\n  substr(20, 22) |>                 # 2\n  as.numeric() |>                   # 3 \n  subtrahieren(273.15) |>           # 4\n  mean()                            # 5\n## [1] 74.18333\n\n\n\n\n\n\n\nWichtig\n\n\n\n\nder |> Pipe Operator wurde erst in R 4.1 eingeführt\nNeben dem base R Pipe Operator existiert im Package magrittr ein sehr ähnlicher1 Pipe Operator: %>%\nDie Tastenkombination Ctrl+Shift+M in RStudio fügt einen Pipe Operator ein.\nWelcher Pipe Operator |> oder %>% mit der obigen Tastenkombination eingeführt wird, kann über die RStudio Settings Tools → Global Options → Code → Häckchen setzen bei Use nativ pipe operator"
  },
  {
    "objectID": "prepro/Prepro2_Demo.html#joins",
    "href": "prepro/Prepro2_Demo.html#joins",
    "title": "Prepro 2: Demo",
    "section": "Joins",
    "text": "Joins\n\nstudierende <- data.frame(\n  Matrikel_Nr = c(100002, 100003, 200003),\n  Studi = c(\"Patrick\", \"Manuela\", \"Eva\"),\n  PLZ = c(8006, 8001, 8820)\n)\n\nstudierende\n##   Matrikel_Nr   Studi  PLZ\n## 1      100002 Patrick 8006\n## 2      100003 Manuela 8001\n## 3      200003     Eva 8820\n\nortschaften <- data.frame(\n  PLZ = c(8003, 8006, 8810, 8820),\n  Ortsname = c(\"Zürich\", \"Zürich\", \"Horgen\", \"Wädenswil\")\n)\n\nortschaften\n##    PLZ  Ortsname\n## 1 8003    Zürich\n## 2 8006    Zürich\n## 3 8810    Horgen\n## 4 8820 Wädenswil\n\n\n#Load library\nlibrary(dplyr)\n\ninner_join(studierende, ortschaften, by = \"PLZ\")\n##   Matrikel_Nr   Studi  PLZ  Ortsname\n## 1      100002 Patrick 8006    Zürich\n## 2      200003     Eva 8820 Wädenswil\n\nleft_join(studierende, ortschaften, by = \"PLZ\")\n##   Matrikel_Nr   Studi  PLZ  Ortsname\n## 1      100002 Patrick 8006    Zürich\n## 2      100003 Manuela 8001      <NA>\n## 3      200003     Eva 8820 Wädenswil\n\nright_join(studierende, ortschaften, by = \"PLZ\")\n##   Matrikel_Nr   Studi  PLZ  Ortsname\n## 1      100002 Patrick 8006    Zürich\n## 2      200003     Eva 8820 Wädenswil\n## 3          NA    <NA> 8003    Zürich\n## 4          NA    <NA> 8810    Horgen\n\nfull_join(studierende, ortschaften, by = \"PLZ\")\n##   Matrikel_Nr   Studi  PLZ  Ortsname\n## 1      100002 Patrick 8006    Zürich\n## 2      100003 Manuela 8001      <NA>\n## 3      200003     Eva 8820 Wädenswil\n## 4          NA    <NA> 8003    Zürich\n## 5          NA    <NA> 8810    Horgen\n\n\nstudierende <- data.frame(\n  Matrikel_Nr = c(100002, 100003, 200003),\n  Studi = c(\"Patrick\", \"Manuela\", \"Pascal\"),\n  Wohnort = c(8006, 8001, 8006)\n)\n\nleft_join(studierende, ortschaften, by = c(\"Wohnort\" = \"PLZ\"))\n##   Matrikel_Nr   Studi Wohnort Ortsname\n## 1      100002 Patrick    8006   Zürich\n## 2      100003 Manuela    8001     <NA>\n## 3      200003  Pascal    8006   Zürich"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html",
    "href": "prepro/Prepro2_Uebung_A.html",
    "title": "Prepro 2: Übung A",
    "section": "",
    "text": "library(dplyr)\nlibrary(readr)\nlibrary(lubridate)\n\n# Alternativ kannst du alle tidyverse packages mit library(tidyverse) laden"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-1",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-1",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nLade die Wetterdaten von letzer Woche runter (weather.csv, Quelle MeteoSchweiz) und importiere sie in R. Sorge dafür, dass die Spalten korrekt formatiert sind (stn als factor, time als POSIXct, tre200h0 als numeric.)\n\n\nMusterlösung\n# Variante 1\nwetter <- read_csv(\"datasets/prepro/weather.csv\")\nwetter$stn <- as.factor(wetter$stn)\nwetter$time <- as.POSIXct(as.character(wetter$time), format = \"%Y%m%d%H\", tz = \"UTC\")\n\n\n\n\nMusterlösung\n# Variate 2 (für Profis)\nwetter <- read_csv(\"datasets/prepro/weather.csv\",\n                  col_types = cols(\n                    col_factor(levels = NULL),    \n                    col_datetime(format = \"%Y%m%d%H\"),\n                    col_double()\n                    )\n                  )"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-2",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-2",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nLade metadata herunter und lese es ebenfalls als csv ein.\n\n\n\n\n\n\nTipp\n\n\n\nWenn Umlaute und Sonderzeichen nicht korrekt dargestellt werden (z.B. das è in Genève), hat das vermutlich mit der Zeichencodierung zu tun. Das File ist aktuell in UTF-8 codiert. Wenn Umlaute nicht korrekt dargestellt werden, hat R diese Codierung nicht erkannt und sie muss in der Import-Funktion spezifitiert werden. Dies wird je nach verwendete import Funktion unterschiedlich gemacht:\n\nFunktionen aus dem Package readr: locale = locale(encoding = \"UTF-8\")\nBase-R Funktionen: fileEncoding = \"UTF-8\"\n\nWenn ihr die codierung eines Files nicht kennt, könnt wie folgt vorgehen: Anleitung für Windows, für Mac und für Linux.\n\n\n\n\nMusterlösung\nmetadata <- read_delim(\"datasets/prepro/metadata.csv\", delim = \";\", locale = locale(encoding = \"UTF-8\"))"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-3",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-3",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nNun wollen wir den Datensatz wettermit den Informationen aus metadata anreichern. Uns interessiert aber nur das Stationskürzel, der Name, die x/y Koordinaten sowie die Meereshöhe, selektiere diese Spalten.\n\n\nMusterlösung\nmetadata <- metadata[,c(\"stn\", \"Name\", \"x\",\"y\",\"Meereshoehe\")]"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-4",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-4",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nJetzt kann metadata mit dem Datensatz wetter verbunden werden. Überlege dir, welcher Join dafür sinnvoll ist und mit welchem Attribut wir “joinen” können.\nNutze die Join-Möglichkeiten von dplyr (Hilfe via ?dplyr::join) um die Datensätze wetter und metadata zu verbinden.\n\n\nMusterlösung\nwetter <- left_join(wetter,metadata,by = \"stn\")\n\n# Jointyp: Left-Join auf 'wetter', da uns nur die Stationen im Datensatz 'wetter' interessieren.\n# Attribut: \"stn\""
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-5",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-5",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nErstelle eine neue Spalte month welche den jeweiligen Monat (aus time) beinhaltet. Nutze dafür die Funktion lubridate::month().\n\n\nMusterlösung\nwetter$month <- month(wetter$time)"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_A.html#aufgabe-6",
    "href": "prepro/Prepro2_Uebung_A.html#aufgabe-6",
    "title": "Prepro 2: Übung A",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nBerechne mit der Spalte month die Durchschnittstemperatur pro Monat.\n\n\nMusterlösung\nmean(wetter$tre200h0[wetter$month == 1])\n## [1] -1.963239\nmean(wetter$tre200h0[wetter$month == 2])\n## [1] 0.3552632\nmean(wetter$tre200h0[wetter$month == 3])\n## [1] 2.965054\n\n# usw. für alle 12 Monate"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html",
    "href": "prepro/Prepro2_Uebung_B.html",
    "title": "Prepro 2: Übung B",
    "section": "",
    "text": "# Benötigte Packages\nlibrary(dplyr)\nlibrary(readr)"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html#aufgabe-1",
    "href": "prepro/Prepro2_Uebung_B.html#aufgabe-1",
    "title": "Prepro 2: Übung B",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nGegeben sind die Daten von drei Sensoren (sensor1.csv, sensor2.csv, sensor3.csv). Lade die Datensätze runter und lese sie ein.\n\n\nMusterlösung\nsensor1 <- read_delim(\"datasets/prepro/sensor1.csv\",\";\")\nsensor2 <- read_delim(\"datasets/prepro/sensor2.csv\",\";\")\nsensor3 <- read_delim(\"datasets/prepro/sensor3.csv\",\";\")"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html#aufgabe-2",
    "href": "prepro/Prepro2_Uebung_B.html#aufgabe-2",
    "title": "Prepro 2: Übung B",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nErstelle aus den 3 Dataframes eine einzige Dataframe, die aussieht wie unten dargestellt. Nutze dafür zwei joins aus dplyr um 3 data.frames miteinander zu verbinden. Bereinige im Anschluss die Spaltennamen (wie geht das?).\n\n\nMusterlösung\nsensor1_2 <- full_join(sensor1, sensor2, \"Datetime\")\n\nsensor1_2 <- rename(sensor1_2, sensor1 = Temp.x, sensor2 = Temp.y)\n\nsensor_all <- full_join(sensor1_2, sensor3, by = \"Datetime\")\n\nsensor_all <- rename(sensor_all, sensor3 = Temp)\n\n\n\n\n\n\n\nDatetime\nsensor1\nsensor2\nsensor3\n\n\n\n\n16102017_1800\n23.5\n13.5\n26.5\n\n\n17102017_1800\n25.4\n24.4\n24.4\n\n\n18102017_1800\n12.4\n22.4\n13.4\n\n\n19102017_1800\n5.4\n12.4\n7.4\n\n\n23102017_1800\n23.5\n13.5\nNA\n\n\n24102017_1800\n21.3\n11.3\nNA"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html#aufgabe-3",
    "href": "prepro/Prepro2_Uebung_B.html#aufgabe-3",
    "title": "Prepro 2: Übung B",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nImportiere die Datei sensor_fail.csv in R.\n\n\nMusterlösung\nsensor_fail <- read_delim(\"datasets/prepro/sensor_fail.csv\", delim = \";\")\n\n\nsensor_fail.csv hat eine Variabel SensorStatus: 1 bedeutet der Sensor misst, 0 bedeutet der Sensor misst nicht. Fälschlicherweise wurde auch dann der Messwert Temp = 0 erfasst, wenn Sensorstatus = 0. Richtig wäre hier NA (not available). Korrigiere den Datensatz entsprechend.\n\n\n\n\n\nSensor\nTemp\nHum_%\nDatetime\nSensorStatus\n\n\n\n\nSen102\n0.6\n98\n16102017_1800\n1\n\n\nSen102\n0.3\n96\n17102017_1800\n1\n\n\nSen102\n0.0\n87\n18102017_1800\n1\n\n\nSen102\n0.0\n86\n19102017_1800\n0\n\n\nSen102\n0.0\n98\n23102017_1800\n0\n\n\nSen102\n0.0\n98\n24102017_1800\n0\n\n\nSen102\n0.0\n96\n25102017_1800\n1\n\n\nSen103\n-0.3\n87\n26102017_1800\n1\n\n\nSen103\n-0.7\n98\n27102017_1800\n1\n\n\nSen103\n-1.2\n98\n28102017_1800\n1\n\n\n\n\n\n\n\nMusterlösung\n# mit base-R: \nsensor_fail$Temp_correct[sensor_fail$SensorStatus == 0] <- NA\n\n# das gleiche mit dplyr:\nsensor_fail <- sensor_fail |>\n  mutate(Temp_correct = ifelse(SensorStatus == 0, NA, Temp))"
  },
  {
    "objectID": "prepro/Prepro2_Uebung_B.html#aufgabe-4",
    "href": "prepro/Prepro2_Uebung_B.html#aufgabe-4",
    "title": "Prepro 2: Übung B",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nWarum spielt das es eine Rolle, ob 0 oder NA erfasst wird? Berechne die Mittlere der Temperatur / Feuchtigkeit nach der Korrektur.\n\n\nMusterlösung\n\n# Mittelwerte der falschen Sensordaten: 0 fliesst in die Berechnung \n# ein und verfälscht den Mittelwert\nmean(sensor_fail$Temp)\n## [1] -0.13\n\n# Mittelwerte der korrigierten Sensordaten: mit na.rm = TRUE werden \n# NA-Werte aus der Berechnung entfernt. \nmean(sensor_fail$Temp_correct, na.rm = TRUE)\n## [1] -0.1857143"
  },
  {
    "objectID": "prepro/Prepro3_Demo.html",
    "href": "prepro/Prepro3_Demo.html",
    "title": "Prepro 3: Demo",
    "section": "",
    "text": "In dieser Demo möchten wir weitere Werkzeuge aus dem Tidyverse vorstellen und mit Beispielen illustrieren. Die tidyverse-Tools erleichtern den Umgang mit Daten ungeheuer und haben sich mittlerweile zu einem “must have” im Umgang mit Daten in R entwickelt.\nWir können Euch nicht sämtliche Möglichkeiten von tidyverse zeigen. Wir fokussieren uns deshalb auf weitere wichtige Komponenten und zeigen zusätzliche Funktionalitäten, die wir oft verwenden und Euch ggf. noch nicht bekannt sind. Wer sich vertieft mit dem Thema auseinandersetzen möchte, der sollte sich unbedingt das Buch Wickham und Grolemund (2017) beschaffen. Eine umfangreiche, aber nicht ganz vollständige Version gibt es online1 , das vollständige eBook kann über die Bibliothek bezogen werden2.\nWir benötigen dazu folgende Packages:"
  },
  {
    "objectID": "prepro/Prepro3_Demo.html#split-apply-combine",
    "href": "prepro/Prepro3_Demo.html#split-apply-combine",
    "title": "Prepro 3: Demo",
    "section": "Split-Apply-Combine",
    "text": "Split-Apply-Combine\n\nDaten Laden\nWir laden die Wetterdaten (Quelle MeteoSchweiz) von der letzten Übung.\n\nwetter <- read_csv(\"datasets/prepro/weather.csv\")\n\nwetter <- wetter  |>\n  mutate(\n    stn = as.factor(stn),\n    time = as.POSIXct(as.character(time), format = \"%Y%m%d%H\")\n  )\n\n\n\nKennwerte berechnen\nWir möchten den Mittelwert aller gemessenen Temperaturwerte berechnen. Dazu könnten wir folgenden Befehl verwenden:\n\nmean(wetter$tre200h0, na.rm = TRUE) \n## [1] 6.324744\n\nDie Option na.rm = T bedeutet, dass NA Werte von der Berechnung ausgeschlossen werden sollen.\nMit der selben Herangehensweise können diverse Werte berechnet werden (z.B. das Maximum (max()), Minimum (min()), Median (median()) u.v.m.).\nDiese Herangehensweise funktioniert nur dann gut, wenn wir die Kennwerte über alle Beobachtungen für eine Variable (Spalte) berechnen wollen. Sobald wir die Beobachtungen gruppieren wollen, wird es schwierig. Zum Beispiel, wenn wir die durchschnittliche Temperatur pro Monat berechnen wollen.\n\n\nConvenience Variablen\nUm diese Aufgabe zu lösen, muss zuerst der Monat extrahiert werden (der Monat ist die convenience variable). Hierfür brauchen wir die Funktion lubridate::month().\nNun kann kann die convenience Variable “Month” erstellt werden. Ohne dpylr wird eine neue Spalte folgendermassen hinzugefügt.\n\nwetter$month <- month(wetter$time)\n\nMit dplyr (siehe 3) sieht der gleiche Befehl folgendermassen aus:\n\nwetter <- mutate(wetter,month = month(time))\n\nDer grosse Vorteil von dplyr ist an dieser Stelle noch nicht ersichtlich. Dieser wird aber später klar.\n\n\nKennwerte nach Gruppen berechnen\nUm mit base R den Mittelwert pro Monat zu berechnen, kann man zuerst ein Subset mit [] erstellen und davon den Mittelwert berechnen, z.B. folgendermassen:\n\nmean(wetter$tre200h0[wetter$month == 1], na.rm = TRUE)\n## [1] -1.963239\n\nDies müssen wir pro Monat wiederholen, was natürlich sehr umständlich ist. Deshalb nutzen wir das package dplyr. Damit geht die Aufgabe (Temperaturmittel pro Monat berechnen) folgendermassen:\n\nsummarise(group_by(wetter,month),temp_mittel = mean(tre200h0, na.rm = TRUE))\n## # A tibble: 13 × 2\n##    month temp_mittel\n##    <dbl>       <dbl>\n##  1     1      -1.96 \n##  2     2       0.355\n##  3     3       2.97 \n##  4     4       4.20 \n##  5     5      11.0  \n##  6     6      12.4  \n##  7     7      13.0  \n##  8     8      15.0  \n##  9     9       9.49 \n## 10    10       8.79 \n## 11    11       1.21 \n## 12    12      -0.898\n## 13    NA       2.95\n\n\n\nVerketten vs. verschachteln\nAuf Deutsch übersetzt heisst die obige Operation folgendermassen:\n\nnimm den Datensatz wetter\nBilde Gruppen pro Jahr (group_by(wetter,year))\nBerechne das Temperaturmittel (mean(tre200h0))\n\nDiese Übersetzung R-> Deutsch unterscheidet sich vor allem darin, dass die Operation auf Deutsch verkettet ausgesprochen wird (Operation 1->2->3) während der Computer verschachtelt liest 3(2(1)). Um R näher an die gesprochene Sprache zu bringen, kann man den |>-Operator verwenden (siehe 4).\n\n# 1 nimm den Datensatz \"wetter\"\n# 2 Bilde Gruppen pro Monat\n# 3 berechne das Temperaturmittel \n\nsummarise(group_by(wetter,month),temp_mittel = mean(tre200h0))\n#                  \\_1_/\n#         \\__________2_________/\n#\\___________________3_______________________________________/\n\n# wird zu:\n\nwetter |>                                 # 1\n  group_by(month) |>                      # 2\n  summarise(temp_mittel = mean(tre200h0)) # 3\n\nDieses Verketten mittels |> (genannt “pipe”) macht den Code einiges schreib- und leserfreundlicher, und wir werden ihn in den nachfolgenden Übungen verwenden. Die “pipe” wird mit dem package magrittr bereitgestellt und mit dplyr mitinstalliert.\nZu dplyr gibt es etliche Tutorials online (siehe5), deshalb werden wir diese Tools nicht in allen Details erläutern. Nur noch folgenden wichtigen Unterschied zu zwei wichtigen Funktionen in dpylr: mutate() und summarise().\n\nsummarise() fasst einen Datensatz zusammen. Dabei reduziert sich die Anzahl Beobachtungen (Zeilen) auf die Anzahl Gruppen (z.B. eine zusammengefasste Beobachtung (Zeile) pro Jahr). Zudem reduziert sich die Anzahl Variablen (Spalten) auf diejenigen, die in der “summarise” Funktion spezifiziert wurde (z.B. temp_mittel).\nmit mutate wird ein data.frame vom Umfang her belassen, es werden lediglich zusätzliche Variablen (Spalten) hinzugefügt (siehe Beispiel unten).\n\n\n# Maximal und minimal Temperatur pro Kalenderwoche\nweather_summary <- wetter |>               #1) nimm den Datensatz \"wetter\"\n  filter(month == 1) |>                    #2) filter auf den Monat Januar\n  mutate(day = day(time)) |>               #3) erstelle eine neue Spalte \"day\"\n  group_by(day) |>                         #4) Nutze die neue Spalte um Gruppen zu bilden\n  summarise(\n    temp_max = max(tre200h0, na.rm = TRUE), #5) Berechne das Maximum \n    temp_min = min(tre200h0, na.rm = TRUE)  #6) Berechne das Minimum\n    )   \n\nweather_summary\n## # A tibble: 31 × 3\n##      day temp_max temp_min\n##    <int>    <dbl>    <dbl>\n##  1     1      5.8     -4.4\n##  2     2      2.8     -4.3\n##  3     3      4.2     -3.1\n##  4     4      4.7     -2.8\n##  5     5     11.4     -0.6\n##  6     6      6.7     -1.6\n##  7     7      2.9     -2.8\n##  8     8      0.2     -3.6\n##  9     9      2.1     -8.8\n## 10    10      1.6     -2.4\n## # … with 21 more rows"
  },
  {
    "objectID": "prepro/Prepro3_Demo.html#reshaping-data",
    "href": "prepro/Prepro3_Demo.html#reshaping-data",
    "title": "Prepro 3: Demo",
    "section": "Reshaping data",
    "text": "Reshaping data\n\nBreit → lang\nDie Umformung von Tabellen breit→lang erfolgt mittels tidyr(siehe 6). Auch dieses Package funktioniert wunderbar mit piping (|>).\n\nweather_summary |>\n  pivot_longer(c(temp_max,temp_min))\n## # A tibble: 62 × 3\n##      day name     value\n##    <int> <chr>    <dbl>\n##  1     1 temp_max   5.8\n##  2     1 temp_min  -4.4\n##  3     2 temp_max   2.8\n##  4     2 temp_min  -4.3\n##  5     3 temp_max   4.2\n##  6     3 temp_min  -3.1\n##  7     4 temp_max   4.7\n##  8     4 temp_min  -2.8\n##  9     5 temp_max  11.4\n## 10     5 temp_min  -0.6\n## # … with 52 more rows\n\nIm Befehl pivot_longer() müssen wir festlegen, welche Spalten zusammengefasst werden sollen (hier: temp_max,temp_min,temp_mean). Alternativ können wir angeben, welche Spalten wir nicht zusammenfassen wollen:\n\nweather_summary |>\n  pivot_longer(-day)\n## # A tibble: 62 × 3\n##      day name     value\n##    <int> <chr>    <dbl>\n##  1     1 temp_max   5.8\n##  2     1 temp_min  -4.4\n##  3     2 temp_max   2.8\n##  4     2 temp_min  -4.3\n##  5     3 temp_max   4.2\n##  6     3 temp_min  -3.1\n##  7     4 temp_max   4.7\n##  8     4 temp_min  -2.8\n##  9     5 temp_max  11.4\n## 10     5 temp_min  -0.6\n## # … with 52 more rows\n\nWenn wir die Namen neuen Spalten festlegen wollen (anstelle von name und value) erreichen wir dies mit names_to bzw. values_to:\n\nweather_summary_long <- weather_summary |>\n  pivot_longer(-day, names_to = \"Messtyp\", values_to = \"Messwert\")\n\nDie ersten 6 Zeilen von weather_summary_long:\n\n\n\n\n\nday\nMesstyp\nMesswert\n\n\n\n\n1\ntemp_max\n5.8\n\n\n1\ntemp_min\n-4.4\n\n\n2\ntemp_max\n2.8\n\n\n2\ntemp_min\n-4.3\n\n\n3\ntemp_max\n4.2\n\n\n3\ntemp_min\n-3.1\n\n\n\n\n\nDie ersten 6 Zeilen von wetter_sry:\n\n\n\n\n\nday\ntemp_max\ntemp_min\n\n\n\n\n1\n5.8\n-4.4\n\n\n2\n2.8\n-4.3\n\n\n3\n4.2\n-3.1\n\n\n4\n4.7\n-2.8\n\n\n5\n11.4\n-0.6\n\n\n6\n6.7\n-1.6\n\n\n\n\n\nBeachte: weather_summary_long umfasst 62 Beobachtungen (Zeilen), das sind doppelt soviel wie weather_summary, da wir ja zwei Spalten zusammengefasst haben.\n\nnrow(weather_summary)\n## [1] 31\nnrow(weather_summary_long)\n## [1] 62\n\nLange Tabellen sind in verschiedenen Situationen praktischer. Beispielsweise ist das Visualisieren mittels ggplot2 (dieses Package werdet ihr im Block “InfoVis” kennenlernen) mit long tables wesentlich einfacher.\n\nggplot(weather_summary_long, aes(day,Messwert, colour = Messtyp)) +\n  geom_line()\n\n\n\n\nAbbildung 6.1: Generierter Plot\n\n\n\n\n\n\nLang → breit\nDas Gegenstück zu pivot_longer ist pivot_wider. Mit dieser Funktion können wir eine lange Tabelle in eine breite überführen. Dazu müssen wir in names_from angeben, aus welcher Spalte die neuen Spaltennamen erstellt werden sollen (names_from) und aus welcher Spalte die Werte entstammen sollen (values_from):\n\nweather_summary_long |>\n  pivot_wider(names_from = Messtyp, values_from = Messwert)\n## # A tibble: 31 × 3\n##      day temp_max temp_min\n##    <int>    <dbl>    <dbl>\n##  1     1      5.8     -4.4\n##  2     2      2.8     -4.3\n##  3     3      4.2     -3.1\n##  4     4      4.7     -2.8\n##  5     5     11.4     -0.6\n##  6     6      6.7     -1.6\n##  7     7      2.9     -2.8\n##  8     8      0.2     -3.6\n##  9     9      2.1     -8.8\n## 10    10      1.6     -2.4\n## # … with 21 more rows\n\nZum Vergleich: mit einer wide table müssen wir in ggplot2 jede Spalte einzeln plotten. Dies ist bei wenigen Variabeln wie hier noch nicht problematisch, aber bei einer hohen Anzahl wird dies schnell mühsam.\n\nggplot(weather_summary) +\n  geom_line(aes(day, temp_max)) +\n  geom_line(aes(day, temp_min))\n\n\n\n\nAbbildung 6.2: Generierter Plot\n\n\n\n\n\n\n\n\nWickham, Hadley, und Garrett Grolemund. 2017. R for Data Science. O’Reilly. https://ebookcentral.proquest.com/lib/zhaw/detail.action?docID=4770093."
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html",
    "href": "prepro/Prepro3_Uebung.html",
    "title": "Prepro 3: Übung",
    "section": "",
    "text": "Gegeben sei ein Datensatz “sensors_combined.csv”, mit den Temperaturwerten von drei verschiedenen Sensoren. Lade diesen Datensatz herunter, importiere ihn als csv in R (als sensors_combined).\nFormatiere die Datetime Spalte in POSIXct um. Verwende dazu die Funktion as.POSIXct (lies mit ?strftime() nochmal nach wie du das spezfische Format (die “Schablone”) festlegen kannst.\n\n\nMusterlösung\nlibrary(readr)\n\nsensors_combined <- read_csv(\"datasets/prepro/sensors_combined.csv\")\n\nsensors_combined$Datetime <- as.POSIXct(sensors_combined$Datetime, format = \"%d%m%Y_%H%M\")"
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-2",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-2",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nÜberführe die Tabelle in ein langes Format (verwende dazu die Funktion pivot_longer aus tidyr) und speichere den output als sensors_long.\nTipp:\n\nim Argument cols kannst du entweder die Spalten auflisten, die “pivotiert” werden sollen.\nAlternativ kannst du (mit vorangestelltem Minuszeichen, -) die Spalte, bezeichnen, die nicht pivotiert werden soll.\nIn beiden Fällen musst du die Spalten weder mit Anführungs- und Schlusszeichen noch mit dem $-Zeichen versehen.\n\n\n\nMusterlösung\nlibrary(tidyr)\n\n# Variante 1 (Spalten abwählen)\nsensors_long <- pivot_longer(sensors_combined, -Datetime) \n\n# Variante 2 (Spalten anwählen)\nsensors_long <- pivot_longer(sensors_combined, c(sensor1:sensor3))"
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-3",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-3",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nGruppiere sensors_long nach der neuen Spalte wo die Sensor-Information enthalten ist (default: name) mit group_by und berechne die mittlere Temperatur pro Sensor (summarise). Hinweis: Beide Funktionen sind Teil des Packages dplyr.\nDer Output sieht folgendermassen aus:\n\n\nMusterlösung\nlibrary(dplyr)\n\nsensors_long |>\n  group_by(name) |>\n  summarise(temp_mean = mean(value, na.rm = TRUE))\n## # A tibble: 3 × 2\n##   name    temp_mean\n##   <chr>       <dbl>\n## 1 sensor1      14.7\n## 2 sensor2      12.0\n## 3 sensor3      14.4"
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-4",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-4",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nErstelle für sensors_long eine neue convenience Variabel month welche den Monat beinhaltet (Tipp: verwende dazu die Funktion month aus lubridate). Gruppiere nun nach month und Sensor und berechne die mittlere Temperatur.\n\n\nMusterlösung\nlibrary(lubridate)\n\nsensors_long |>\n  mutate(month = month(Datetime)) |>\n  group_by(month, name) |>\n  summarise(temp_mean = mean(value, na.rm = TRUE))"
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-5",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-5",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nLade jetzt nochmal den Datensatz weather.csv (Quelle MeteoSchweiz) herunter und importiere ihn als CSV mit den korrekten Spaltentypen (stn als factor, time als POSIXct, tre200h0 als double).\n\n\nMusterlösung\nweather <- read_csv(\"datasets/prepro/weather.csv\", col_types = cols(col_factor(), col_datetime(\"%Y%m%d%H\"), col_double()))"
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-6",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-6",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nErstelle nun eine convenience Variable für die Kalenderwoche pro Messung (lubridate::isoweek). Berechne im Anschluss den mittleren Temperaturwert pro Kalenderwoche.\n\n\nMusterlösung\nweather_summary <- weather |>\n  mutate(week = isoweek(time)) |>\n  group_by(week) |>\n  summarise(\n    temp_mean = mean(tre200h0, na.rm = TRUE)\n  )\n\n\nVisualisiere im Anschluss das Resultat:\n\nMusterlösung\nplot(weather_summary$week, weather_summary$temp_mean, type = \"l\")\n\n\n\n\n\nAbbildung 7.1: Generierter Plot"
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-7",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-7",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 7",
    "text": "Aufgabe 7\nIn der vorherigen Aufgabe haben wir die mittlere Temperatur pro Kalenderwoche über alle Jahre (2000 und 2001) berechnet. Wenn wir die Jahre aber miteinander vergleichen wollen, müssen wir das Jahr als zusätzliche convenience Variable erstellen und danach gruppieren. Versuche dies mit den Wetterdaten und visualisiere den Output anschliessend.\n\n\nMusterlösung\nweather_summary2 <- weather |>\n  mutate(\n    week = week(time),\n    year = year(time)\n    ) |>\n  group_by(year, week) |>\n  summarise(\n    temp_mean = mean(tre200h0, na.rm = TRUE)\n  )\n\n\n\n\nMusterlösung\nplot(weather_summary2$week, weather_summary2$temp_mean, type = \"l\")\n\n\n\n\n\nAbbildung 7.2: baseplot mag keine long tables und macht aus den beiden Jahren eine kontinuierliche Linie"
  },
  {
    "objectID": "prepro/Prepro3_Uebung.html#aufgabe-8",
    "href": "prepro/Prepro3_Uebung.html#aufgabe-8",
    "title": "Prepro 3: Übung",
    "section": "Aufgabe 8",
    "text": "Aufgabe 8\nÜberführe den Output aus der letzten Übung in eine wide table. Nun lassen sich die beiden Jahre viel besser miteinander vergleichen.\n\n\nMusterlösung\nweather_summary2 <- weather_summary2 |>\n  pivot_wider(names_from = year, values_from = temp_mean,names_prefix = \"year\")\n\n\n\n\nMusterlösung\nplot(weather_summary2$week, weather_summary2$year2000, type = \"l\",col = \"blue\")\nlines(weather_summary2$week, weather_summary2$year2001, type = \"l\",col = \"red\")\n\n\n\n\n\nAbbildung 7.3: Generierter Plot"
  },
  {
    "objectID": "InfoVis.html",
    "href": "InfoVis.html",
    "title": "InfoVis",
    "section": "",
    "text": "Die konventionelle schliessende Statistik arbeitet in der Regel konfirmatorisch, sprich aus der bestehenden Theorie heraus werden Hypothesen formuliert, welche sodann durch Experimente geprüft und akzeptiert oder verworfen werden. Die Explorative Datenanalyse (EDA) nimmt dazu eine antagonistische Analyseperspektive ein und will in den Daten zunächst Zusammenhänge aufdecken, welche dann wiederum zur Formulierung von prüfbaren Hypothesen führen kann. Die Einheit stellt dazu den klassischen 5-stufigen EDA-Prozess nach Tukey (1980!) vor. Abschliessend wird dann noch die Brücke geschlagen zur modernen Umsetzung der EDA in Form von Visual Analytics."
  },
  {
    "objectID": "InfoVis.html#infovis-2",
    "href": "InfoVis.html#infovis-2",
    "title": "InfoVis",
    "section": "Infovis 2",
    "text": "Infovis 2\nDie Informationsvisualisierung ist eine vielseitige, effektive und effiziente Methode für die explorative Datenanalyse. Während Scatterplots und Histogramme weitherum bekannt sind, bieten weniger bekannte Informationsvisualisierungs-Typen wie etwa Parallelkoordinatenplots, TreeMaps oder Chorddiagramme originelle alternative Darstellungsformen zur visuellen Analyse von Datensätze, welche stets grösser und komplexer werden. Die Studierenden lernen in dieser lesson eine Reihe von Informationsvisualisierungstypen kennen, lernen diese zielführend zu gestalten und selber zu erstellen."
  },
  {
    "objectID": "infovis/Infovis1_Demo.html",
    "href": "infovis/Infovis1_Demo.html",
    "title": "Infovis 1: Demo A",
    "section": "",
    "text": "library(readr)\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nAls erstes laden wir den Temperaturdatensatz temperature_SHA_ZER.csv ein. Es handelt sich dabei um eine leicht modifizierte Variante der Daten aus PrePro1 und PrePro2."
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#base-plot-vs.-ggplot",
    "href": "infovis/Infovis1_Demo.html#base-plot-vs.-ggplot",
    "title": "Infovis 1: Demo A",
    "section": "Base-plot vs. ggplot",
    "text": "Base-plot vs. ggplot\nUm in “base-R” einen Scatterplot zu erstellen wo Datum der Temperatur gegenübersteht, gehen wir wie folgt vor:\n\nplot(temperature$time, temperature$SHA, type = \"l\", col = \"red\")\nlines(temperature$time, temperature$ZER, col = \"blue\")\n\n\n\n\nAbbildung 8.1: Generierter Plot\n\n\n\n\nIn ggplot sieht das etwas anders und auf den ersten Blick etwas komplizierter aus: Ein plot wird durch den Befehl ggplot() initiiert. Hier wird einerseits der Datensatz festgelegt, auf dem der Plot beruht (data =), sowie die Variablen innerhalb des Datensatzes, die Einfluss auf den Plot ausüben (mapping = aes()).\n\n# Datensatz: \"temperature\" | Beeinflussende Variabeln: \"time\" und \"temp\"\nggplot(data = temperature, mapping = aes(time,SHA))             \n\n\n\n\nAbbildung 8.2: Generierter Plot\n\n\n\n\nWeiter braucht es mindestens ein “Layer” der beschreibt, wie die Daten dargestellt werden sollen (z.B. geom_point()). Anders als bei “Piping” (|>) wird ein Layer mit + hinzugefügt.\n\nggplot(data = temperature, mapping = aes(time,SHA)) +         \n  # Layer: \"geom_point\" entspricht Punkten in einem Scatterplot \n  geom_point()                                    \n\n\n\n\nAbbildung 8.3: Generierter Plot\n\n\n\n\nDa ggplot die Eingaben in der Reihenfolge data = und dann mapping =erwartet, können wir diese Spezifizierungen auch weglassen.\n\n#| eval: false\nggplot(temperature, aes(time,SHA)) +\n  geom_point()\n\n\n\n\nAbbildung 8.4: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#long-vs.-wide",
    "href": "infovis/Infovis1_Demo.html#long-vs.-wide",
    "title": "Infovis 1: Demo A",
    "section": "Long vs. wide",
    "text": "Long vs. wide\nWie wir in PrePro 2 bereits erwähnt haben, ist ggplot2 auf long tables ausgelegt. Wir überführen deshalb an dieser Stelle die breite in eine lange Tabelle:\n\ntemperature_long <- pivot_longer(temperature, -time, names_to = \"station\", values_to = \"temp\")\n\nNun wollen wir die unterschiedlichen Stationen unterschiedlich einfärben. Da wir Variablen definieren wollen, welche Einfluss auf die Grafik haben sollen, gehört diese Information in aes().\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_point()\n\n\n\n\nAbbildung 8.5: Generierter Plot\n\n\n\n\nWir können noch einen Layer mit Linien hinzufügen:\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_point()+\n  geom_line()\n\n\n\n\nAbbildung 8.6: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#beschriftungen-labels",
    "href": "infovis/Infovis1_Demo.html#beschriftungen-labels",
    "title": "Infovis 1: Demo A",
    "section": "Beschriftungen (labels)",
    "text": "Beschriftungen (labels)\nWeiter können wir die Achsen beschriften und einen Titel hinzufügen. Zudem lasse ich die Punkte (geom_point()) nun weg, da mir diese nicht gefallen.\n\nggplot(temperature_long, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\", \n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n    )\n\n\n\n\nAbbildung 8.7: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#split-apply-combine",
    "href": "infovis/Infovis1_Demo.html#split-apply-combine",
    "title": "Infovis 1: Demo A",
    "section": "Split Apply Combine",
    "text": "Split Apply Combine\nIm obigen Plot fällt auf, dass stündliche Werte eine zu hohe Auflösung ist, wenn wir daten über 2 Jahre visualisieren. Mit Split Apply Combine (PrePro 3) können wir die Auflösung unserer Daten verändern:\n\ntemperature_day <- temperature_long |>\n  mutate(time = as.Date(time)) \n\ntemperature_day\n\n# A tibble: 35,088 × 3\n   time       station  temp\n   <date>     <chr>   <dbl>\n 1 2000-01-01 SHA       0.2\n 2 2000-01-01 ZER      -8.8\n 3 2000-01-01 SHA       0.3\n 4 2000-01-01 ZER      -8.7\n 5 2000-01-01 SHA       0.3\n 6 2000-01-01 ZER      -9  \n 7 2000-01-01 SHA       0.3\n 8 2000-01-01 ZER      -8.7\n 9 2000-01-01 SHA       0.4\n10 2000-01-01 ZER      -8.5\n# … with 35,078 more rows\n\ntemperature_day <- temperature_day |>\n  group_by(station, time) |>\n  summarise(temp = mean(temp))\n\ntemperature_day  \n\n# A tibble: 1,462 × 3\n# Groups:   station [2]\n   station time        temp\n   <chr>   <date>     <dbl>\n 1 SHA     2000-01-01  1.25\n 2 SHA     2000-01-02  1.73\n 3 SHA     2000-01-03  1.59\n 4 SHA     2000-01-04  1.78\n 5 SHA     2000-01-05  4.66\n 6 SHA     2000-01-06  3.49\n 7 SHA     2000-01-07  3.87\n 8 SHA     2000-01-08  3.28\n 9 SHA     2000-01-09  3.24\n10 SHA     2000-01-10  3.24\n# … with 1,452 more rows"
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#xy-achse-anpassen",
    "href": "infovis/Infovis1_Demo.html#xy-achse-anpassen",
    "title": "Infovis 1: Demo A",
    "section": "X/Y-Achse anpassen",
    "text": "X/Y-Achse anpassen\nMan kann auch Einfluss auf die x-/y-Achsen nehmen. Dabei muss man zuerst festlegen, was für ein Achsentyp der Plot hat (vorher hat ggplot eine Annahme auf der Basis der Daten getroffen).\nBei unserer y-Achse handelt es sich um numerische Daten, ggplot nennt diese: scale_y_continuous(). Unter ggplot2.tidyverse.org findet man noch andere x/y-Achsentypen (scale_x_irgenwas bzw. scale_y_irgendwas).\n\nggplot(temperature_day, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\", \n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n    ) +    \n  scale_y_continuous(limits = c(-30,30))    # y-Achsenabschnitt bestimmen\n\n\n\n\nAbbildung 8.8: Generierter Plot\n\n\n\n\nDas gleiche Spiel kann man für die y-Achse betreiben. Bei unserer y-Achse handelt es sich ja um Datumsangaben. ggplot nennt diese: scale_x_date().\n\nggplot(temperature_day, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\", \n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n    ) +    \n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_date(date_breaks = \"3 months\", \n                   date_labels = \"%b\")\n\n\n\n\nAbbildung 8.9: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#themes",
    "href": "infovis/Infovis1_Demo.html#themes",
    "title": "Infovis 1: Demo A",
    "section": "Themes",
    "text": "Themes\nMit theme verändert man das allgmeine Layout der Plots. Beispielsweise kann man mit theme_classic() ggplot-Grafiken etwas weniger “Poppig” erscheinen lassen: so sind sie besser für Bachelor- / Masterarbeiten sowie Publikationen geeignet. theme_classic() kann man indiviudell pro Plot anwenden, oder für die aktuelle Session global setzen (s.u.)\nIndividuell pro Plot:\n\nggplot(temperature_day, aes(time,temp, colour = station)) +\n  geom_line() +\n  theme_classic()\n\nGlobal (für alle nachfolgenden Plots der aktuellen Session):\n\ntheme_set(theme_classic())"
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#facets-small-multiples",
    "href": "infovis/Infovis1_Demo.html#facets-small-multiples",
    "title": "Infovis 1: Demo A",
    "section": "Facets / Small Multiples",
    "text": "Facets / Small Multiples\nSehr praktisch sind auch die Funktionen für “Small multiples”. Dies erreicht man mit facet_wrap() (oder facet_grid(), mehr dazu später). Man muss mit einem Tilde-Symbol “~” nur festlegen, welche Variable für das Aufteilen des Plots in kleinere Subplots verantwortlich sein soll.\n\nggplot(temperature_day, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\", \n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\",\n    color = \"Station\"\n    ) +    \n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_date(date_breaks = \"3 months\", \n                   date_labels = \"%b\") +\n  facet_wrap(station~.)\n\n\n\n\nAbbildung 8.10: Generierter Plot\n\n\n\n\nAuch facet_wrap kann man auf seine Bedürfnisse anpassen: Beispielweise kann man mit ncol = die Anzahl facets pro Zeile bestimmen.\nZudem brauchen wir die Legende nicht mehr, da der Stationsnamen über jedem Facet steht. Ich setze deshalb theme(legend.position=\"none\")\n\nggplot(temperature_day, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\", \n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\"\n    ) +  \n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_date(date_breaks = \"3 months\", \n                   date_labels = \"%b\") +\n  facet_wrap(~station,ncol = 1) +\n  theme(legend.position=\"none\")\n\n\n\n\nAbbildung 8.11: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#in-variabel-abspeichern-und-exportieren",
    "href": "infovis/Infovis1_Demo.html#in-variabel-abspeichern-und-exportieren",
    "title": "Infovis 1: Demo A",
    "section": "In Variabel abspeichern und Exportieren",
    "text": "In Variabel abspeichern und Exportieren\nGenau wie data.frames und andere Objekte, kann man einen ganzen Plot auch in einer Variabel speichern. Dies kann nützlich sein um einen Plot zu exportieren (als png, jpg usw.) oder sukzessive erweitern wie in diesem Beispiel.\n\np <- ggplot(temperature_day, aes(time,temp, colour = station)) +\n  geom_line() +\n  labs(\n    x = \"Zeit\",\n    y = \"Temperatur in Grad C°\", \n    title = \"Temperaturdaten Schweiz\",\n    subtitle = \"2001 bis 2002\"\n    ) +\n  scale_y_continuous(limits = c(-30,30)) +\n  scale_x_date(date_breaks = \"3 months\", \n                   date_labels = \"%b\") +\n  facet_wrap(~station,ncol = 1)\n  # ich habe an dieser Stelle theme(legend.position=\"none\") entfernt\n\nFolgendermassen kann ich den Plot als png-File abspeichern (ohne Angabe von “plot =” wird einfach der letzte Plot gespeichert)\n\nggsave(filename = \"plot.png\",plot = p)\n\n.. und so kann ich einen bestehenden Plot (in einer Variabel) mit einem Layer / einer Option erweitern\n\np +\n  theme(legend.position=\"none\")\n\nWie üblich wurde diese Änderung nicht gespeichert, sondern nur das Resultat davon ausgeben. Wenn die Änderung in meinem Plot (in der Variabel) abspeichern will, muss ich die Variabel überschreiben:\n\np <- p +\n  theme(legend.position=\"none\")"
  },
  {
    "objectID": "infovis/Infovis1_Demo.html#smoothing",
    "href": "infovis/Infovis1_Demo.html#smoothing",
    "title": "Infovis 1: Demo A",
    "section": "Smoothing",
    "text": "Smoothing\nMit geom_smooth() kann ggplot eine Trendlinie auf der Baiss von Punktdaten berechnen. Die zugrunde liegende statistische Methode kann selbst gewählt werden (ohne Angabe verwendet ggplot bei < 1’000 Messungen stats::loess, ansonsten mgcv::gam)\n\np <- p +\n  geom_smooth(colour = \"black\")\n\np\n\n\n\n\nAbbildung 8.12: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Script_eda.html",
    "href": "infovis/Infovis1_Script_eda.html",
    "title": "Infovis 1: Demo B",
    "section": "",
    "text": "ggplot(people, aes(x=age, y=height)) + \n  geom_point() +\n  scale_y_continuous(limits = c(0.75, 2))\n\n\n\n\n# Go to help page: http://docs.ggplot2.org/current/ -> Search for icon of fit-line\n# http://docs.ggplot2.org/current/geom_smooth.html\n\n\n# build a scatterplot for a first inspection, with regression line\nggplot(people, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth()\n\n\n\n\n\n# stem and leaf plot\nstem(people$height)\n## \n##   The decimal point is 1 digit(s) to the left of the |\n## \n##    8 | 25593\n##   10 | 037\n##   12 | 523\n##   14 | 19556\n##   16 | 255789916\n##   18 | 04774\nstem(people$height, scale=2)\n## \n##   The decimal point is 1 digit(s) to the left of the |\n## \n##    8 | 2559\n##    9 | 3\n##   10 | \n##   11 | 037\n##   12 | 5\n##   13 | 23\n##   14 | 19\n##   15 | 556\n##   16 | 2557899\n##   17 | 16\n##   18 | 0477\n##   19 | 4\n\n\n# explore the two variables with box-whiskerplots\nsummary(people$age)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##    5.00    8.70   30.20   59.14   65.15  512.30\nboxplot(people$age)\n\n\n\n\n\nsummary(people$height)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n##   0.820   1.190   1.555   1.455   1.690   1.940\nboxplot(people$height)\n\n\n\n\n\n# explore data with a histgram\nggplot(people, aes(x=age)) + \n  geom_histogram(binwidth=20)  \n\n\n\n\n\ndensity(x = people$height)\n## \n## Call:\n##  density.default(x = people$height)\n## \n## Data: people$height (30 obs.);   Bandwidth 'bw' = 0.1576\n## \n##        x                y           \n##  Min.   :0.3472   Min.   :0.001593  \n##  1st Qu.:0.8636   1st Qu.:0.102953  \n##  Median :1.3800   Median :0.510601  \n##  Mean   :1.3800   Mean   :0.483553  \n##  3rd Qu.:1.8964   3rd Qu.:0.722660  \n##  Max.   :2.4128   Max.   :1.216350\n\n# re-expression: use log or sqrt axes\n#\n# Find here guideline about scaling axes \n# http://www.cookbook-r.com/Graphs/Axes_(ggplot2)/\n# http://docs.ggplot2.org/0.9.3.1/scale_continuous.html\n\n\n# logarithmic axis: respond to skewness in the data, e.g. log10 \nggplot(people, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth() +\n  scale_x_log10()\n\n\n\n\n\n# outliers: Remove very small and very old people\n\npeopleClean <- people |>\n  filter(ID != 27) |>    # Diese Person war zu klein.\n  filter(age < 100)       # Fehler in der Erhebung des Alters\n\n\nggplot(peopleClean, aes(x=age)) + \n  geom_histogram(binwidth=10)\n\n\n\n\n\nggplot(peopleClean, aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth()\n\n\n\n\n\n# with custom binwidth\nggplot(peopleClean, aes(x=age)) + \n  geom_histogram(binwidth=10) + \n  theme_bw() # specifying the theme\n\n\n\n\n\n# quadratic axis\nggplot(peopleClean, aes(x=age, y=height)) + \n  geom_point() + scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5) + \n  scale_x_sqrt()\n\n\n\n\n\n# filter \"teenies\": No trend\nfilter(peopleClean, age < 15) |>\n  ggplot(aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n\n\n# filter \"teenies\": No trend\npeopleClean |>\n  filter(age > 55) |>\n  ggplot(aes(x=age, y=height)) + \n  geom_point() + \n  scale_y_continuous(limits=c(0, 2.0)) +\n  geom_smooth(method=\"lm\", fill='lightblue', size=0.5, alpha=0.5)\n\n\n\n\n\n# Onwards towards multidimensional data\n\n# Finally, make a scatterplot matrix\npairs(peopleClean[,2:4], panel=panel.smooth)\n\n\n\n\n\npairs(peopleClean[,2:4], panel=panel.smooth)"
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html",
    "href": "infovis/Infovis1_Uebung.html",
    "title": "Infovis 1: Übung",
    "section": "",
    "text": "In dieser Übung geht es darum, die Grafiken aus dem Blog-post Kovic (2014) zu rekonstruieren. Der urspüngliche Blogpost ist nicht mehr verfügbar, wir haben deshalb eine Kopie auf folgender Website gehostet:\nhttps://researchmethods-zhaw.github.io/blog.tagesanzeiger.ch/\nSchau dir die Grafiken in dem Blogpost durch. Freundlicherweise wurden im Blogbeitrag die ggplot2 Standardeinstellungen benutzt, was die Rekonstruktion relativ einfach macht. Die Links im Text verweisen auf die Originalgrafik, die eingebetteten Plots sind meine eigenen Rekonstruktionen.\nImportiere als erstes den Datensatz tagi_data_kanton.csv (dieser ist auch auf der Blog-Seite verfügbar)."
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-1",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-1",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_kanton.csv Datensatz:\nTipp:\n\nNutze ggplot(kanton, aes(auslanderanteil, ja_anteil)) um den ggplot zu initiieren. Füge danach ein einen Punkte Layer hinzu (geom_point())\nNutze coord_fixed() um die beiden Achsen in ein fixes Verhältnis zu setzen (1:1).\nOptional:\n\nSetze die Achsen Start- und Endwerte mittels scale_y_continuous bzw. scale_x_continuous.\nSetze analog Kovic (2014) die breaks (0.0, 0.1…0.7) manuell (innerhalb scale_*_continuous)\nNutze labs() für die Beschriftung der Achsen\n\n\n\n\nMusterlösung\n# Lösung zu Aufgabe 1\n\nplot1 <- ggplot(kanton, aes(auslanderanteil, ja_anteil)) +\n  geom_point() +\n  coord_fixed(1) +\n  scale_y_continuous(breaks = c(0,0.1,0.3,0.5,0.7),limits =  c(0,0.7)) +\n  scale_x_continuous(breaks = c(0,0.1,0.3,0.5,0.7),limits =  c(0,0.7)) +\n  labs(y = \"Anteil Ja-Stimmen\", x = \"Ausländeranteil\")\n\nplot1\n\n\n\n\n\nAbbildung 10.1: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-2",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-2",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot:\nTipp:\n\nNutze geom_smooth\n\n\n\nMusterlösung\n# Lösung zu Aufgabe 2\n\nplot1 +\n  geom_smooth()\n\n\n\n\n\nAbbildung 10.2: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-3",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-3",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nImportiere die Gemeindedaten tagi_data_gemeinden.csv.\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze geom_point()\nNutze labs()\nNutze coord_fixed()\n\n\n\nMusterlösung\n# Lösung zu Aufgabe 3\n\ngemeinde <- read_csv(\"datasets/infovis/tagi_data_gemeinden.csv\")\n\nplot2 <- ggplot(gemeinde, aes(anteil_ausl, anteil_ja)) +\n  geom_point() +\n  labs(x = \"Ausländeranteil\",y = \"Anteil Ja-Stimmen\") +\n  coord_fixed(1) +\n  lims(x = c(0,1), y = c(0,1))\n\nplot2\n\n\n\n\n\nAbbildung 10.3: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-4",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-4",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze geom_smooth\n\n\n\nMusterlösung\n# Lösung zu Aufgabe 4\n\nplot2 +\n  geom_smooth()\n\n\n\n\n\nAbbildung 10.4: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-5",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-5",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze facet_wrap um einen Plot pro Kanton darzustellen.\n\n\n\nMusterlösung\n# Lösung zu Aufgabe 5\n\nplot3 <- plot2 +\n  facet_wrap(~kanton)\nplot3\n\n\n\n\n\nAbbildung 10.5: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-6",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-6",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze geom_smooth\n\n\n\nMusterlösung\n# Lösung zu Aufgabe 6\n\nplot3 +\n  geom_smooth()\n\n\n\n\n\nAbbildung 10.6: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-7",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-7",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 7",
    "text": "Aufgabe 7\nRekonstrukturieren folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze facet_wrap\n\n\n\nMusterlösung\n# Lösung zu Aufgabe 7\n\nplot4 <- plot2 +\n  facet_wrap(~quantile)\nplot4\n\n\n\n\n\nAbbildung 10.7: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis1_Uebung.html#aufgabe-8",
    "href": "infovis/Infovis1_Uebung.html#aufgabe-8",
    "title": "Infovis 1: Übung",
    "section": "Aufgabe 8",
    "text": "Aufgabe 8\nRekonstrukturiere folgenden Plot aus Kovic (2014) mithilfe von ggplot und dem tagi_data_gemeinden.csv Datensatz:\nTipp:\n\nNutze geom_smooth\n\n\n\nMusterlösung\n# Lösung zu Aufgabe 8\n\nplot4 +\n  geom_smooth()\n\n\n\n\n\nAbbildung 10.8: Generierter Plot\n\n\n\n\n\n\n\n\nKovic, Marko. 2014. „Je weniger Ausländer, desto mehr Ja-Stimmen? Wirklich?“ Tagesanzeiger Datenblog. https://blog.tagesanzeiger.ch/datenblog/index.php/668/je-weniger-auslaender-desto-mehr-ja-stimmen-wirklich."
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html",
    "href": "infovis/Infovis2_Uebung_A.html",
    "title": "Infovis 2: Übung A",
    "section": "",
    "text": "Für die heutige Übung brauchst du den Datensatz temperature_2005.csv. Dabei handelt es sich wieder um Teperaturwerte verschiedener Stationen, diesmal aus dem Jahr 2005. Das Datum ist so formatiert, dass R (isbesondere read_csv) es korrekt als datetime erkennen und als POSIXct einlesen sollte."
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-1",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-1",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nMache aus der wide table eine long table die wie folgt aussieht.\n\n\nMusterlösung\ntemperature_long <- pivot_longer(temperature, -time, names_to = \"station\", values_to = \"temperature\")\n\nknitr::kable(head(temperature_long))\n\n\nLade anschliessend temperature_2005_metadata.csv herunter und verbinde die beiden Datensätze mit einem left_join via station (bzw. stn).\n\n\nMusterlösung\nmetadata <- read_csv(\"datasets/infovis/temperature_2005_metadata.csv\")\n\ntemperature_long <- left_join(temperature_long, metadata, by = c(station = \"stn\"))"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-2",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-2",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nErstelle ein Scatterplot (time vs. temperature) wobei die Punkte aufgrund ihrer Meereshöhe eingefärbt werden sollen. Tiefe Werte sollen dabei blau eingefärbt werden und hohe Werte rot (scale_color_gradient). Verkleinere die Punkte um übermässiges Überplotten der Punkten zu vermeiden (size =). Weiter sollen auf der x-Achse im Abstand von 3 Monaten der jeweilige Monat vermerkt sein (date_breaks bzw. date_labels von scale_x_datetime()).\n\n\nMusterlösung\n# Musterlösung\n\nggplot(temperature_long, aes(time,temperature, color = Meereshoehe)) +\n  geom_point(size = 0.5) +\n  labs(x = \"\", y = \"Temperatur in ° Celsius\") +\n  scale_x_datetime(date_breaks = \"3 months\", date_labels = \"%b\")  +\n  scale_color_gradient(low = \"blue\", high = \"red\")\n\n\n\n\n\nAbbildung 11.1: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-3",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-3",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nErstelle eine Zusatzvariabel Date mit dem Datum der jeweiligen Messung ( mit as.Date). Nutze diese Spalte um die Tagesmitteltemperatur pro Station zu berechnen (mit summarise()).\nUm die Metadaten (Name, Meereshoehe, x, y) nicht zu verlieren kannst du den Join aus der ersten Übung wieder ausführen. Alternativ (schneller aber auch schwerer zu verstehen) kannst du diese Variabeln innerhalb deines group_by verwenden.\n\n\nMusterlösung\ntemperature_long <- temperature_long |>\n  mutate(time = as.Date(time)) |>\n  group_by(time, station, Name, Meereshoehe, x, y) |>\n  summarise(temperature = mean(temperature))"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-4",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-4",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nWiederhole nun den Plot aus der ersten Aufgabe mit den aggregierten Daten aus der vorherigen Aufgabe. Um die labels korrekt zu setzen musst du scale_x_datetime mit scale_x_date ersetzen.\n\n\nMusterlösung\np <- ggplot(temperature_long, aes(time,temperature, color = Meereshoehe)) +\n  geom_point(size = 0.5) +\n  labs(x = \"\", y = \"Temperatur in ° Celsius\") +\n  scale_x_date(date_breaks = \"3 months\", date_labels = \"%b\")  +\n  scale_color_gradient(low = \"blue\", high = \"red\")\n\np\n\n\n\n\n\nAbbildung 11.2: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-5",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-5",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 5",
    "text": "Aufgabe 5\nFüge am obigen Plot eine schwarze, gestrichelte Trendlinie hinzu.\n\n\nMusterlösung\n# Musterlösung\n\np <- p +\n  stat_smooth(colour = \"black\",lty = 2)\n\np\n\n\n\n\n\nAbbildung 11.3: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-6",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-6",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 6",
    "text": "Aufgabe 6\nPositioniere die Legende oberhalb des Plots (nutze dazu theme() mit legend.position).\n\n\nMusterlösung\n# Musterlösung\n\np <- p + \n  theme(legend.position = \"top\")\n\np\n\n\n\n\n\nAbbildung 11.4: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-7-optional-fortgeschritten",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-7-optional-fortgeschritten",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 7 (optional, fortgeschritten)",
    "text": "Aufgabe 7 (optional, fortgeschritten)\nFüge den Temperaturwerten auf der y-Ache ein °C hinzu (siehe unten und studiere diesen Tipp zur Hilfe).\n\n\nMusterlösung\n# Musterlösung\n\np <- p +\n  scale_y_continuous(labels = function(x)paste0(x,\"°C\")) +\n  labs(x = \"Kalenderwoche\", y = \"Temperatur\")\n\np\n\n\n\n\n\nAbbildung 11.5: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-8",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-8",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 8",
    "text": "Aufgabe 8\nJetzt verlassen wir den Scatterplot und machen einen Boxplot mit den Temperaturdaten. Färbe die Boxplots wieder in Abhängigkeit der Meereshöhe ein.\n\nBeachte den Unterschied zwischen colour = und fill =\nBeachte den Unterschied zwischen facet_wrap() und facet_grid()\nfacet_grid() braucht übrigens noch einen Punkt (.) zur Tilde (~).\nBeachte den Unterschied zwischen “.~” und “~.” bei facet_grid()\nverschiebe nach Bedarf die Legende\n\n\n\nMusterlösung\n# Musterlösung\n\ntemperature_long <- mutate(temperature_long, monat = month(time,label = T,abbr = F))\n\nggplot(temperature_long, aes(monat,temperature, fill = Meereshoehe)) +\n  geom_boxplot() +\n  labs(x = \"Station\", y = \"Temperatur\") +\n  facet_wrap(~station) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\nAbbildung 11.6: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_A.html#aufgabe-9",
    "href": "infovis/Infovis2_Uebung_A.html#aufgabe-9",
    "title": "Infovis 2: Übung A",
    "section": "Aufgabe 9",
    "text": "Aufgabe 9\nAls letzter wichtiger Plottyp noch zwei Übungen zum Histogramm. Erstelle ein Histogramm geom_histogram() mit den Temperaturwerten. Teile dazu die Stationen in verschiedene Höhenlagen ein (Tieflage [< 400 m], Mittellage [400 - 600 m] und Hochlage [> 600 m]). Vergleiche die Verteilung der Temperaturwerte in den verschiedenen Lagen mit einem Histogramm.\nTip: Nutze cut um die Stationen in die drei Gruppen aufzuteilen\n\n\nMusterlösung\n# Musterlösung\n\ntemperature_long <- temperature_long |>\n  mutate(lage = cut(Meereshoehe, c(0, 400, 600,1000),labels = c(\"Tieflage\", \"Mittellage\", \"Hochlage\")))\n\nggplot(temperature_long, aes(temperature)) +\n  geom_histogram() +\n  facet_grid(~lage) +\n  labs(x = \"Lage\", y = \"Temperatur\") +\n  theme(axis.text.x = element_text(angle = 45,hjust = 1))\n\n\n\n\n\nAbbildung 11.7: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_B.html",
    "href": "infovis/Infovis2_Uebung_B.html",
    "title": "Infovis 2: Übung B",
    "section": "",
    "text": "In dieser Übung bauen wir einige etwas unübliche Plots aus der Vorlesung nach. Dafür verwenden wir Datensätze, die in R bereits integriert sind. Eine Liste dieser Datensätze findet man hier oder mit der Hilfe ?datasets.\nDazu verwenden wir nach wie vor ggplot2, aber mit einigen Tricks."
  },
  {
    "objectID": "infovis/Infovis2_Uebung_B.html#aufgabe-1-parallel-coordinate-plots",
    "href": "infovis/Infovis2_Uebung_B.html#aufgabe-1-parallel-coordinate-plots",
    "title": "Infovis 2: Übung B",
    "section": "Aufgabe 1: Parallel coordinate plots",
    "text": "Aufgabe 1: Parallel coordinate plots\nErstelle einen parallel coordinate plot. Dafür eignet sich der integrierte Datensatz mtcars. Extrahiere die Fahrzeugnamen mit rownames_to_column.\nZudem müssen die Werte jeweiles auf eine gemeinsame Skala normalisiert werden. Hierfür kannst du die Funktion scales::rescale verwenden.\n\n\nMusterlösung\nmtcars2 <- mtcars |>\n  tibble::rownames_to_column(\"car\") |>\n  pivot_longer(-car)\n\nmtcars2 <- mtcars2 |>\n  group_by(name) |>\n  mutate(value_scaled = scales::rescale(value))\n\n\n\n\n\nSo sieht der fertige Plot aus:\n\n\nMusterlösung\nmtcars2 <- mtcars2 |>\n  group_by(car) |>\n  mutate(gear = value[name == \"gear\"])\n\nggplot(mtcars2, aes(name, value_scaled, group = car, color = factor(gear))) +\n  geom_point() +\n  geom_line() +\n  theme_minimal() +\n  theme(legend.position = \"none\", axis.title.y = element_blank())\n\n\n\n\n\nAbbildung 12.1: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_B.html#aufgabe-2-polar-plot-mit-biber-daten",
    "href": "infovis/Infovis2_Uebung_B.html#aufgabe-2-polar-plot-mit-biber-daten",
    "title": "Infovis 2: Übung B",
    "section": "Aufgabe 2: Polar Plot mit Biber Daten",
    "text": "Aufgabe 2: Polar Plot mit Biber Daten\nPolar Plots eignen sich unter anderem für Daten, die zyklischer Natur sind, wie zum Beispiel zeitlich geprägte Daten (Tages-, Wochen-, oder Jahresrhythmen). Aus den Beispiels-Datensätzen habe ich zwei Datensätze gefunden, die zeitlich geprägt sind:\n\nbeaver1 und beaver2\nAirPassenger\n\nBeide Datensätze müssen noch etwas umgeformt werden, bevor wir sie für einen Radialplot verwenden können. In Aufgabe 2 verwenden wir die Biber-Datensätze, in der nächsten Aufgabe (3) die Passagier-Daten.\nWenn wir die Daten von beiden Bibern verwenden wollen, müssen wir diese noch zusammenfügen:\n\n\nMusterlösung\nbeaver1_new <- beaver1 |>\n  mutate(beaver = \"nr1\")\n\nbeaver2_new <- beaver2 |>\n  mutate(beaver = \"nr2\")\n\nbeaver_new <- rbind(beaver1_new,beaver2_new)\n\n\nZudem müssen wir die Zeitangabe noch anpassen: Gemäss der Datenbeschreibung handelt es sich bei der Zeitangabe um ein sehr programmier-unfreundliches Format. 3:30 wird als “0330” notiert. Wir müssen diese Zeitangabe, noch in ein Dezimalsystem umwandeln:\n\n\nMusterlösung\nbeaver_new <- beaver_new |>\n  mutate(\n    hour_dec = (time/100)%/%1,         # Ganze Stunden (mittels ganzzaliger Division)\n    min_dec = (time/100)%%1/0.6,       # Dezimalminuten (15 min wird zu 0.25, via Modulo)\n    hour_min_dec = hour_dec+min_dec    # Dezimal-Zeitangabe (03:30 wird zu 3.5)\n    ) \n\n\nSo sieht der fertige Plot aus:\n\n\nMusterlösung\n# Lösung Aufgabe 2\n\nbeaver_new |>\n  ggplot(aes(hour_min_dec, temp, color = beaver)) +\n  geom_point() +\n  scale_x_continuous(breaks = seq(0,23,2)) +\n  coord_polar() +\n  theme_minimal() +\n  theme(axis.title =  element_blank())\n\n\n\n\n\nAbbildung 12.2: Generierter Plot"
  },
  {
    "objectID": "infovis/Infovis2_Uebung_B.html#aufgabe-3-raster-visualisierung-mit-flugpassagieren",
    "href": "infovis/Infovis2_Uebung_B.html#aufgabe-3-raster-visualisierung-mit-flugpassagieren",
    "title": "Infovis 2: Übung B",
    "section": "Aufgabe 3: Raster Visualisierung mit Flugpassagieren",
    "text": "Aufgabe 3: Raster Visualisierung mit Flugpassagieren\nAnalog Aufgabe 2, dieses Mal mit dem Datensatz AirPassanger\nAirPassengers kommt in einem Format daher, das ich selbst noch gar nicht kannte. Es sieht zwar aus wie ein data.frame oder eine matrix, ist aber von der Klasse ts.\n\n\nMusterlösung\nAirPassengers\n\nclass(AirPassengers)\n\n\nDamit wir den Datensatz verwenden können, müssen wir ihn zuerst in eine matrix umwandeln. Wie das geht habe ich hier erfahren.\n\n\nMusterlösung\nAirPassengers2 <- tapply(AirPassengers, list(year = floor(time(AirPassengers)), month = month.abb[cycle(AirPassengers)]), c)\n\nAirPassengers2\n\n\nAus der matrix muss noch ein Dataframe her, zudem müssen wir aus der breiten Tabelle eine lange Tabelle machen:\n\n\nMusterlösung\nAirPassengers3 <- AirPassengers2 |>\n  as.data.frame() |>\n  tibble::rownames_to_column(\"year\") |>\n  pivot_longer(-year, names_to = \"month\", values_to = \"n\") |>\n  mutate(\n    # ich nutze einen billigen Trick um ausgeschriebene Monate in Nummern umzuwandeln\n    month = factor(month, levels = month.abb,ordered = T),\n    month_numb = as.integer(month),\n    year = as.integer(year)\n  )\n\n\nSo sieht der fertige Plot aus:\n\n\nMusterlösung\nggplot(AirPassengers3, aes(month, year, fill = n)) +\n  geom_raster() +\n  scale_y_reverse() +\n  scale_fill_viridis_c(guide = guide_colourbar(barwidth = 15, title.position = \"top\")) +\n  theme_minimal() +\n  labs(fill = \"Anzahl Passagiere\") +\n  coord_equal() +\n  theme(axis.title = element_blank(), legend.position = \"bottom\") \n\n\n\n\n\nAbbildung 12.3: Generierter Plot"
  },
  {
    "objectID": "Stat1-4.html",
    "href": "Stat1-4.html",
    "title": "Statistik 1 - 4",
    "section": "",
    "text": "Statistik 2\nIn Statistik 2 lernen die Studierenden die Idee, die Voraussetzungen und die praktische Anwendung „einfacher“ linearer Modelle in R (sowie teilweise ihrer „nicht-parametrischen“ bzw. „robusten“ Äquivalente). Am Anfang steht die Varianzanalyse (ANOVA) als Verallgemeinerung des t-Tests, einschliesslich post-hoc-Tests und mehrfaktorieller ANOVA. Dann geht es um die Voraussetzungen parametrischer (und nicht-parametrischer) Tests und Optionen, wenn diese verletzt sind. Dann beschäftigen wir uns mit Korrelationen, die auf einen linearen Zusammenhang zwischen zwei metrischen Variablen testen, ohne Annahme einer Kausalität. Es folgen einfache lineare Regressionen, die im Prinzip das Gleiche bei klarer Kausalität leisten. Abschliessend besprechen wir, was die grosse Gruppe linearer Modelle (Befehl lm in R) auszeichnet.\n\n\n\n\nStatistik 3\nStatistik 3 fassen wir zu Beginn den generellen Ablauf inferenzstatistischer Analysen in einem Flussdiagramm zusammen. Dann wird die ANCOVA als eine Technik vorgestellt, die eine ANOVA mit einer linearen Regression verbindet. Danach geht es um komplexere Versionen linearer Regressionen. Hier betrachten wir polynomiale Regressionen, die z. B. einen Test auf unimodale Beziehungen erlaubt, indem man dieselbe Prädiktorvariable linear und quadriert einspeist. Multiple Regressionen versuchen dagegen, eine abhängige Variable durch zwei oder mehr verschieden Prädiktorvariablen zu erklären. Wir thematisieren verschiedene dabei auftretende Probleme und ihre Lösung, insbesondere den Umgang mit korrelierten Prädiktoren und das Aufspüren des besten unter mehreren möglichen statistischen Modellen. Hieran wird auch der informatian theoretician-Ansatz der Statistik und die multimodel inference eingeführt.\n\n\nStatistik 4\nHeute geht es hauptsächlich um generalized linear models (GLMs), die einige wesentliche Limitierungen von linearen Modellen überwinden. Indem sie Fehler- und Varianzstrukturen explizit modellieren, ist man nicht mehr an Normalverteilung der Residuen und Varianzhomogenität gebunden. Bei generalized linear regressions muss man sich zwischen verschiedenen Verteilungen und link-Strukturen entscheiden. Spezifisch werden wir uns die Poisson-Regressionen für Zähldaten und die logistische Regression für ja/nein-Daten anschauen. Danach folgt ein Einstieg in nicht-lineare Regressionen, die es erlauben, etwa Potenzgesetze oder Sättigungsfunktionen direkt zu modellieren. Zum Abschluss gibt es einen Ausblick auf Glättungsverfahren (LOWESS) und general additive models (GAMs).\n\n\n\n\n\n\n\n   \n     \n     \n       Sortieren nach\n       Voreinstellung\n         \n          Datum - Datum (aufsteigend)\n        \n         \n          Datum - Neueste\n        \n         \n          Titel\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitel\n\n\nDatum\n\n\nLesson\n\n\nThema\n\n\n\n\n\n\nStat1: Demo\n\n\n2022-10-31\n\n\nStat1\n\n\nGrundlagen der Statistik\n\n\n\n\nStat1: NOVANIMAL\n\n\n2022-10-31\n\n\nStat1\n\n\nGrundlagen der Statistik\n\n\n\n\nStat1: Übung\n\n\n2022-10-31\n\n\nStat1\n\n\nGrundlagen der Statistik\n\n\n\n\nStat1: Lösungen\n\n\n2022-10-31\n\n\nStat1\n\n\nGrundlagen der Statistik\n\n\n\n\nStat2: Demo\n\n\n2022-11-01\n\n\nStat2\n\n\nEinführung in lineare Modelle\n\n\n\n\nStat2: Übung\n\n\n2022-11-01\n\n\nStat2\n\n\nEinführung in lineare Modelle\n\n\n\n\nStat2: Lösung Beispiel\n\n\n2022-11-01\n\n\nStat2\n\n\nEinführung in lineare Modelle\n\n\n\n\nStat2: Lösung 2.1\n\n\n2022-11-01\n\n\nStat2\n\n\nEinführung in lineare Modelle\n\n\n\n\nStat2: Lösung 2.2 & 2.3S\n\n\n2022-11-01\n\n\nStat2\n\n\nEinführung in lineare Modelle\n\n\n\n\nStat2: Lösung 2.3N\n\n\n2022-11-01\n\n\nStat2\n\n\nEinführung in lineare Modelle\n\n\n\n\nStat3: Demo\n\n\n2022-11-07\n\n\nStat3\n\n\nLineare Modelle II\n\n\n\n\nStat3: Übung\n\n\n2022-11-07\n\n\nStat3\n\n\nLineare Modelle II\n\n\n\n\nStat4: Demo\n\n\n2022-11-08\n\n\nStat4\n\n\nKomplexere Regressionsmethoden\n\n\n\n\nStat4: Übung\n\n\n2022-11-08\n\n\nStat4\n\n\nKomplexere Regressionsmethoden\n\n\n\n\n\n\nKeine Treffer"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html",
    "href": "stat1-4/Statistik1_Demo.html",
    "title": "Stat1: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#daten-generieren-und-anschauen",
    "href": "stat1-4/Statistik1_Demo.html#daten-generieren-und-anschauen",
    "title": "Stat1: Demo",
    "section": "Daten generieren und anschauen",
    "text": "Daten generieren und anschauen\n\na <- c(20, 19, 25, 10, 8, 15, 13, 18, 11, 14)\nb <- c(12, 15, 16, 7, 8, 10, 12, 11, 13, 10)\nblume <- data.frame(a,b)\nblume\n\n    a  b\n1  20 12\n2  19 15\n3  25 16\n4  10  7\n5   8  8\n6  15 10\n7  13 12\n8  18 11\n9  11 13\n10 14 10\n\nsummary(blume)\n\n       a               b        \n Min.   : 8.00   Min.   : 7.00  \n 1st Qu.:11.50   1st Qu.:10.00  \n Median :14.50   Median :11.50  \n Mean   :15.30   Mean   :11.40  \n 3rd Qu.:18.75   3rd Qu.:12.75  \n Max.   :25.00   Max.   :16.00  \n\nboxplot(blume$a, blume$b)\nboxplot(blume)\nhist(blume$a)\nhist(blume$b)\n\n\n\n\nAbbildung 13.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 13.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 13.3: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 13.4: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#zweiseitiger-t-test",
    "href": "stat1-4/Statistik1_Demo.html#zweiseitiger-t-test",
    "title": "Stat1: Demo",
    "section": "Zweiseitiger t-Test",
    "text": "Zweiseitiger t-Test\n\nt.test(blume$a, blume$b) # Zweiseitig \"Test auf a ≠ b\" (default)\n\n\n    Welch Two Sample t-test\n\ndata:  blume$a and blume$b\nt = 2.0797, df = 13.907, p-value = 0.05654\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.1245926  7.9245926\nsample estimates:\nmean of x mean of y \n     15.3      11.4"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#einseitiger-t-test",
    "href": "stat1-4/Statistik1_Demo.html#einseitiger-t-test",
    "title": "Stat1: Demo",
    "section": "Einseitiger t-Test",
    "text": "Einseitiger t-Test\n\nt.test(blume$a, blume$b, alternative = \"greater\") # Einseitig \"Test auf a > b\"\n\n\n    Welch Two Sample t-test\n\ndata:  blume$a and blume$b\nt = 2.0797, df = 13.907, p-value = 0.02827\nalternative hypothesis: true difference in means is greater than 0\n95 percent confidence interval:\n 0.5954947       Inf\nsample estimates:\nmean of x mean of y \n     15.3      11.4 \n\nt.test(blume$a, blume$b, alternative = \"less\") # Einseitig \"Test auf a < b\"\n\n\n    Welch Two Sample t-test\n\ndata:  blume$a and blume$b\nt = 2.0797, df = 13.907, p-value = 0.9717\nalternative hypothesis: true difference in means is less than 0\n95 percent confidence interval:\n     -Inf 7.204505\nsample estimates:\nmean of x mean of y \n     15.3      11.4"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#klassischer-t-test-vs.-welch-test",
    "href": "stat1-4/Statistik1_Demo.html#klassischer-t-test-vs.-welch-test",
    "title": "Stat1: Demo",
    "section": "Klassischer t-Test vs. Welch Test",
    "text": "Klassischer t-Test vs. Welch Test\n\n# Varianzen gleich: klassischer t-Test\nt.test(blume$a, blume$b, var.equal = TRUE) \n\n\n    Two Sample t-test\n\ndata:  blume$a and blume$b\nt = 2.0797, df = 18, p-value = 0.05212\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.03981237  7.83981237\nsample estimates:\nmean of x mean of y \n     15.3      11.4 \n\n# Varianzen ungleich: Welch's t-Test (siehe Titelzeile des R-Outputs!)\nt.test(blume$a, blume$b) # dasselbe wie var.equal = FALSE\n\n\n    Welch Two Sample t-test\n\ndata:  blume$a and blume$b\nt = 2.0797, df = 13.907, p-value = 0.05654\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.1245926  7.9245926\nsample estimates:\nmean of x mean of y \n     15.3      11.4"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#gepaarter-t-test",
    "href": "stat1-4/Statistik1_Demo.html#gepaarter-t-test",
    "title": "Stat1: Demo",
    "section": "Gepaarter t-Test",
    "text": "Gepaarter t-Test\n\n# Gepaarter t-Test: erster Wert von a wird mit erstem Wert von\n# b gepaart, zweiter Wert von a mit zweitem von b ect.\nt.test(blume$a, blume$b, paired = TRUE)\n\n\n    Paired t-test\n\ndata:  blume$a and blume$b\nt = 3.4821, df = 9, p-value = 0.006916\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n 1.366339 6.433661\nsample estimates:\nmean difference \n            3.9 \n\nt.test(blume$a, blume$b, paired = TRUE, alternative = \"greater\")\n\n\n    Paired t-test\n\ndata:  blume$a and blume$b\nt = 3.4821, df = 9, p-value = 0.003458\nalternative hypothesis: true mean difference is greater than 0\n95 percent confidence interval:\n 1.846877      Inf\nsample estimates:\nmean difference \n            3.9 \n\n\nDasselbe mit einer “long table”\n\n# \"Long table\" erstellen \ncultivar <- c(rep(\"a\", 10), rep(\"b\", 10))\nsize <- c(a, b)\nblume.long <- data.frame(cultivar, size)\n\n# nicht mehr benötitgten Objekte entfernen\nrm(size)\nrm(cultivar)\n\n# Daten anschauen\nsummary(blume.long)             \n\n   cultivar              size      \n Length:20          Min.   : 7.00  \n Class :character   1st Qu.:10.00  \n Mode  :character   Median :12.50  \n                    Mean   :13.35  \n                    3rd Qu.:15.25  \n                    Max.   :25.00  \n\nhead(blume.long)\n\n  cultivar size\n1        a   20\n2        a   19\n3        a   25\n4        a   10\n5        a    8\n6        a   15\n\nboxplot(size~cultivar, data = blume.long)\n\n# Tests durchführen\nt.test(size~cultivar, blume.long, var.equal = TRUE)\n\n\n    Two Sample t-test\n\ndata:  size by cultivar\nt = 2.0797, df = 18, p-value = 0.05212\nalternative hypothesis: true difference in means between group a and group b is not equal to 0\n95 percent confidence interval:\n -0.03981237  7.83981237\nsample estimates:\nmean in group a mean in group b \n           15.3            11.4 \n\nt.test(size~cultivar, blume.long, paired = TRUE)\n\n\n    Paired t-test\n\ndata:  size by cultivar\nt = 3.4821, df = 9, p-value = 0.006916\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n 1.366339 6.433661\nsample estimates:\nmean difference \n            3.9 \n\n\n\n\n\nAbbildung 13.5: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#base-r-vs.-ggplot2",
    "href": "stat1-4/Statistik1_Demo.html#base-r-vs.-ggplot2",
    "title": "Stat1: Demo",
    "section": "Base R vs. ggplot2",
    "text": "Base R vs. ggplot2\n\nlibrary(tidyverse)\nggplot(blume.long, aes(cultivar, size)) + geom_boxplot()\nggplot(blume.long, aes(cultivar, size)) + geom_boxplot() + theme_classic()\nggplot(blume.long, aes(cultivar, size)) + geom_boxplot(size = 1) + theme_classic()+\ntheme(axis.line = element_line(size = 1)) + theme(axis.title = element_text(size = 14))+\ntheme(axis.text = element_text(size = 14))\nggplot(blume.long, aes(cultivar, size)) + geom_boxplot(size=1) + theme_classic()+\n  theme(axis.line = element_line(size = 1), axis.ticks = element_line(size = 1), \n       axis.text = element_text(size = 20), axis.title = element_text(size = 20))\n\n\n\n\nAbbildung 13.6: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 13.7: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 13.8: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 13.9: Generierter Plot\n\n\n\n\nDefinieren von mytheme mit allen gewünschten Settings, das man zu Beginn einer Sitzung einmal laden und dann immer wieder ausführen kann (statt des langen Codes)\n\nmytheme <- theme_classic() + \n  theme(axis.line = element_line(color = \"black\", size=1), \n        axis.text = element_text(size = 20, color = \"black\"), \n        axis.title = element_text(size = 20, color = \"black\"), \n        axis.ticks = element_line(size = 1, color = \"black\"), \n        axis.ticks.length = unit(.5, \"cm\"))\n\n\n# Schöne Boxplots erstellen\n\nggplot(blume.long, aes(cultivar, size)) + \n  geom_boxplot(size = 1) +\n  mytheme\n\nt_test <- t.test(size~cultivar, blume.long)\n\n# Mit p-Wert im Plot\nggplot(blume.long, aes(cultivar, size)) + \n  geom_boxplot(size = 1) + \n  mytheme +\n  annotate(\"text\", x = \"b\", y = 24, \n  label = paste0(\"italic(p) == \", round(t_test$p.value, 3)), parse = TRUE, size = 8)\n\n# Ohne p-Wert im Plot (da dieser > 0.05)\nggplot (blume.long, aes(cultivar,size)) + \n  geom_boxplot(size = 1) + \n  mytheme +\n  labs(x=\"Cultivar\",y=\"Size (cm)\")\n\n\n\n\nAbbildung 13.10: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 13.11: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 13.12: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#binomialtest",
    "href": "stat1-4/Statistik1_Demo.html#binomialtest",
    "title": "Stat1: Demo",
    "section": "Binomialtest",
    "text": "Binomialtest\nIn Klammern übergibt man die Anzahl der Erfolge und die Stichprobengrösse\n\nbinom.test(84, 200) # Anzahl Frauen im Nationalrat (≙ 42.0 %; Stand 2019) \n\n\n    Exact binomial test\n\ndata:  84 and 200\nnumber of successes = 84, number of trials = 200, p-value = 0.02813\nalternative hypothesis: true probability of success is not equal to 0.5\n95 percent confidence interval:\n 0.3507439 0.4916638\nsample estimates:\nprobability of success \n                  0.42 \n\nbinom.test(116, 200) # Anzahl Männer im Nationalrat (≙ 58.0 %; Stand 2019) \n\n\n    Exact binomial test\n\ndata:  116 and 200\nnumber of successes = 116, number of trials = 200, p-value = 0.02813\nalternative hypothesis: true probability of success is not equal to 0.5\n95 percent confidence interval:\n 0.5083362 0.6492561\nsample estimates:\nprobability of success \n                  0.58 \n\nbinom.test(3, 7) # Anzahl Frauen im Bundesrat (≙ 42.9 %; Stand 2019)\n\n\n    Exact binomial test\n\ndata:  3 and 7\nnumber of successes = 3, number of trials = 7, p-value = 1\nalternative hypothesis: true probability of success is not equal to 0.5\n95 percent confidence interval:\n 0.09898828 0.81594843\nsample estimates:\nprobability of success \n             0.4285714"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#chi-quadrat-test-fishers-test",
    "href": "stat1-4/Statistik1_Demo.html#chi-quadrat-test-fishers-test",
    "title": "Stat1: Demo",
    "section": "Chi-Quadrat-Test & Fishers Test",
    "text": "Chi-Quadrat-Test & Fishers Test\nErmitteln des kritischen Wertes\n\nqchisq(0.95, 1)\n\n[1] 3.841459"
  },
  {
    "objectID": "stat1-4/Statistik1_Demo.html#direkter-test-in-r-dazu-werte-als-matrix-nötig",
    "href": "stat1-4/Statistik1_Demo.html#direkter-test-in-r-dazu-werte-als-matrix-nötig",
    "title": "Stat1: Demo",
    "section": "Direkter Test in R (dazu Werte als Matrix nötig)",
    "text": "Direkter Test in R (dazu Werte als Matrix nötig)\n\n# Matrix mit Haarfarbe&Augenfarbe-Kombidnationen erstellen\n# 38 blond&blau, 14 dunkel&blau, 11 blond&braun,, 51 dunkel&braun\ncount <- matrix(c(38, 14, 11, 51), nrow = 2)\ncount # Check\n\n     [,1] [,2]\n[1,]   38   11\n[2,]   14   51\n\nrownames(count) <- c(\"blond\", \"dunkel\") # Benennen für Übersicht\ncolnames(count) <- c(\"blau\", \"braun\") #  Benennen für Übersicht\ncount # Check \n\n       blau braun\nblond    38    11\ndunkel   14    51\n\n# Tests durchführen\nchisq.test(count)\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  count\nX-squared = 33.112, df = 1, p-value = 8.7e-09\n\nfisher.test(count)\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  count\np-value = 2.099e-09\nalternative hypothesis: true odds ratio is not equal to 1\n95 percent confidence interval:\n  4.746351 34.118920\nsample estimates:\nodds ratio \n  12.22697"
  },
  {
    "objectID": "stat1-4/Statistik1_Novanimal.html",
    "href": "stat1-4/Statistik1_Novanimal.html",
    "title": "Stat1: NOVANIMAL",
    "section": "",
    "text": "Dazu wurde u.a. ein Experiment in zwei Hochschulmensen durchgeführt. Forschungsleitend war die Frage, wie die Gäste dazu bewogen werden können, häufiger vegetarische oder vegane Gerichte zu wählen. Konkret wurde untersucht, wie die Gäste auf ein verändertes Menü-Angebot mit einem höheren Anteil an vegetarischen und veganen Gerichten reagieren. Das Experiment fand während 12 Wochen statt und bestand aus zwei Mensazyklen à 6 Wochen. Über den gesamten Untersuchungszeitraum werden insgesamt 90 verschiedene Gerichte angeboten. In den 6 Referenz- bzw. Basiswochen wurden zwei fleisch- oder fischhaltige Menüs und ein vegetarisches Menü angeboten. In den 6 Interventionswochen wurde das Verhältnis umgekehrt und es wurden ein veganes, ein vegetarisches und ein fleisch- oder fischhaltiges Gericht angeboten. Basis- und Interventionsangebote wechselten wöchentlich ab. Während der gesamten 12 Wochen konnten die Gäste jeweils auf ein Buffet ausweichen und ihre Mahlzeit aus warmen und kalten Komponenten selber zusammenstellen. Die Gerichte wurden über drei vorgegebene Menülinien (F, K, W) randomisiert angeboten.\n\n\n\nDie Abbildung zeigt das Versuchsdesign der ersten 6 Experimentwochen (Kalenderwoche 40 bis 45).\n\n\nMehr Informationen über das Forschungsprojekt NOVANIMAL findet ihr auf der Webpage."
  },
  {
    "objectID": "stat1-4/Statistik1_Uebung.html",
    "href": "stat1-4/Statistik1_Uebung.html",
    "title": "Stat1: Übung",
    "section": "",
    "text": "Führt einen Assoziationstest zweier kategorialer Variablen (mit je zwei Ausprägungen) mit Chi-Quadrat und Fishers exaktem Test durch. Dazu erhebt ihr selbst die Daten (wozu ihr euch auch in Teams zusammenschliessen könnt). Ihr könnt z.B. eine Datenerhebung unter Mitstudierenden durchführen (etwa Nutzung Mac/Windows vs. männlich/weiblich). Bitte formuliert vor der Datenerhebung eine Hypothese, d.h. eine Erwartungshaltung, ob und welche Assoziation vorliegt und wenn ja warum. Beachtet, dass ihr für diese Form des Assoziationstests genau zwei binäre Variablen benötigt. Wenn ihr also kategoriale Variablen mit mehr als zwei Ausprägungen habt, so könnt ihr entweder Ausprägungen sinnvoll zusammenfassen oder seltene Ausprägungen im Test unberücksichtigt lassen."
  },
  {
    "objectID": "stat1-4/Statistik1_Uebung.html#aufgabe-1.2-t-test",
    "href": "stat1-4/Statistik1_Uebung.html#aufgabe-1.2-t-test",
    "title": "Stat1: Übung",
    "section": "Aufgabe 1.2: t-Test",
    "text": "Aufgabe 1.2: t-Test\nt-Test mit Datensatz_novanimal_Uebung_Statistik1.2.csv\nWerden in den Basis- und Interventionswochen unterschiedlich viele Gerichte verkauft?\n\nSchau die Daten an: Verstehen und ggf. plotten.\nDefiniere die Null- (\\(H_0\\)) und die Alternativhypothese (\\(H_1\\)).\nWelche Form von t-Test musst Du anwenden: einseitig/zweiseitig resp. gepaart/ungepaart?\nFühre einen t-Test durch.\nWie gut sind die Voraussetzungen für einen t-Test erfüllt (z.B. Normalverteilung der Residuen und Varianzhomogenität)?\nStelle deine Ergebnisse angemessen dar, d.h. Text mit Abbildung und/oder Tabelle"
  },
  {
    "objectID": "stat1-4/Statistik1_Loesung.html",
    "href": "stat1-4/Statistik1_Loesung.html",
    "title": "Stat1: Lösungen",
    "section": "",
    "text": "Download dieses Lösungsscript via “</>Code” (oben rechts)"
  },
  {
    "objectID": "stat1-4/Statistik1_Loesung.html#musterlösung-übung-1.1-assoziationstest",
    "href": "stat1-4/Statistik1_Loesung.html#musterlösung-übung-1.1-assoziationstest",
    "title": "Stat1: Lösungen",
    "section": "Musterlösung Übung 1.1: Assoziationstest",
    "text": "Musterlösung Übung 1.1: Assoziationstest\nIn diesem Beispiel soll einem Klischee auf den Grund gegagen werden: Sind Aargauer überdurchschnittlich mit weissen Socken assoziiert? Die Datenerhebung basiert auf männlichen Studenten bei denen folgende beiden binären Variablen erhoben wurden:\n\nSockenfarbe: weiss, nicht-weiss\nSelbstdeklarierte Kantonsangehörigkeit: AG, nicht-AG\n\nDie Hypothese ist: Das Klischee trifft zu, weisse Socken sind überdurchschnittlich häufig mit Aargauer Studenten assoziiert.\nDie Datenerhebung unter 35 Studenten ergab folgende Datengrundlage:\n\nWeisssockige Aargauer: 4\nNicht-weisssockige Aargauer: 2\nWeissockige nicht-Aargauer: 7\nNicht-weisssockige nicht-Aargauer: 22\n\n\n\n\n\n# Matrix erstellen\nAargauer <- c(4, 2)\nnames(Aargauer) <- c(\"Weiss\", \"NotWeiss\")\nNotAargauer <-c (7,22)\nnames(NotAargauer) <- c(\"Weiss\", \"NotWeiss\")\nAGsocks <- data.frame(Aargauer, NotAargauer)\nAGsocks <- as.matrix(AGsocks)\nAGsocks\n\n         Aargauer NotAargauer\nWeiss           4           7\nNotWeiss        2          22\n\n# Daten anschauen mit erstem Google-Ergebnis für \"Assoziation Plot r\"\nassocplot(AGsocks) # Interpretation des Plots mit dem Befehl ?assocplot\n\n\n\n\nDer Assoziationsplot zeigt, dass in den Daten weisse Socken bei den Aargauern überverterten und bei den Nicht-Aargauern untervertreten sind.\nFür kleine Erwartungswerte in den Zellen (< 5) ist der Chi-Quadrat-Test nicht zuverlässig (siehe “Warning message”). Darum wird mit Fishers exaktem Test gearbeitet.\n\n# Tests durchführen\nchisq.test(AGsocks) # Chi-Quadrat-Test nur zum anschauen.\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  AGsocks\nX-squared = 2.4323, df = 1, p-value = 0.1189\n\nfisher.test(AGsocks) # \"Fisher's Exact Test for Count Data\"\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  AGsocks\np-value = 0.06323\nalternative hypothesis: true odds ratio is not equal to 1\n95 percent confidence interval:\n  0.6811227 78.4336189\nsample estimates:\nodds ratio \n  5.897263 \n\n\n\nErgebnisse\nIn den erhobenen Daten konnte keine signifikante Assoziation zwischen Kantonangehörigkeit (AG, nicht-AG) und Sockenfarbe (weiss, nicht-weiss) festgestellt werden. Der p-Wert von Fishers exaktem Test war nur marginal signifikant (p = 0.063). Das nicht-signfikante Resultat überrascht auf den ersten Blick, denn der “odds ratio” im Datensatz ist mit 5.9 relativ hoch und 67 % der Aargauer trugen weisse Socken während nur 24 % der Nicht-Aargauer weisse Socken trugen. Doch war der Anteil von nur 6 Aargauer in der nur 35 Männer umfassenden Stichprobe relativ klein, um ein verlässliches Bild der Sockenpräferenzen der Aargauer zu machen. Insofern leuchtet es ein, das bei dieser kleinen und unausgewogenen Stichprobe die “Power” des satistischen Tests (um die Nullhypothese zu verwerfen) relativ klein ist."
  },
  {
    "objectID": "stat1-4/Statistik1_Loesung.html#musterlösung-übung-1.2-t-test",
    "href": "stat1-4/Statistik1_Loesung.html#musterlösung-übung-1.2-t-test",
    "title": "Stat1: Lösungen",
    "section": "Musterlösung Übung 1.2: t-Test",
    "text": "Musterlösung Übung 1.2: t-Test\n\nLeseempfehlung Kapitel 2 von Manny Gimond\n\n\nNull- und Alternativhypothese\n\\(H_0\\): Es gibt keine Unterschiede in den Verkaufszahlen zwischen Basis- und Interventionswochen.\n\\(H_1\\): Es gibt Unterschiede in den Verkaufszahlen zwischen Basis- und Interventionswochen.\n\n#lade Daten\ndf <- readr::read_csv2(\"datasets/statistik/Datensatz_novanimal_Uebung_Statistik1.2.csv\")\n\n# überprüft die Voraussetzungen für einen t-Test\nggplot2::ggplot(df, aes(x = condit, y= tot_sold)) + # achtung 0 Punkt fehlt\n    geom_boxplot(fill = \"white\", color = \"black\", size = 1) + \n    labs(x=\"\\nBedingungen\", y=\"Durchschnittlich verkaufte Gerichte pro Woche\\n\") + \n    mytheme\n\n# Auf den ersten Blick scheint es keine starken Abweichungen zu einer \n#Normalverteilung zu geben resp. es sind keine extremen schiefen Verteilungen\n# ersichtlich (vgl. Skript Statistik 2)\n\n\n\n\nAbbildung 16.1: Generierter Plot\n\n\n\n\n\n# führt einen t-Tests durch; \n# es wird angenommen, dass die Verkaufszahlen zwischen den Bedingungen \n# unabhängig sind\n\nt_test <- t.test(tot_sold ~ condit, data=df, var.equl = T)\nt_test\n\n\n    Welch Two Sample t-test\n\ndata:  tot_sold by condit\nt = 0.27168, df = 9.9707, p-value = 0.7914\nalternative hypothesis: true difference in means between group Basis and group Intervention is not equal to 0\n95 percent confidence interval:\n -115.2743  147.2743\nsample estimates:\n       mean in group Basis mean in group Intervention \n                      2203                       2187 \n\n#alternative Formulierung\nt.test(df[df$condit == \"Basis\", ]$tot_sold, \n                 df[df$condit == \"Intervention\", ]$tot_sold) \n\n\n    Welch Two Sample t-test\n\ndata:  df[df$condit == \"Basis\", ]$tot_sold and df[df$condit == \"Intervention\", ]$tot_sold\nt = 0.27168, df = 9.9707, p-value = 0.7914\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -115.2743  147.2743\nsample estimates:\nmean of x mean of y \n     2203      2187 \n\n\n\n\nMethoden\nZiel war es die aggregierten Verkaufszahlen zwischen den Interventions- und Basiswochen zu vergleichen. Die Annahme ist, dass die wöchentlichen Verkaufszahlen unabhängig sind. Daher können die Unterschiede zwischen den Verkaufszahlen pro Woche zwischen den beiden Bedingungen mittels t-Test geprüft werden. Obwohl die visuelle Inspektion keine schwerwiegenden Verletzungen der Modelvoraussetzung zeigte (mit Ausnahme eines Ausreissers), wurde einen Welch t-Test gerechnet. Zudem muss gesagt werden, dass die Gruppengrösse hier jeweils mit n = 6 (Anzahl Wochen) eher klein ist. T-test liefern dennoch relativ reliable Resultate. Für mehr Infos dazu hier eine Studie.\n\n\nErgebnisse\nIn den Basiswochen werden mehr Gerichte pro Woche verkauft als in den Interventionswochen (siehe Abbildung 1). Die wöchentlichen Verkaufszahlen zwischen den Bedingungen (Basis oder Intervention) unterscheiden sich gemäss Welch t-Test jedoch nicht signifikant (t(10) = 0.272 , p = 0.791). Die Ergebnisse könnten mit einem \\(\\chi^2\\)-Test nochmals validiert werden, da die Gruppengrösse mit n = 6 doch eher klein ist.\n\n\n\n\n\nAbbildung 16.2: Die wöchentlichen Verkaufszahlen für die Interventions- und Basiswochen unterscheiden sich nicht signifikant."
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html",
    "href": "stat1-4/Statistik2_Demo.html",
    "title": "Stat2: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)\nDatensatz für Korrelationen: Nitrogen.csv\nDatensatz für 3-fach-Interaktion: Riesch_et_al_ReMe_Extract.csv"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#t-test-als-anova",
    "href": "stat1-4/Statistik2_Demo.html#t-test-als-anova",
    "title": "Stat2: Demo",
    "section": "t-test als ANOVA",
    "text": "t-test als ANOVA\n\n# Daten generieren als \"long table\" (2 Kategorien)\na <- c(20, 19, 25, 10, 8, 15, 13 ,18, 11, 14)\nb <- c(12, 15, 16, 7, 8, 10, 12, 11, 13, 10)\nblume <- data.frame(cultivar = c(rep(\"a\", 10), rep(\"b\" , 10)), size = c(a, b))\n\n# Daten anschauen\npar(mfrow=c(1,1))\nboxplot(size~cultivar, xlab = \"Sorte\", ylab = \"Bluetengroesse [cm]\", data = blume)\n\n# Klassischer t-Test ausführen\nt.test(size~cultivar, blume, var.equal = TRUE)\n\n\n    Two Sample t-test\n\ndata:  size by cultivar\nt = 2.0797, df = 18, p-value = 0.05212\nalternative hypothesis: true difference in means between group a and group b is not equal to 0\n95 percent confidence interval:\n -0.03981237  7.83981237\nsample estimates:\nmean in group a mean in group b \n           15.3            11.4 \n\n# ANOVA ausführen\naov(size~cultivar, data = blume)\n\nCall:\n   aov(formula = size ~ cultivar, data = blume)\n\nTerms:\n                cultivar Residuals\nSum of Squares     76.05    316.50\nDeg. of Freedom        1        18\n\nResidual standard error: 4.193249\nEstimated effects may be unbalanced\n\nsummary(aov(size~cultivar, data = blume))\n\n            Df Sum Sq Mean Sq F value Pr(>F)  \ncultivar     1   76.0   76.05   4.325 0.0521 .\nResiduals   18  316.5   17.58                 \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary.lm(aov(size~cultivar, data = blume))\n\n\nCall:\naov(formula = size ~ cultivar, data = blume)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-7.300 -2.575 -0.350  2.925  9.700 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   15.300      1.326   11.54 9.47e-10 ***\ncultivarb     -3.900      1.875   -2.08   0.0521 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.193 on 18 degrees of freedom\nMultiple R-squared:  0.1937,    Adjusted R-squared:  0.1489 \nF-statistic: 4.325 on 1 and 18 DF,  p-value: 0.05212\n\n\n\n\n\nAbbildung 17.1: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#echte-anova",
    "href": "stat1-4/Statistik2_Demo.html#echte-anova",
    "title": "Stat2: Demo",
    "section": "Echte ANOVA",
    "text": "Echte ANOVA\n\n# Daten generieren mit 3 statt nur 2 Kategorien\nc <- c(30, 19, 31, 23, 18, 25, 26, 24, 17, 20)\nblume2 <- data.frame(cultivar = c(rep(\"a\", 10), rep(\"b\", 10), rep(\"c\", 10)), size = c(a, b, c))\nblume2$cultivar <- as.factor(blume2$cultivar)\n\nsummary(blume2)             \n\n cultivar      size      \n a:10     Min.   : 7.00  \n b:10     1st Qu.:11.25  \n c:10     Median :15.50  \n          Mean   :16.67  \n          3rd Qu.:20.00  \n          Max.   :31.00  \n\nhead(blume2)\n\n  cultivar size\n1        a   20\n2        a   19\n3        a   25\n4        a   10\n5        a    8\n6        a   15\n\npar(mfrow=c(1,1))\nboxplot(size~cultivar, xlab = \"Sorte\", ylab = \"Blütengrösse [cm]\", data = blume2)\n\naov(size~cultivar, data = blume2)\n\nCall:\n   aov(formula = size ~ cultivar, data = blume2)\n\nTerms:\n                cultivar Residuals\nSum of Squares  736.0667  528.6000\nDeg. of Freedom        2        27\n\nResidual standard error: 4.424678\nEstimated effects may be unbalanced\n\nsummary(aov(size~cultivar, data = blume2))\n\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ncultivar     2  736.1   368.0    18.8 7.68e-06 ***\nResiduals   27  528.6    19.6                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary.lm(aov(size~cultivar, data=blume2))\n\n\nCall:\naov(formula = size ~ cultivar, data = blume2)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-7.300 -3.375 -0.300  2.700  9.700 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   15.300      1.399  10.935 2.02e-11 ***\ncultivarb     -3.900      1.979  -1.971 0.059065 .  \ncultivarc      8.000      1.979   4.043 0.000395 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.425 on 27 degrees of freedom\nMultiple R-squared:  0.582, Adjusted R-squared:  0.5511 \nF-statistic:  18.8 on 2 and 27 DF,  p-value: 7.683e-06\n\naov.1 <- aov(size~cultivar, data = blume2)\nsummary(aov.1)\n\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ncultivar     2  736.1   368.0    18.8 7.68e-06 ***\nResiduals   27  528.6    19.6                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary.lm(aov.1)\n\n\nCall:\naov(formula = size ~ cultivar, data = blume2)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-7.300 -3.375 -0.300  2.700  9.700 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   15.300      1.399  10.935 2.02e-11 ***\ncultivarb     -3.900      1.979  -1.971 0.059065 .  \ncultivarc      8.000      1.979   4.043 0.000395 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.425 on 27 degrees of freedom\nMultiple R-squared:  0.582, Adjusted R-squared:  0.5511 \nF-statistic:  18.8 on 2 and 27 DF,  p-value: 7.683e-06\n\n#Berechnung Mittelwerte usw. zur Charakterisierung der Gruppen\naggregate(size~cultivar, blume2, function(x) c(Mean = mean(x), SD = sd(x), Min = min(x), Max = max(x)))\n\n  cultivar size.Mean   size.SD  size.Min  size.Max\n1        a 15.300000  5.207900  8.000000 25.000000\n2        b 11.400000  2.836273  7.000000 16.000000\n3        c 23.300000  4.854551 17.000000 31.000000\n\nlm.1 <- lm(size~cultivar, data = blume2)\nsummary(lm.1)\n\n\nCall:\nlm(formula = size ~ cultivar, data = blume2)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-7.300 -3.375 -0.300  2.700  9.700 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   15.300      1.399  10.935 2.02e-11 ***\ncultivarb     -3.900      1.979  -1.971 0.059065 .  \ncultivarc      8.000      1.979   4.043 0.000395 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.425 on 27 degrees of freedom\nMultiple R-squared:  0.582, Adjusted R-squared:  0.5511 \nF-statistic:  18.8 on 2 and 27 DF,  p-value: 7.683e-06\n\n\n\n\n\nAbbildung 17.2: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#tukeys-posthoc-test",
    "href": "stat1-4/Statistik2_Demo.html#tukeys-posthoc-test",
    "title": "Stat2: Demo",
    "section": "Tukeys Posthoc-Test",
    "text": "Tukeys Posthoc-Test\n\n#Load library\nif(!require(agricolae)){install.packages(\"agricolae\")}\nlibrary(agricolae)\n\n# Posthoc-Test\nHSD.test(aov.1, \"cultivar\", group = FALSE, console = TRUE)\n\n\nStudy: aov.1 ~ \"cultivar\"\n\nHSD Test for size \n\nMean Square Error:  19.57778 \n\ncultivar,  means\n\n  size      std  r Min Max\na 15.3 5.207900 10   8  25\nb 11.4 2.836273 10   7  16\nc 23.3 4.854551 10  17  31\n\nAlpha: 0.05 ; DF Error: 27 \nCritical Value of Studentized Range: 3.506426 \n\nComparison between treatments means\n\n      difference pvalue signif.        LCL       UCL\na - b        3.9 0.1388          -1.006213  8.806213\na - c       -8.0 0.0011      ** -12.906213 -3.093787\nb - c      -11.9 0.0000     *** -16.806213 -6.993787"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#beispiel-posthoc-labels-in-plot",
    "href": "stat1-4/Statistik2_Demo.html#beispiel-posthoc-labels-in-plot",
    "title": "Stat2: Demo",
    "section": "Beispiel Posthoc-Labels in Plot",
    "text": "Beispiel Posthoc-Labels in Plot\n\n# ANOVA Mit Iris-Datenset, das in R integriert ist\naov.2 <- aov(Sepal.Width ~ Species, data = iris)\n\n# Posthoc-Test\nHSD.test(aov.2, \"Species\", console = TRUE)\n\n\nStudy: aov.2 ~ \"Species\"\n\nHSD Test for Sepal.Width \n\nMean Square Error:  0.1153878 \n\nSpecies,  means\n\n           Sepal.Width       std  r Min Max\nsetosa           3.428 0.3790644 50 2.3 4.4\nversicolor       2.770 0.3137983 50 2.0 3.4\nvirginica        2.974 0.3224966 50 2.2 3.8\n\nAlpha: 0.05 ; DF Error: 147 \nCritical Value of Studentized Range: 3.348424 \n\nMinimun Significant Difference: 0.1608553 \n\nTreatments with the same letter are not significantly different.\n\n           Sepal.Width groups\nsetosa           3.428      a\nvirginica        2.974      b\nversicolor       2.770      c\n\n# Plot mit labels\nboxplot(Sepal.Width ~ Species, data = iris)\nboxplot(Sepal.Width ~ Species, ylim = c(2, 5), data = iris)\ntext(1, 4.8, \"a\")\ntext(2, 4.8, \"c\")\ntext(3, 4.8, \"b\")\n\n\n\n\nAbbildung 17.3: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 17.4: Generierter Plot\n\n\n\n\nDerselbe Plot mit ggplot\n\n#Load library\nlibrary(ggplot2)\n\nggplot(iris, aes(Species, Sepal.Width)) + \n  geom_boxplot(size = 1) +\n  annotate(\"text\", y = 5, x = 1:3, label = c(\"a\", \"c\", \"b\"))\n\n\n\n\nAbbildung 17.5: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#klassische-tests-der-modellannahmen-nicht-empfohlen",
    "href": "stat1-4/Statistik2_Demo.html#klassische-tests-der-modellannahmen-nicht-empfohlen",
    "title": "Stat2: Demo",
    "section": "Klassische Tests der Modellannahmen (NICHT EMPFOHLEN!!!)",
    "text": "Klassische Tests der Modellannahmen (NICHT EMPFOHLEN!!!)\n\n#  Shapiro-Wilk Test auf Normalverteilung\n# Pro Kategorie!\n# (H0 = Notmalverteilung)\nshapiro.test(blume2$size[blume2$cultivar == \"a\"])\n\n\n    Shapiro-Wilk normality test\n\ndata:  blume2$size[blume2$cultivar == \"a\"]\nW = 0.97304, p-value = 0.9175\n\nshapiro.test(blume2$size[blume2$cultivar == \"b\"])\n\n\n    Shapiro-Wilk normality test\n\ndata:  blume2$size[blume2$cultivar == \"b\"]\nW = 0.97341, p-value = 0.9206\n\nshapiro.test(blume2$size[blume2$cultivar == \"c\"])\n\n\n    Shapiro-Wilk normality test\n\ndata:  blume2$size[blume2$cultivar == \"c\"]\nW = 0.94188, p-value = 0.5742\n\n?var.test\n\n# F-Test zum Vergleich zweier Varianzen\n# (H0= Gleiche Varianzen)\nvar.test(blume2$size[blume2$cultivar == \"a\"],\n         blume2$size[blume2$cultivar == \"b\"])\n\n\n    F test to compare two variances\n\ndata:  blume2$size[blume2$cultivar == \"a\"] and blume2$size[blume2$cultivar == \"b\"]\nF = 3.3715, num df = 9, denom df = 9, p-value = 0.08467\nalternative hypothesis: true ratio of variances is not equal to 1\n95 percent confidence interval:\n  0.8374446 13.5738284\nsample estimates:\nratio of variances \n          3.371547 \n\n\n\n#Load library\nif(!require(car)){install.packages(\"car\")}\nlibrary(car)\n\n# Test auf Homogenität der Varianzen\nleveneTest(blume2$size[blume2$cultivar == \"a\"],\n           blume2$size[blume2$cultivar == \"b\"],\n           center=mean)\n\nLevene's Test for Homogeneity of Variance (center = mean)\n      Df    F value    Pr(>F)    \ngroup  7 2.2598e+30 < 2.2e-16 ***\n       2                         \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#nicht-parametrische-alternativen-wenn-modellannahmen-der-anvoa-massiv-verletzt-sind",
    "href": "stat1-4/Statistik2_Demo.html#nicht-parametrische-alternativen-wenn-modellannahmen-der-anvoa-massiv-verletzt-sind",
    "title": "Stat2: Demo",
    "section": "Nicht-parametrische Alternativen, wenn Modellannahmen der ANVOA massiv verletzt sind",
    "text": "Nicht-parametrische Alternativen, wenn Modellannahmen der ANVOA massiv verletzt sind\n\n# Nicht-parametrische Alternative zu t-Test\nwilcox.test(blume2$size[blume2$cultivar == \"a\"],\n            blume2$size[blume2$cultivar == \"b\"])\n\n\n    Wilcoxon rank sum test with continuity correction\n\ndata:  blume2$size[blume2$cultivar == \"a\"] and blume2$size[blume2$cultivar == \"b\"]\nW = 73, p-value = 0.08789\nalternative hypothesis: true location shift is not equal to 0"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#zum-vergleich-normale-anova-noch-mal",
    "href": "stat1-4/Statistik2_Demo.html#zum-vergleich-normale-anova-noch-mal",
    "title": "Stat2: Demo",
    "section": "Zum Vergleich normale ANOVA noch mal",
    "text": "Zum Vergleich normale ANOVA noch mal\n\nsummary(aov(size~cultivar, data = blume2))\n\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ncultivar     2  736.1   368.0    18.8 7.68e-06 ***\nResiduals   27  528.6    19.6                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#bei-starken-abweichungen-von-der-normalverteilung-aber-ähnlichen-varianzen",
    "href": "stat1-4/Statistik2_Demo.html#bei-starken-abweichungen-von-der-normalverteilung-aber-ähnlichen-varianzen",
    "title": "Stat2: Demo",
    "section": "Bei starken Abweichungen von der Normalverteilung, aber ähnlichen Varianzen",
    "text": "Bei starken Abweichungen von der Normalverteilung, aber ähnlichen Varianzen"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#kruskal-wallis-test",
    "href": "stat1-4/Statistik2_Demo.html#kruskal-wallis-test",
    "title": "Stat2: Demo",
    "section": "Kruskal-Wallis-Test",
    "text": "Kruskal-Wallis-Test\n\nkruskal.test(size~cultivar, data = blume2)\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  size by cultivar\nKruskal-Wallis chi-squared = 16.686, df = 2, p-value = 0.0002381\n\n\n\n#Load library\nif(!require(FSA)){install.packages(\"FSA\")} \nlibrary(FSA)\n\n#korrigierte p-Werte nach Bejamini-Hochberg\ndunnTest(size~cultivar, method = \"bh\", data = blume2) \n\n  Comparison         Z      P.unadj        P.adj\n1      a - b  1.526210 1.269575e-01 0.1269575490\n2      a - c -2.518247 1.179407e-02 0.0176911039\n3      b - c -4.044457 5.244459e-05 0.0001573338"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#bei-erheblicher-heteroskedastizität-aber-relative-normalsymmetrisch-verteilten-residuen",
    "href": "stat1-4/Statistik2_Demo.html#bei-erheblicher-heteroskedastizität-aber-relative-normalsymmetrisch-verteilten-residuen",
    "title": "Stat2: Demo",
    "section": "Bei erheblicher Heteroskedastizität, aber relative normal/symmetrisch verteilten Residuen",
    "text": "Bei erheblicher Heteroskedastizität, aber relative normal/symmetrisch verteilten Residuen"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#welch-test",
    "href": "stat1-4/Statistik2_Demo.html#welch-test",
    "title": "Stat2: Demo",
    "section": "Welch-Test",
    "text": "Welch-Test\n\noneway.test(size~cultivar, var.equal = F, data = blume2)\n\n\n    One-way analysis of means (not assuming equal variances)\n\ndata:  size and cultivar\nF = 21.642, num df = 2.000, denom df = 16.564, p-value = 2.397e-05"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#faktorielle-anova",
    "href": "stat1-4/Statistik2_Demo.html#faktorielle-anova",
    "title": "Stat2: Demo",
    "section": "2-faktorielle ANOVA",
    "text": "2-faktorielle ANOVA\n\n# Daten generieren\nd <- c(10, 12, 11, 13, 10, 25, 12, 30, 26, 13)\ne <- c(15, 13, 18, 11, 14, 25, 39, 38, 28, 24)\nf <- c(10, 12, 11, 13, 10, 9, 2, 4, 7, 13)\n\nblume3 <- data.frame(cultivar = c(rep(\"a\", 20), rep(\"b\", 20), rep(\"c\", 20)),\n                     house = c(rep(c(rep(\"yes\", 10), rep(\"no\", 10)), 3)),\n                  size = c(a, b, c, d, e, f))\nblume3\n\n   cultivar house size\n1         a   yes   20\n2         a   yes   19\n3         a   yes   25\n4         a   yes   10\n5         a   yes    8\n6         a   yes   15\n7         a   yes   13\n8         a   yes   18\n9         a   yes   11\n10        a   yes   14\n11        a    no   12\n12        a    no   15\n13        a    no   16\n14        a    no    7\n15        a    no    8\n16        a    no   10\n17        a    no   12\n18        a    no   11\n19        a    no   13\n20        a    no   10\n21        b   yes   30\n22        b   yes   19\n23        b   yes   31\n24        b   yes   23\n25        b   yes   18\n26        b   yes   25\n27        b   yes   26\n28        b   yes   24\n29        b   yes   17\n30        b   yes   20\n31        b    no   10\n32        b    no   12\n33        b    no   11\n34        b    no   13\n35        b    no   10\n36        b    no   25\n37        b    no   12\n38        b    no   30\n39        b    no   26\n40        b    no   13\n41        c   yes   15\n42        c   yes   13\n43        c   yes   18\n44        c   yes   11\n45        c   yes   14\n46        c   yes   25\n47        c   yes   39\n48        c   yes   38\n49        c   yes   28\n50        c   yes   24\n51        c    no   10\n52        c    no   12\n53        c    no   11\n54        c    no   13\n55        c    no   10\n56        c    no    9\n57        c    no    2\n58        c    no    4\n59        c    no    7\n60        c    no   13\n\n\n\nboxplot(size~cultivar + house, data = blume3)\n\nsummary(aov(size~cultivar + house, data = blume3))\n\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ncultivar     2  417.1   208.5   5.005     0.01 *  \nhouse        1  992.3   992.3  23.815 9.19e-06 ***\nResiduals   56 2333.2    41.7                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary(aov(size~cultivar + house + cultivar:house, data = blume3)) \n\n               Df Sum Sq Mean Sq F value   Pr(>F)    \ncultivar        2  417.1   208.5   5.364   0.0075 ** \nhouse           1  992.3   992.3  25.520 5.33e-06 ***\ncultivar:house  2  233.6   116.8   3.004   0.0579 .  \nResiduals      54 2099.6    38.9                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n#Kurzschreibweise: \"*\" bedeutet, dass Interaktion zwischen cultivar und house eingeschlossen wird\nsummary(aov(size~cultivar * house, data = blume3)) \n\n               Df Sum Sq Mean Sq F value   Pr(>F)    \ncultivar        2  417.1   208.5   5.364   0.0075 ** \nhouse           1  992.3   992.3  25.520 5.33e-06 ***\ncultivar:house  2  233.6   116.8   3.004   0.0579 .  \nResiduals      54 2099.6    38.9                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary.lm(aov(size~cultivar+house, data = blume3))\n\n\nCall:\naov(formula = size ~ cultivar + house, data = blume3)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-9.733 -4.696 -1.050  2.717 19.133 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)    9.283      1.667   5.570 7.52e-07 ***\ncultivarb      6.400      2.041   3.135  0.00273 ** \ncultivarc      2.450      2.041   1.200  0.23509    \nhouseyes       8.133      1.667   4.880 9.19e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.455 on 56 degrees of freedom\nMultiple R-squared:  0.3766,    Adjusted R-squared:  0.3432 \nF-statistic: 11.28 on 3 and 56 DF,  p-value: 6.848e-06\n\ninteraction.plot(blume3$cultivar, blume3$house, blume3$size)\ninteraction.plot(blume3$house, blume3$cultivar, blume3$size)\n\n\n\n\nAbbildung 17.6: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 17.7: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 17.8: Generierter Plot\n\n\n\n\n\nanova(lm(blume3$size~blume3$cultivar*blume3$house), lm(blume3$size~blume3$cultivar+blume3$house))\n\nAnalysis of Variance Table\n\nModel 1: blume3$size ~ blume3$cultivar * blume3$house\nModel 2: blume3$size ~ blume3$cultivar + blume3$house\n  Res.Df    RSS Df Sum of Sq      F  Pr(>F)  \n1     54 2099.6                              \n2     56 2333.2 -2   -233.63 3.0044 0.05792 .\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nanova(lm(blume3$size~blume3$house), lm(blume3$size~blume3$cultivar * blume3$house))\n\nAnalysis of Variance Table\n\nModel 1: blume3$size ~ blume3$house\nModel 2: blume3$size ~ blume3$cultivar * blume3$house\n  Res.Df    RSS Df Sum of Sq      F   Pr(>F)   \n1     58 2750.3                                \n2     54 2099.6  4    650.73 4.1841 0.005045 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n#Visualisierung 2-fach-Interaktion etwas elaborierter mit ggplot\n\nif(!require(sjPlot)){install.packages(\"sjPlot\")} \nlibrary(sjPlot)\nif(!require(ggplot2)){install.packages(\"ggplot2\")} \nlibrary(ggplot2)\ntheme_set(theme_classic())\n\naov <- aov(size ~ cultivar * house, data = blume3)\nplot_model(aov, type = \"pred\", terms = c(\"cultivar\", \"house\") )\n\n\n\n\n\n#Geht auch für 3-fach-Interaktionen\n\n#Datensatz zum Einfluss von Management und Hirschbeweidung auf den Pflanzenartenreichtum\n\nRiesch <- read.delim(\"datasets/statistik/Riesch_et_al_ReMe_Extract.csv\", sep=\";\", stringsAsFactors = TRUE)\nstr(Riesch)\n\n'data.frame':   60 obs. of  5 variables:\n $ Plot.ID         : Factor w/ 60 levels \"Eul_A1_MP_14\",..: 9 17 33 37 49 10 18 34 38 50 ...\n $ Year            : Factor w/ 2 levels \"Year 1\",\"Year 4\": 1 1 1 1 1 2 2 2 2 2 ...\n $ Treatment       : Factor w/ 3 levels \"burnt\",\"mown\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ Plot.type       : Factor w/ 2 levels \"fenced\",\"open\": 1 1 1 1 1 1 1 1 1 1 ...\n $ Species.richness: int  45 49 44 52 43 37 42 36 46 38 ...\n\naov.deer <- aov(Species.richness ~ Year * Treatment * Plot.type, data = Riesch)\nplot_model(aov.deer, type = \"pred\", terms = c(\"Year\", \"Treatment\", \"Plot.type\"))"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#korrelationen",
    "href": "stat1-4/Statistik2_Demo.html#korrelationen",
    "title": "Stat2: Demo",
    "section": "Korrelationen",
    "text": "Korrelationen\n\n##Korrelationen und Regressionen\n\n# Datensatz zum Einfluss von Stickstoffdepositionen auf den Pflanzenartenreichtum\ndf <- read.delim(\"datasets/statistik/Nitrogen.csv\", sep=\";\")\nsummary(df)\n\n  N.deposition   Species.richness\n Min.   : 2.00   Min.   :12.0    \n 1st Qu.: 9.00   1st Qu.:17.5    \n Median :20.00   Median :21.0    \n Mean   :20.53   Mean   :20.2    \n 3rd Qu.:30.50   3rd Qu.:23.0    \n Max.   :55.00   Max.   :28.0    \n\n#Plotten der Beziehung\nplot(Species.richness~N.deposition, data = df)\n\n\n\n#Load library\nif(!require(car)){install.packages(\"car\")}\nlibrary(car)\n\n#Daten anschauen\nscatterplot(Species.richness~N.deposition, data = df)\n\n\n\n\n\n#Korrelationen\ncor.test(df$Species.richness, df$N.deposition, method = \"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  df$Species.richness and df$N.deposition\nt = -5.2941, df = 13, p-value = 0.0001453\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n -0.9405572 -0.5450218\nsample estimates:\n       cor \n-0.8265238 \n\ncor.test(df$N.deposition, df$Species.richness, method = \"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  df$N.deposition and df$Species.richness\nt = -5.2941, df = 13, p-value = 0.0001453\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n -0.9405572 -0.5450218\nsample estimates:\n       cor \n-0.8265238 \n\ncor.test(df$Species.richness, df$N.deposition, method = \"spearman\")\n\n\n    Spearman's rank correlation rho\n\ndata:  df$Species.richness and df$N.deposition\nS = 1015.5, p-value = 0.0002259\nalternative hypothesis: true rho is not equal to 0\nsample estimates:\n       rho \n-0.8133721 \n\ncor.test(df$Species.richness, df$N.deposition, method = \"kendall\") \n\n\n    Kendall's rank correlation tau\n\ndata:  df$Species.richness and df$N.deposition\nz = -3.308, p-value = 0.0009398\nalternative hypothesis: true tau is not equal to 0\nsample estimates:\n      tau \n-0.657115 \n\n#Jetzt als Regression\nlm <- lm(Species.richness~N.deposition, data = df)\nanova(lm) #ANOVA-Tabelle, 1. Möglichkeit\n\nAnalysis of Variance Table\n\nResponse: Species.richness\n             Df Sum Sq Mean Sq F value    Pr(>F)    \nN.deposition  1 233.91 233.908  28.028 0.0001453 ***\nResiduals    13 108.49   8.346                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary.aov(lm) #ANOVA-Tabelle, 2. Möglichkeit\n\n             Df Sum Sq Mean Sq F value   Pr(>F)    \nN.deposition  1  233.9  233.91   28.03 0.000145 ***\nResiduals    13  108.5    8.35                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary(lm) #Regressionskoeffizienten\n\n\nCall:\nlm(formula = Species.richness ~ N.deposition, data = df)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.9184 -1.9992  0.4493  2.0015  4.6081 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  25.60502    1.26440  20.251 3.25e-11 ***\nN.deposition -0.26323    0.04972  -5.294 0.000145 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.889 on 13 degrees of freedom\nMultiple R-squared:  0.6831,    Adjusted R-squared:  0.6588 \nF-statistic: 28.03 on 1 and 13 DF,  p-value: 0.0001453\n\n#Signifikantes Ergebnis visualisieren\nplot(Species.richness~N.deposition, data = df)\nabline(lm)"
  },
  {
    "objectID": "stat1-4/Statistik2_Demo.html#beispiele-modelldiagnostik",
    "href": "stat1-4/Statistik2_Demo.html#beispiele-modelldiagnostik",
    "title": "Stat2: Demo",
    "section": "Beispiele Modelldiagnostik",
    "text": "Beispiele Modelldiagnostik\n\npar(mfrow=c(2, 2)) #4 Plots in einem Fenster\nplot(lm(b~a))\n\n\n\n\nAbbildung 17.9: Generierter Plot\n\n\n\n\n\n#Load library\nif(!require(ggfortify)){install.packages(\"ggfortify\")}\nlibrary(ggfortify)\n\nautoplot(lm(b~a))\n\n# Modellstatistik nicht OK\ng <- c(20, 19, 25, 10, 8, 15, 13, 18, 11, 14, 25, 39, 38, 28, 24)\nh <- c(12, 15, 10, 7, 8, 10, 12, 11, 13, 10, 25, 12, 30, 26, 13)\npar(mfrow = c(1, 1))\n\nplot(h~g,xlim = c(0, 40), ylim = c(0, 30))\nabline(lm(h~g))\n\npar(mfrow = c(2, 2))\nplot(lm(h~g))\n\n\n\n\nAbbildung 17.10: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 17.11: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 17.12: Generierter Plot\n\n\n\n\n\n# Modelldiagnostik mit ggplot\ndf <- data.frame(g, h)\nggplot(df, aes(x = g, y = h)) + \n    # scale_x_continuous(limits = c(0,25)) +\n    # scale_y_continuous(limits = c(0,25)) +\n    geom_point() +\n    geom_smooth( method = \"lm\", color = \"black\", size = .5, se = F) + \n    theme_classic()\n\n\n\npar(mfrow=c(2, 2))\nautoplot(lm(h~g))"
  },
  {
    "objectID": "stat1-4/Statistik2_Uebung.html",
    "href": "stat1-4/Statistik2_Uebung.html",
    "title": "Stat2: Übung",
    "section": "",
    "text": "lauffähiges R-Skript\nbegründeter Lösungsweg (Kombination aus R-Code, R Output und dessen Interpretation)\nausformulierter Methoden- und Ergebnisteil (für eine wiss.Arbeit).\n\n\nBitte erklärt und begründet die einzelnen Schritte, die ihr unternehmt, um zu eurem Ergebnis zu kommen. Dazu erstellt bitte ein Word-Dokument (oder ein z.B. mit Quarto generiertes pdf- oder html-Dokument), in dem ihr Schritt für Schritt den verwendeten R-Code, die dazu gehörigen Ausgaben von R, eure Interpretation derselben und die sich ergebenden Schlussfolgerungen für das weitere Vorgehen dokumentiert.\nDieser Ablauf sollte insbesondere beinhalten:\n\nÜberprüfen der Datenstruktur nach dem Einlesen, welches sind die abhängige(n) und welches die unabängige(n) Variablen etc.\nExplorative Datenanalyse, um zu sehen, ob evtl. Dateneingabefehler vorliegen oder Datentransformationen vorgenommen werden sollten\nAuswahl und Begründung eines statistischen Verfahrens\nBestimmung des vollständigen/maximalen Models\nSelektion des/der besten Models/Modelle\nDurchführen der Modelldiagnostik für dieses\nGenerieren aller Zahlen, Statistiken und Tabellen, die für eine wiss. Ergebnisdarstellung benötigt werden\n\nFormuliert abschliessend einen Methoden- und Ergebnisteil (ggf. incl. adäquaten Abbildungen/Tabellen) zu dieser Untersuchung in der Form einer wissenschaftlichen Arbeit (je einen ausformulierten Absatz von ca. 60-100 Worten bzw. 3-8 Sätzen). Alle wichtigen Informationen sollten enthalten sein, unnötige Redundanz dagegen vermieden werden.\n\n\nÜbung 2.1: Regression\nRegressionsanalyse mit SAR.csv\nDer Datensatz beschreibt die Zunahme der Artenzahlen (richness) von Pflanzen in Trockenrasen der Schweiz in Abhängigkeit von der Probeflächengrösse (area, hier in m²). Diese Beziehung bezeichnet man als Artenzahl-Areal-Kurve (Species-area relationship = SAR).\n\nLadet den Datensatz in R und macht eine explorative Datenanalyse.\nWählt unter den schon gelernten Methoden der Regressionsanalyse ein adäquates Vorgehen zur Analyse dieser Daten und führt diese dann durch.\nPrüft anhand der Residuen, ob die Modellvoraussetzungen erfüllt waren\nFalls die Modelldiagnostik negativ ausfällt, überlegt, welche Datentransformation helfen könnte, und rechnet neue Modelle mit einer oder ggf. mehreren Datentransformationen, bis ihr eine statistisch zufriedenstellende Lösung gefunden habt.\nStellt die erhaltenen Ergebnisse angemessen dar (Text, Abbildung und/oder Tabelle).\nKennt ihr ggf. noch eine andere geeignete Herangehensweise?\n\n\n\nÜbung 2.2: Einfaktorielle ANOVA\nANOVA mit Datensatz_novanimal_Uebung_Statistik2.2.csv\nFührt mit dem Datensatz novanimal.csv eine einfaktorielle ANOVA durch. Gibt es Unterschiede zwischen der Anzahl verkaufter Gerichte “tot_sold” (Buffet, Fleisch oder Vegetarisch) pro Woche?\n\n\nÜbung 2.3N: Mehrfaktorielle ANOVA (NatWis)\nANOVA mit kormoran.csv\nDer Datensatz enthält 40 Beobachtungen zu Tauchzeiten zweier Kormoranunterarten (C = Phalocrocorax carbo carbo und S = Phalacrocorax carbo sinensis) aus vier Jahreszeiten (F = Frühling, S = Sommer, H = Herbst, W = Winter).\n\nLest den Datensatz nach R ein und führt eine adäquate Analyse durch, um beantworten zu können, wie Unterart und Jahreszeit die Tauchzeit beeinflussen.\nStellt eure Ergebnisse dann angemessen dar (Text mit Abbildung und/oder Tabelle).\nGibt es eine Interaktion?\n\n\n\nÜbung 2.3S: Mehrfaktorielle ANOVA mit Interaktion (SozWis)\nMANOVA mit Datensatz_novanimal_Uebung_Statistik2.3.csv\nIn der Mensa gibt es zwei unterschiedliche Preisniveaus bzgl. den Gerichten: eine preisgünstigere Menülinie (“World” & “Favorite”) und eine teuere Menülinie (“Kitchen”). Gibt es Unterschiede zwischen dem Kauf von preisgünstigeren resp. teureren Menülinien betreffend Menüinhalt & Hochschulzugehörigkeit?"
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_Beispiel.html",
    "href": "stat1-4/Statistik2_Loesung_Beispiel.html",
    "title": "Stat2: Lösung Beispiel",
    "section": "",
    "text": "Download dieses Lösungsscript via “</>Code” (oben rechts)\nLösungstext als Download\n\n\n\n(hier so ausführlich formuliert, wie dies auch in der Klausur der Fall sein wird)\n\nLaden Sie den Datensatz decay.csv. Dieser enthält die Zahl radioaktiver Zerfälle pro Zeiteinheit (amount) für Zeitpunkte (time) nach dem Start des Experimentes.\nErmitteln Sie ein statistisches Modell, dass die Zerfallshäufigkeit in Abhängigkeit von der Zeit beschreibt.\nBitte erklären und begründen Sie die einzelnen Schritte, die Sie unternehmen, um zu diesem Ergebnis zu kommen. Dazu erstellen Sie bitte ein Word-Dokument (oder ein z.B. mit Quarto generiertes pdf- oder html-Dokument), in das Sie Schritt für Schritt den verwendeten R-Code, die dazu gehörigen Ausgaben von R, Ihre Interpretation derselben und die sich ergebenden Schlussfolgerungen für das weitere Vorgehen dokumentieren.\nDieser Ablauf sollte insbesondere beinhalten:\n\nÜberprüfen der Datenstruktur nach dem Einlesen, welches sind die abhängige(n) und welches die unabhängige(n) Variablen\nExplorative Datenanalyse, um zu sehen, ob evtl. Dateneingabefehler vorliegen oder Datentransformationen vorgenommen werden sollten\nAuswahl und Begründung eines statistischen Verfahrens (es gibt hier mehrere statistisch korrekte Möglichkeiten!)\nErmittlung eines Modells\nDurchführen der Modelldiagnostik für das gewählte Modell\nGenerieren aller Zahlen, Statistiken und Tabellen, die für eine wiss. Ergebnisdarstellung benötigt werden\nFormulieren Sie abschliessend einen Methoden- und Ergebnisteil (ggf. incl. adäquaten Abbildungen) zu dieser Untersuchung in der Form einer wissenschaftlichen Arbeit (ausformulierte schriftliche Zusammenfassung, mit je einem Absatz von ca. 60-100 Worten, resp. 3-8 Sätzen für den Methoden- und Ergebnisteil). D. h. alle wichtigen Informationen sollten enthalten sein, unnötige Redundanz dagegen vermieden werden.\nAbzugeben sind am Ende (a) Ein lauffähiges R-Skript; (b) begründeter Lösungsweg (Kombination aus R-Code, R Output und dessen Interpretation) und (c) ausformulierter Methoden- und Ergebnisteil (für eine wiss. Arbeit)."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_Beispiel.html#kommentierter-lösungsweg",
    "href": "stat1-4/Statistik2_Loesung_Beispiel.html#kommentierter-lösungsweg",
    "title": "Stat2: Lösung Beispiel",
    "section": "Kommentierter Lösungsweg",
    "text": "Kommentierter Lösungsweg\n\nsummary(decay)\n\n      time          amount       \n Min.   : 0.0   Min.   :  8.196  \n 1st Qu.: 7.5   1st Qu.: 21.522  \n Median :15.0   Median : 35.015  \n Mean   :15.0   Mean   : 42.146  \n 3rd Qu.:22.5   3rd Qu.: 57.460  \n Max.   :30.0   Max.   :125.000  \n\nstr(decay)\n\n'data.frame':   31 obs. of  2 variables:\n $ time  : int  0 1 2 3 4 5 6 7 8 9 ...\n $ amount: num  125 100.2 70 83.5 100 ...\n\n\nMan erkennt, dass es 31 Beobachtungen für die Zeit als Integer von Zerfällen gibt, die als rationale Zahlen angegeben werden (dass die Zahl der Zerfälle nicht ganzzahlig ist, deutet darauf hin, dass sie möglicherweise nur in einem Teil des Zeitintervalls oder für einen Teil des betrachteten Raumes gemessen und dann hochgerechnet wurde.)\n\nExplorative Datenanalyse\n\nboxplot(decay$time)\nboxplot(decay$amount)\nplot(amount~time, data=decay)\n\n\n\n\nAbbildung 19.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 19.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 19.3: Generierter Plot\n\n\n\n\nWährend der Boxplot für time wunderbar symmetrisch ohne Ausreisser ist, zeigt amount eine stark rechtsschiefe (linkssteile) Verteilung mit einem Ausreisser. Das deutet schon an, dass ein einfaches lineares Modell vermutlich die Modellannahmen verletzen wird. Auch der einfache Scatterplot zeigt, dass ein lineares Modell wohl nicht adäquat ist. Wir rechnen aber erst einmal weiter.\n\n\nEinfaches lineares Modell\n\nlm.1 <- lm(amount~time, data = decay)\nsummary(lm.1)\n\n\nCall:\nlm(formula = amount ~ time, data = decay)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-19.065 -10.029  -2.058   5.107  40.447 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  84.5534     5.0277   16.82  < 2e-16 ***\ntime         -2.8272     0.2879   -9.82 9.94e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 14.34 on 29 degrees of freedom\nMultiple R-squared:  0.7688,    Adjusted R-squared:  0.7608 \nF-statistic: 96.44 on 1 and 29 DF,  p-value: 9.939e-11\n\n\nDas sieht erst einmal nach einem Supermodell aus, höchstsignifikant und mit einem hohen R² von fast 77%. ABER: wir müssen uns noch die Modelldiagnostik ansehen…\n\n\nModelldiagnostik\n\npar(mfrow = c(2, 2))\nplot(lm.1)\n\n\n\n\nAbbildung 19.4: Generierter Plot\n\n\n\n\nHier zeigen die wichtigen oberen Plots beide massive Abweichungen vom „Soll”. Der Plot oben links zeigt eine „Banane” und beim Q-Q-Plot oben rechts weichen die Punkte rechts der Mitte alle stark nach oben von der Solllinie ab. Wir haben unser Modell also offensichtlich falsch spezifiziert. Um eine Idee zu bekommen, was falsch ist, plotten wir noch, wie das Ergebnis dieses Modells aussähe:\n\n\nErgebnisplot\n\npar(mfrow = c(1, 1))\nplot(decay$time, decay$amount)\nabline(lm.1, col = \"red\")\n\n\n\n\nAbbildung 19.5: Generierter Plot\n\n\n\n\nDie Punkte links liegen alle über der Regressionslinie, die in der Mitte darunter und die ganz rechts wieder systematisch darüber (darum im Diagnostikplot oben die „Banane”). Es liegt also offensichtlich keine lineare Beziehung vor, sondern eine curvilineare.\nUm diese korrekt zu analysieren, gibt es im Prinzip drei Möglichkeiten, wovon am zweiten Kurstag nur eine hatten, während die zweite und dritte in Statistik 3 und 4 folgten. Im Folgenden sind alle drei nacheinander dargestellt (in der Klausur würde es aber genügen, eine davon darzustellen, wenn die Aufgabenstellung wie oben lautet)."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_Beispiel.html#variante-1-log-transformation-der-abängigen-variablen",
    "href": "stat1-4/Statistik2_Loesung_Beispiel.html#variante-1-log-transformation-der-abängigen-variablen",
    "title": "Stat2: Lösung Beispiel",
    "section": "Variante (1): log-Transformation der abängigen Variablen",
    "text": "Variante (1): log-Transformation der abängigen Variablen\nDass die Verteilung der abhängigen Variable nicht normal ist, haben wir ja schon bei der explorativen Datenanalyse am Anfang gesehen. Da sie stark linkssteil ist, zugleich aber keine Nullwerte enthält, bietet sich eine Logarithmustransformation an, hier z. B. mit dem natürlichen Logarithmus.\n\npar(mfrow = c(1, 2))\nboxplot(decay$amount)\nboxplot(log(decay$amount))\nhist(decay$amount)\nhist(log(decay$amount))\n\n\n\n\nAbbildung 19.6: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 19.7: Generierter Plot\n\n\n\n\nDie log-transformierte Variante rechts sieht sowohl im Boxplot als auch im Histogramm viel symmetrischer/besser normalverteilt aus. Damit ergibt sich dann folgendes lineares Modell\n\nlm.2 <- lm(log(amount)~time, data = decay)\nsummary(lm.2)\n\n\nCall:\nlm(formula = log(amount) ~ time, data = decay)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-0.5935 -0.2043  0.0067  0.2198  0.6297 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  4.547386   0.100295   45.34  < 2e-16 ***\ntime        -0.068528   0.005743  -11.93 1.04e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.286 on 29 degrees of freedom\nMultiple R-squared:  0.8308,    Adjusted R-squared:  0.825 \nF-statistic: 142.4 on 1 and 29 DF,  p-value: 1.038e-12\n\n\nJetzt ist der R²-Wert noch höher und der p-Wert noch niedriger als im ursprünglichen linearen Modell ohne Transformation. Das erlaubt aber keine Aussage, da wir Äpfel mit Birnen vergleichen, da die abhängige Variable einmal untransformiert und einmal log-transformiert ist. Entscheidend ist die Modelldiagnostik.\n\nModelldiagnostik\n\npar(mfrow = c(2, 2))\nplot(lm.2)\n\n\n\n\nAbbildung 19.8: Generierter Plot\n\n\n\n\nDer Q-Q-Plot sieht jetzt exzellent aus, der Plot rechts oben hat kaum noch eine Banane, nur noch einen leichten Keil. Insgesamt deutlich besser und auf jeden Fall ein statistisch korrektes Modell.\nLösungen 2 und 3 greifen auf Methoden von Statistik 3 und 4 zurück, sie sind hier nur zum Vergleich angeführt"
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_Beispiel.html#variante-2-quadratische-regression",
    "href": "stat1-4/Statistik2_Loesung_Beispiel.html#variante-2-quadratische-regression",
    "title": "Stat2: Lösung Beispiel",
    "section": "Variante (2): Quadratische Regression",
    "text": "Variante (2): Quadratische Regression\n(kommt erst in Statistik 3) könnte für die Datenverteilung passen, entspricht aber nicht der physikalischen\n\nGesetzmässigkeit\n\nmodel.quad <- lm(amount~time + I(time^2), data=  decay)\nsummary(model.quad)\n\n\nCall:\nlm(formula = amount ~ time + I(time^2), data = decay)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-22.302  -6.044  -1.603   4.224  20.581 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 106.38880    4.65627  22.849  < 2e-16 ***\ntime         -7.34485    0.71844 -10.223 5.90e-11 ***\nI(time^2)     0.15059    0.02314   6.507 4.73e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 9.205 on 28 degrees of freedom\nMultiple R-squared:  0.908, Adjusted R-squared:  0.9014 \nF-statistic: 138.1 on 2 and 28 DF,  p-value: 3.122e-15\n\n\nHier können wir R² mit dem ursprünglichen Modell vergleichen (beide haben amount als abhängige Grösse) und es sieht viel besser aus. Sowohl der lineare als auch der quadratische Term sind hochsignifikant. Sicherheitshalber vergleichen wir die beiden Modelle aber noch mittels ANOVA.\n\n\nVergleich mit dem einfachen Modell mittels ANOVA (es ginge auch AICc)\n\nanova(lm.1, model.quad)\n\nAnalysis of Variance Table\n\nModel 1: amount ~ time\nModel 2: amount ~ time + I(time^2)\n  Res.Df    RSS Df Sum of Sq      F    Pr(>F)    \n1     29 5960.6                                  \n2     28 2372.6  1    3588.1 42.344 4.727e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nIn der Tat ist das komplexere Modell (jenes mit dem quadratischen Term) höchstsignifikant besser. Jetzt brauchen wir noch die Modelldiagnostik.\n\n\nModelldiagnostik\n\npar(mfrow = c(2, 2))\nplot(model.quad)\n\n\n\n\nAbbildung 19.9: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_Beispiel.html#variante-3-nicht-lineare-regression",
    "href": "stat1-4/Statistik2_Loesung_Beispiel.html#variante-3-nicht-lineare-regression",
    "title": "Stat2: Lösung Beispiel",
    "section": "Variante (3): Nicht lineare Regression",
    "text": "Variante (3): Nicht lineare Regression\n(die beste, hatten wir aber am 2. Tag noch nicht; mit Startwerten muss man ggf. ausprobieren) mit Startwerten muss man ggf. ausprobieren\n\nmodel.nls <- nls(amount~a*exp(-b*time), start=(list(a = 100, b = 1)),data = decay)\nsummary(model.nls)\n\n\nFormula: amount ~ a * exp(-b * time)\n\nParameters:\n   Estimate Std. Error t value Pr(>|t|)    \na 1.081e+02  4.993e+00   21.66  < 2e-16 ***\nb 8.019e-02  5.833e-03   13.75 3.12e-14 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 9.243 on 29 degrees of freedom\n\nNumber of iterations to convergence: 8 \nAchieved convergence tolerance: 7.966e-06\n\n\n\nModelldiagnostik\n\nif(!require(nlstools)){install.packages(\"nlstools\")}\nlibrary(nlstools)\nresiduals.nls <- nlsResiduals(model.nls)\nplot(residuals.nls)\n\n\n\n\nAbbildung 19.10: Generierter Plot\n\n\n\n\nFür nls kann man nicht den normalen Plotbefehl für die Residualdiagnostik nehmen, sondern verwendet das Äquivalent aus nlstools. Die beiden entscheidenden Plots sind jetzt links oben und rechts unten. Der QQ-Plot hat im unteren Bereich einen kleinen Schönheitsfehler, aber ansonsten ist alles OK."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_Beispiel.html#ergebnisplots",
    "href": "stat1-4/Statistik2_Loesung_Beispiel.html#ergebnisplots",
    "title": "Stat2: Lösung Beispiel",
    "section": "Ergebnisplots",
    "text": "Ergebnisplots\nDa alle drei Lösungen zumindest statistisch OK waren, sollen jetzt noch die zugehörigen Ergebnisplots erstellt werden.\n\npar(mfrow = c(1, 1))\nxv <- seq(0, 30, 0.1)\n\n\nlineares Modell mit log-transformierter Abhängiger\n\n\nplot(decay$time, decay$amount)\nyv1 <- exp(predict(lm.2, list(time = xv)))\nlines(xv, yv1, col = \"red\")\n\n\n\n\nAbbildung 19.11: Generierter Plot\n\n\n\n\n\nquadratisches Modell\n\n\nplot(decay$time, decay$amount)\nyv2 <- predict(model.quad, list(time = xv))\nlines(xv, yv2, col=  \"blue\")\n\n\n\n\nAbbildung 19.12: Generierter Plot\n\n\n\n\n\nnicht-lineares Modell\n\n\nplot(decay$time, decay$amount)\nyv3 <- predict(model.nls, list(time = xv))\nlines(xv, yv3, col = \"green\")\n\n\n\n\nAbbildung 19.13: Generierter Plot\n\n\n\n\nOptisch betrachtet, geben (2) und (3) den empirischen Zusammenhang etwas besser wieder als (1), da sie im linken Bereich die hohen Werte besser treffen. Man könnte sogar meinen, bei Betrachtung der Daten, dass die Werte ab time = 28 wieder leicht ansteigen, was die quadratische Funktion wiedergibt. Wer sich aber mit Physik etwas auskennt, weiss, dass Version (2) physikalisch nicht zutrifft, da die Zerfallsrate mit der Zeit immer weiter abfällt. Aufgrund der kurzen Messreihe wäre eine quadratische Funktion trotzdem eine statistisch korrekte Interpretation. Mit längeren Messreihen würde sich jedoch schnell zeigen, dass sie nicht zutrifft."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_1.html",
    "href": "stat1-4/Statistik2_Loesung_1.html",
    "title": "Stat2: Lösung 2.1",
    "section": "",
    "text": "Download dieses Lösungsscript via “</>Code” (oben rechts)\nLösungstext als Download"
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_1.html#daten-einlesen-und-exlporieren",
    "href": "stat1-4/Statistik2_Loesung_1.html#daten-einlesen-und-exlporieren",
    "title": "Stat2: Lösung 2.1",
    "section": "Daten einlesen und exlporieren",
    "text": "Daten einlesen und exlporieren\n\nSAR <- read.delim(\"datasets/statistik/SAR.csv\", sep = \";\") # Daten einlesen\nhead(SAR) # Daten anschauen\n\n   area richness\n1 1e-04        2\n2 1e-03        4\n3 1e-02        4\n4 1e-01       10\n5 1e+00       26\n6 1e+01       37\n\nstr(SAR) # Datenformat überprüfen\n\n'data.frame':   156 obs. of  2 variables:\n $ area    : num  1e-04 1e-03 1e-02 1e-01 1e+00 1e+01 1e-04 1e-03 1e-02 1e-01 ...\n $ richness: int  2 4 4 10 26 37 2 5 11 15 ...\n\n\n\nsummary(SAR) # Überblick verschaffen\n\n      area             richness    \n Min.   :  0.0001   Min.   : 1.00  \n 1st Qu.:  0.0010   1st Qu.: 4.00  \n Median :  0.1000   Median : 9.00  \n Mean   :  9.4017   Mean   :16.37  \n 3rd Qu.:  1.0000   3rd Qu.:24.00  \n Max.   :100.0000   Max.   :85.00  \n\n\n\nboxplot(SAR$area) # Boxplot der Flächengrösse\n\n\n\n\n-> Erklärende Variable extrem rechtsschief.\n\nboxplot(SAR$richness) # Boxplot der Artenzahl\n\n\n\n\n-> Auch abhängige Variable extrem rechtsschief.\n\nplot(richness~area, data = SAR) # Daten plotten\n\n\n\n\n-> Zusammenhang sieht nicht linear aus.\nFazit Datenexploration: Sowohl die abhängige als auch die unabhängige Variable sind extrem rechtsschief verteilt und ihr Zusammenhang sieht nicht linear aus. Die Voraussetzungen für ein lineares Modell sehen also schlecht aus. Um diese Vermutung zu überprüfen, wird im Folgenden ein Lineares Modell mit anschliessender Modelldiagnostik gerechnet."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_1.html#einfaches-lineares-modell-mit-modelldiagnostik",
    "href": "stat1-4/Statistik2_Loesung_1.html#einfaches-lineares-modell-mit-modelldiagnostik",
    "title": "Stat2: Lösung 2.1",
    "section": "Einfaches lineares Modell mit Modelldiagnostik",
    "text": "Einfaches lineares Modell mit Modelldiagnostik\n\nlm.1 <- lm(richness~area, data = SAR) # lm erstellen\nsummary(lm.1) # lm anschauen\n\n\nCall:\nlm(formula = richness ~ area, data = SAR)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-29.567  -8.474  -3.503   6.112  35.317 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  11.4742     0.9582   11.97   <2e-16 ***\narea          0.5209     0.0342   15.23   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 11.27 on 154 degrees of freedom\nMultiple R-squared:  0.601, Adjusted R-squared:  0.5984 \nF-statistic: 231.9 on 1 and 154 DF,  p-value: < 2.2e-16\n\n\n-> Zwar hochsignifikant, aber stimmen die Voraussetzungen?\n\n# Modell und Daten plotten\nplot(SAR$area, SAR$richness, xlab = \"Area [m²]\", ylab = \"Species richness\") # Daten plotten\nabline(lm.1, col = \"red\") # Modell plotten\n\n\n\n\n-> Eine Gerade scheint ein schlechtes Modell zu sein für die Daten.\n\n# Modelldiagnostik\npar(mfrow = c(2, 2)) # 4-Plot-panel\nplot(lm.1) \n\n\n\n\n-> Auch Modelldiagnostikplots sehen schlecht aus.\nFazit lm: Wie erwartet sind die Modellvoraussetzungen nicht gut erfüllt: Das geplottete Modell verläuft teils auffällig “neben den Daten”, im Residuals vs. Fittet Plot zeigen die Residuen Trichter- und Bananenform und der Q-Q-Plot zeigt starke Abweichung der Residuen von Normalverteilung. Da drängt sich Datentransformation auf. Als nächstes wird darum Log10-Transformation ausprobiert."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_1.html#lösung-a-log-transformation-der-abhängigen-variablen",
    "href": "stat1-4/Statistik2_Loesung_1.html#lösung-a-log-transformation-der-abhängigen-variablen",
    "title": "Stat2: Lösung 2.1",
    "section": "Lösung A: log-Transformation der abhängigen Variablen",
    "text": "Lösung A: log-Transformation der abhängigen Variablen\n\n# Daten vor und nach log10-Transformation vergleichen\npar(mfrow=c(2,2))\nboxplot(SAR$richness)\nboxplot(log10(SAR$richness))\nhist(SAR$richness)\nhist(log10(SAR$richness))\n\n\n\n\n-> Tansformation zeigt den gewünschten Effekt.\n\n# lm rechnen mit log10 transformierter abhängigen Variable\nSAR$log_richness <- log10(SAR$richness)\nlm.2 <- lm(log_richness~area, data = SAR)\nsummary(lm.2)\n\n\nCall:\nlm(formula = log_richness ~ area, data = SAR)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.85613 -0.34114 -0.01204  0.36365  0.75729 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 0.856116   0.036657   23.36  < 2e-16 ***\narea        0.010259   0.001309    7.84 6.94e-13 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4313 on 154 degrees of freedom\nMultiple R-squared:  0.2853,    Adjusted R-squared:  0.2806 \nF-statistic: 61.47 on 1 and 154 DF,  p-value: 6.939e-13\n\n\n-> Zwar hochsignifikant, aber stimmen die Voraussetzungen??\n\n# Modelldiagnostik\npar(mfrow = c(2, 2))\nplot(lm.2)\n\n\n\n\n-> Modelldiagnostikplots sehen noch schlechter aus als mit untransformierten Daten!\nFazit Lösung A: log-Transformation der abhängigen Variablen hat das Modell nicht verbessert. Im Gegebteil… Als nächstes wird darum eine zusätzlichge Log10-Transformation der Abhängigen Variablen ausprobiert."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_1.html#lösung-b-log-transformation-beider-variablen",
    "href": "stat1-4/Statistik2_Loesung_1.html#lösung-b-log-transformation-beider-variablen",
    "title": "Stat2: Lösung 2.1",
    "section": "Lösung B: log-Transformation beider Variablen",
    "text": "Lösung B: log-Transformation beider Variablen\n\n# Daten vor und nach log10-Transformation vergleichen\npar(mfrow=c(2,2))\nboxplot(SAR$area)\nboxplot(log10(SAR$area))\nhist(SAR$area)\nhist(log10(SAR$area))\n\n\n\n\n-> Tansformation zeigt den gewünschten Effekt.\n\n# lm rechnen mit log10-Transformation beider VAriablen\nSAR$log_area <- log10(SAR$area)\nlm.3 <- lm(log_richness~log_area, data = SAR)\nsummary(lm.3)\n\n\nCall:\nlm(formula = log_richness ~ log_area, data = SAR)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.50241 -0.09353  0.02130  0.09965  0.40068 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 1.265730   0.015607   81.10   <2e-16 ***\nlog_area    0.254440   0.006926   36.73   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.1633 on 154 degrees of freedom\nMultiple R-squared:  0.8976,    Adjusted R-squared:  0.8969 \nF-statistic:  1349 on 1 and 154 DF,  p-value: < 2.2e-16\n\n\n-> Zwar hochsignifikant, aber stimmen die Voraussetzungen??\n\n# Modelldiagnostik\npar(mfrow = c(2, 2))\nplot(lm.3)\n\n\n\n\n-> Das sieht jetzt vergleichsweise sehr gut aus! (Bis auf ein paar Aussreisser)\n\n# Modell und Daten plotten\nplot(SAR$log_area, SAR$log_richness, xlab = \"log10(Area [m²])\", ylab = \"log10(Species richness)\") # Daten plotten\nabline(lm.3, col = \"red\") # Modell plotten\n\n\n\n\n-> Das Modell bildet die Daten gut ab.\nFazit Lösung B: Ein lineares Modell mit log-Transformation der unabhängigen und der abhängigen Variablen scheint die Daten am besten abzubilden. Abschliessend sollen nun die drei Modelle in einem Plot dargestellt werden."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_1.html#darstellung-der-drei-modelle",
    "href": "stat1-4/Statistik2_Loesung_1.html#darstellung-der-drei-modelle",
    "title": "Stat2: Lösung 2.1",
    "section": "Darstellung der drei Modelle",
    "text": "Darstellung der drei Modelle\n\n# Input-Vektor mit x-Werten für die Modelle erstellen, der die Bandbreite der Daten abdeckt\nxv <- seq(min(SAR$area), max(SAR$area), 0.1)\n\n\nplot(SAR$area, SAR$richness)# Daten plotten\nabline(lm.1, col=\"red\") # Modell 1 (untransformiert) zu Plot hinzufügen\n\n# Modell 2 (Anhängige Variable log10-transformiert) \n# Modellvoraussagen berechnen\nlogyvlm2 <- predict(lm.2, list(area = xv)) \n# Modellvoraussagen rücktransformieren\nyvlm2 <- 10^logyvlm2 # 10^ ist Umkekrfunktion von Log10\n# Zu Plot hinzufügen\nlines(xv, yvlm2, col = \"blue\") # Modell 2 auf untransformierte Fläche plotten\n\n\n# Modell 2 (beide Variablen log10-transformiert) \n# Modellvoraussagen berechnen\nlog10xv <- log10(xv) # Tansformierter Input-Vektor erstellen\nlogyvlm3 <- predict(lm.3, list(log_area = log10xv ))\n# Modellvoraussagen rücktransformieren \nyvlm3 <- 10^logyvlm3 # 10^ ist Umkekrfunktion von Log10\nlines(xv, yvlm3, col = \"green\") # Modell 2 auf untransformierte Fläche plotten\n\n\n\n\n--> Auch hier lässt sich bestätigen dass Modell lm2 (blau) die Daten am schlechtesten und Modell lm3 (grün) die Daten am besten abbildet."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_2223s.html",
    "href": "stat1-4/Statistik2_Loesung_2223s.html",
    "title": "Stat2: Lösung 2.2 & 2.3S",
    "section": "",
    "text": "Download dieses Lösungsscript via “</>Code” (oben rechts)"
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_2223s.html#musterlösung-übung-2.2",
    "href": "stat1-4/Statistik2_Loesung_2223s.html#musterlösung-übung-2.2",
    "title": "Stat2: Lösung 2.2 & 2.3S",
    "section": "Musterlösung Übung 2.2",
    "text": "Musterlösung Übung 2.2\n\nKommentierter Lösungsweg\n\n\n\n\n#lade die Daten\ndf <- readr::read_csv2(\"datasets/statistik/Datensatz_novanimal_Uebung_Statistik2.1.csv\")\n\n# überprüft die Voraussetzungen für eine ANOVA\n# Schaut euch die Verteilungen der Mittelwerte an (plus Standardabweichungen)\n# Sind Mittelwerte nahe bei Null? \n# Gäbe uns einen weiteren Hinweis auf eine spezielle Binomail-Verteilung \naggregate(tot_sold ~ label_content, data = df, FUN = function(x) c(mn = mean(x), n = sd(x) ))\n\n  label_content tot_sold.mn tot_sold.n\n1       Fleisch  1135.58333  200.03384\n2  Hot and Cold   308.33333   23.53077\n3   Vegetarisch   739.25000  213.54204\n\n# Boxplot\nggplot(df, aes(x = label_content, y= tot_sold)) +\n  # Achtung: Reihenfolge spielt hier eine Rolle!\n  stat_boxplot(geom = \"errorbar\", width = 0.25) +\n  geom_boxplot(fill=\"white\", color = \"black\", size = 1, width = .5) +\n  labs(x = \"\\nMenu-Inhalt\", y = \"Anzahl verkaufte Gerichte pro Woche\\n\") +\n  # achtung erster Hinweis einer Varianzheterogenität, wegen den Hot&Cold Gerichten\n  mytheme\n\n#alternative mit base\nboxplot(df$tot_sold~df$label_content)\n\n# definiert das Modell (vgl. Skript Statistik 2)\nmodel <- aov(tot_sold ~ label_content, data = df)\n\nsummary.lm(model)  \n\n\nCall:\naov(formula = tot_sold ~ label_content, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-290.250 -135.083    1.667  125.500  282.417 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                1135.58      48.92  23.211  < 2e-16 ***\nlabel_contentHot and Cold  -827.25      69.19 -11.956 1.54e-13 ***\nlabel_contentVegetarisch   -396.33      69.19  -5.728 2.15e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 169.5 on 33 degrees of freedom\nMultiple R-squared:  0.8125,    Adjusted R-squared:  0.8012 \nF-statistic: 71.52 on 2 and 33 DF,  p-value: 1.007e-12\n\n# überprüft die Modelvoraussetzungen\npar(mfrow = c(2,2))\nplot(model)\n\n\n\n\nAbbildung 21.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 21.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 21.3: Generierter Plot\n\n\n\n\n Fazit: Inspektion der Modellvoraussetzung zeigt klare Verletzungen des Residualplots (zeigt einen “Trichter”, siehe Skript Statistik 2), D.h. die Voraussetzung der Homoskedastizität sind verletzt. Mögliche nächste Schritte:\n\nMenüinhalt “Buffet” aus der Analyse ausschliessen, da sowieso kein richtiger Menüinhalt (ACHTUNG: Informationsverlust & inhaltiche Begründung für diesen Ausschluss)\nDatentransformation z.B. log-Transformation\nnicht-parametrischer Test (ACHTUNG: auch dieser setzt Voraussetzungen voraus)\nein glm Model (general linear model) mit einer poisson/quasipoisson link Funktion (vgl. Skript Statistik 4), weitere Infos dazu Link \n\n\n# überprüft die Voraussetzungen des Welch-Tests:\n# Gibt es eine hohe Varianzheterogenität und ist die relative Verteilung der \n# Residuen gegeben? (siehe Statistik 2)\n# Ja Varianzheterogenität ist gegeben, aber die Verteilung der Residuen folgt \n# einem \"Trichter\", also keiner \"normalen/symmetrischen\" Verteilung um 0\n# Daher ziehe ich eine Transformation der AV einem nicht-parametrischen Test vor\n# für weitere Infos: \n# https://data.library.virginia.edu/interpreting-log-transformations-in-a-linear-model/\n\n# achtung hier log10, bei Rücktransformation achten\nmodel_log <- aov(log10(tot_sold) ~ label_content, data = df) \npar(mfrow = c(2,2))\nplot(model_log) # scheint ok zu sein\n\nsummary.lm(model_log) # Referenzkategorie ist Fleisch\n\n\nCall:\naov(formula = log10(tot_sold) ~ label_content, data = df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.198920 -0.059343  0.003477  0.062579  0.150567 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                3.04908    0.02585 117.942  < 2e-16 ***\nlabel_contentHot and Cold -0.56121    0.03656 -15.350  < 2e-16 ***\nlabel_contentVegetarisch  -0.19792    0.03656  -5.413 5.45e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.08956 on 33 degrees of freedom\nMultiple R-squared:  0.8802,    Adjusted R-squared:  0.8729 \nF-statistic: 121.2 on 2 and 33 DF,  p-value: 6.238e-16\n\nTukeyHSD(model_log) # (vgl. Statistik 2)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = log10(tot_sold) ~ label_content, data = df)\n\n$label_content\n                               diff        lwr        upr   p adj\nHot and Cold-Fleisch     -0.5612085 -0.6509215 -0.4714955 0.0e+00\nVegetarisch-Fleisch      -0.1979175 -0.2876305 -0.1082044 1.6e-05\nVegetarisch-Hot and Cold  0.3632910  0.2735780  0.4530041 0.0e+00\n\n# Achtung Beta-Werte resp. Koeffinzienten sind nicht direkt interpretierbar\n# sie müssten zuerst wieder zurück transformiert werden, hier ein Beispiel dafür:\n# für Fleisch\n10^model_log$coefficients[1]\n\n(Intercept) \n   1119.655 \n\n# für Hot & Cold,\n10^(model_log$coefficients[1] + model_log$coefficients[2])\n\n(Intercept) \n   307.5216 \n\n# ist equivalent zu\n10^(model_log$coefficients[1]) * 10^(model_log$coefficients[2])\n\n(Intercept) \n   307.5216 \n\n# für Vegi\n10^(model_log$coefficients[1] + model_log$coefficients[3])\n\n(Intercept) \n   709.8501 \n\n\n\n\n\nAbbildung 21.4: Generierter Plot\n\n\n\n\n\nMethoden\nZiel war es, die Unterschiede in den wöchentlichen Verkaufszahlen pro Menüinhalt aufzuzeigen. Da die Responsevariable (Verkaufszahlen) “metrisch” und die Prädiktorvariable kategorial sind, wurde eine einfaktorielle ANOVA gerechnet. Die visuelle Inspektion des Modells zeigte insbesondere schwere Verletzungen der Homoskedastizität. Der Boxplot bestätigt dieser Befund. Weil die Voraussetzungen schwer verletzt sind, wurde eine log-Transformation der Responsevariable vorgenommen. Anschliessend wurde erneut eine ANOVA gerechnet und die Modelvoraussetzungen visuell inspiziert: Homoskedastizität und Normalverteilung der Residuen sind gegeben. Für mehr Informationen zu log-Transformationen und Darstellung der Ergebnisse findet ihr hier\n\n\nErgebnisse\nDie Menüinhalte (Fleisch, Vegetarisch und Buffet) unterscheiden sich in den wöchentlichen Verkaufszahlen signifikant (p < .001). Die Abbildung 1 zeigt die wöchentlichen Verkaufszahlen pro Menüinhalt.\n\n\n\n\n\nAbbildung 21.5: Die wöchentlichen Verkaufzahlen unterscheiden sich je nach Menüinhalt stark. Das Modell wurde mit den log-tranformierten Daten gerechnet."
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_2223s.html#musterlösung-übung-2.3s-sozwis",
    "href": "stat1-4/Statistik2_Loesung_2223s.html#musterlösung-übung-2.3s-sozwis",
    "title": "Stat2: Lösung 2.2 & 2.3S",
    "section": "Musterlösung Übung 2.3S (SozWis)",
    "text": "Musterlösung Übung 2.3S (SozWis)\n\nLese-Empfehlung Kapitel 7 von Manny Gimond\n\n\nKommentierter Lösungsweg\n\n\n  article_description tot_sold.mn tot_sold.n\n1           Fav_World    622.6667   178.7944\n2             Kitchen    128.5000    22.2085\n\n\n\n\n\nAbbildung 21.6: ?(caption)\n\n\n\n\n\n# definiert das Modell (Skript Statistik 2)\nmodel <- aov(tot_sold ~ article_description * member, data = df)\n\nsummary.lm(model)\n\n\nCall:\naov(formula = tot_sold ~ article_description * member, data = df)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-91.00 -17.33   0.50  14.83  83.00 \n\nCoefficients:\n                                             Estimate Std. Error t value\n(Intercept)                                   452.333      9.734   46.47\narticle_descriptionKitchen                   -327.000     13.766  -23.75\nmemberStudierende                             340.667     13.766   24.75\narticle_descriptionKitchen:memberStudierende -334.333     19.469  -17.17\n                                             Pr(>|t|)    \n(Intercept)                                    <2e-16 ***\narticle_descriptionKitchen                     <2e-16 ***\nmemberStudierende                              <2e-16 ***\narticle_descriptionKitchen:memberStudierende   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 33.72 on 44 degrees of freedom\nMultiple R-squared:  0.9864,    Adjusted R-squared:  0.9855 \nF-statistic:  1063 on 3 and 44 DF,  p-value: < 2.2e-16\n\n# überprüft die Modelvoraussetzungen (Statistik 2)\npar(mfrow = c(2,2)) # alternativ gäbe es die ggfortify::autoplot(model) funktion\nplot(model)\n\n\n\n\nAbbildung 21.7: ?(caption)\n\n\n\n\nFazit: Die Inspektion des Modells zeigt kleinere Verletzungen bei der Normalverteilung der Residuen (Q-Q Plot). Aufgrund keiner starken Verbesserung durch eine Transformation der Responsevariable, entscheide ich mich für eine ANOVA ohne log-transformierten Responsevariablen (AV).\n\n# sieht aus, als ob die Voraussetzungen für eine Anova nur geringfügig verletzt sind\n# mögliche alternativen: \n# 0. keine Tranformation der AV (machen wir hier)\n# 1. log-transformation um die grossen werte zu minimieren (nur möglich, wenn \n# keine 0 enthalten sind und die Mittelwerte weit von 0 entfernt sind (bei uns wäre dieser Fall erfüllt)\n# => bei Zähldaten ist dies leider nicht immer gegeben)\n# 2. nicht parametrische Test z.B. Welch-Test, wenn hohe Varianzheterogenität \n# zwischen den Residuen\n\n#0) keine Tranformation\n# post-hov Vergleiche\nTukeyHSD(model)\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = tot_sold ~ article_description * member, data = df)\n\n$article_description\n                       diff      lwr       upr p adj\nKitchen-Fav_World -494.1667 -513.785 -474.5484     0\n\n$member\n                           diff      lwr      upr p adj\nStudierende-Mitarbeitende 173.5 153.8817 193.1183     0\n\n$`article_description:member`\n                                                     diff        lwr        upr\nKitchen:Mitarbeitende-Fav_World:Mitarbeitende -327.000000 -363.75650 -290.24350\nFav_World:Studierende-Fav_World:Mitarbeitende  340.666667  303.91017  377.42317\nKitchen:Studierende-Fav_World:Mitarbeitende   -320.666667 -357.42317 -283.91017\nFav_World:Studierende-Kitchen:Mitarbeitende    667.666667  630.91017  704.42317\nKitchen:Studierende-Kitchen:Mitarbeitende        6.333333  -30.42317   43.08983\nKitchen:Studierende-Fav_World:Studierende     -661.333333 -698.08983 -624.57683\n                                                  p adj\nKitchen:Mitarbeitende-Fav_World:Mitarbeitende 0.0000000\nFav_World:Studierende-Fav_World:Mitarbeitende 0.0000000\nKitchen:Studierende-Fav_World:Mitarbeitende   0.0000000\nFav_World:Studierende-Kitchen:Mitarbeitende   0.0000000\nKitchen:Studierende-Kitchen:Mitarbeitende     0.9672944\nKitchen:Studierende-Fav_World:Studierende     0.0000000\n\n#1) Alterativ: log-transformation\nmodel_log <- aov(log10(tot_sold) ~ article_description * member, data = df)\n\nsummary.lm(model_log) # interaktion ist nun nicht mehr signifikant: vgl. \n\n\nCall:\naov(formula = log10(tot_sold) ~ article_description * member, \n    data = df)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.191372 -0.025043  0.003191  0.037604  0.182842 \n\nCoefficients:\n                                             Estimate Std. Error t value\n(Intercept)                                   2.65417    0.01696 156.533\narticle_descriptionKitchen                   -0.56517    0.02398 -23.569\nmemberStudierende                             0.24438    0.02398  10.191\narticle_descriptionKitchen:memberStudierende -0.21726    0.03391  -6.407\n                                             Pr(>|t|)    \n(Intercept)                                   < 2e-16 ***\narticle_descriptionKitchen                    < 2e-16 ***\nmemberStudierende                            3.71e-13 ***\narticle_descriptionKitchen:memberStudierende 8.51e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.05874 on 44 degrees of freedom\nMultiple R-squared:  0.9745,    Adjusted R-squared:  0.9728 \nF-statistic: 561.4 on 3 and 44 DF,  p-value: < 2.2e-16\n\n# nochmals euren Boxplot zu beginn, machen diese Koeffizienten sinn?\n\n# überprüft die Modelvoraussetzungen (vgl. Skript Statistik 2)\n# bringt aber keine wesentliche Verbesserung, daher bleibe ich bei den \n# untranfromierten Daten\npar(mfrow = c(2,2))\nplot(model_log)\n\n# post-hov Vergleiche\nTukeyHSD(model_log) # gibt sehr ähnliche Resultate im Vergleich zum nicht-transformierten Model\n\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = log10(tot_sold) ~ article_description * member, data = df)\n\n$article_description\n                        diff        lwr        upr p adj\nKitchen-Fav_World -0.6738029 -0.7079755 -0.6396302     0\n\n$member\n                               diff       lwr       upr p adj\nStudierende-Mitarbeitende 0.1357518 0.1015791 0.1699244     0\n\n$`article_description:member`\n                                                     diff         lwr\nKitchen:Mitarbeitende-Fav_World:Mitarbeitende -0.56517128 -0.62919652\nFav_World:Studierende-Fav_World:Mitarbeitende  0.24438333  0.18035809\nKitchen:Studierende-Fav_World:Mitarbeitende   -0.53805110 -0.60207634\nFav_World:Studierende-Kitchen:Mitarbeitende    0.80955461  0.74552937\nKitchen:Studierende-Kitchen:Mitarbeitende      0.02712017 -0.03690507\nKitchen:Studierende-Fav_World:Studierende     -0.78243444 -0.84645968\n                                                      upr     p adj\nKitchen:Mitarbeitende-Fav_World:Mitarbeitende -0.50114604 0.0000000\nFav_World:Studierende-Fav_World:Mitarbeitende  0.30840857 0.0000000\nKitchen:Studierende-Fav_World:Mitarbeitende   -0.47402586 0.0000000\nFav_World:Studierende-Kitchen:Mitarbeitende    0.87357985 0.0000000\nKitchen:Studierende-Kitchen:Mitarbeitende      0.09114541 0.6726112\nKitchen:Studierende-Fav_World:Studierende     -0.71840920 0.0000000\n\n\n\n\n\nAbbildung 21.8: ?(caption)\n\n\n\n\n\nMethode\nZiel war es die Unterschiede zwischen den preisgünstigeren und teureren Menülinien und der Hochschulzugehörigkeit herauszufinden: Hierfür wurde eine ANOVA mit Interaktion gerechnet, da wir eine (quasi)-metrische Responsevariable und zwei Prädiktorvariablen (Menülinie und Hochschulzugehörigkeit) haben.\nDie Voraussetzungen für eine ANOVA waren im ersten Model nicht stark verletzt, lediglich die Normalverteilung der Residuen: Deshalb habe wurde auf eine log-Transformation der Responsevariable verzichtet. Anschliessend wurden noch post-hoc Einzelvergleiche nach Tukey durchgeführt.\nKleiner Exkurs: Verkaufsdaten sind Zähldaten und per se binomial-Verteilt, da es keine negativen Werte geben kann. Ich versuche immer folgende Fragen zu beantworten:\n\nWie weit ist der Mittelwert von “Null entfernt”? -> Wenn ja uns keine Voraussetzungen zur Normalverteilung gibt, kann auch eine Normalverteilung angenommen werden\nBeinhalten die Daten viele “Null’s”? -> Wenn ja muss eine spezielle binomial Verteilung angenommen werden, z.B. negative binomiale Transformation mit GLM (see Skript XY)\n\n\n\nErgebnisse\nDie wöchentlichen Verkaufszahlen der Menülinien unterscheiden sich nach Hochschulzugehörigkeit signifikant (p < .001). Inhaltich bedeutet dies, dass Studierende signifikant häufiger die preisgünstigere Menülinie “Favorite & World” als Mitarbeitende kaufen. Entgegen der Annahme gibt es aber keine signifikanten Unterschiede zwischen Studierende und Mitarbeitende bei dem Kauf der teureren Menülinie “Kitchen”. Über die möglichen Gründe können nur spekuliert werden, hierfür bedarf es weiteren Analysen z.B. mit dem Prädiktor “Menüinhalt”.\n\n\nError in library(multcomp): es gibt kein Paket namens 'multcomp'\n\n\nError in cld(glht(model1, linfct = mcp(cond_label = \"Tukey\"))): konnte Funktion \"cld\" nicht finden\n\n\nError in letters$mcletters: $ operator is invalid for atomic vectors"
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_23n.html",
    "href": "stat1-4/Statistik2_Loesung_23n.html",
    "title": "Stat2: Lösung 2.3N",
    "section": "",
    "text": "Download dieses Lösungsscript via “</>Code” (oben rechts)\nLösungstext als Download\nÜbungsaufgabe (hier so ausführlich formuliert, wie dies auch in der Klausur der Fall sein wird)"
  },
  {
    "objectID": "stat1-4/Statistik2_Loesung_23n.html#kommentierter-lösungsweg",
    "href": "stat1-4/Statistik2_Loesung_23n.html#kommentierter-lösungsweg",
    "title": "Stat2: Lösung 2.3N",
    "section": "Kommentierter Lösungsweg",
    "text": "Kommentierter Lösungsweg\n\n# Working directory muss angepasst werden\nkormoran <- read.delim(\"datasets/statistik/kormoran.csv\", sep = \";\", stringsAsFactors = T)  # \n\n# Ueberpruefen, ob Einlesen richtig funktioniert hat und welche Datenstruktur vorliegt\nstr(kormoran)\n\n'data.frame':   40 obs. of  4 variables:\n $ Obs       : int  1 2 3 4 5 6 7 8 9 10 ...\n $ Tauchzeit : num  9.5 11.9 13.4 13.8 15.3 15.5 15.6 16.7 16.8 18.7 ...\n $ Unterart  : Factor w/ 2 levels \"C\",\"S\": 1 1 1 1 1 1 1 1 1 1 ...\n $ Jahreszeit: Factor w/ 4 levels \"F\",\"H\",\"S\",\"W\": 1 1 1 1 1 3 3 3 3 3 ...\n\nsummary(kormoran)\n\n      Obs          Tauchzeit     Unterart Jahreszeit\n Min.   : 1.00   Min.   : 9.50   C:20     F:10      \n 1st Qu.:10.75   1st Qu.:13.38   S:20     H:10      \n Median :20.50   Median :16.75            S:10      \n Mean   :20.50   Mean   :17.40            W:10      \n 3rd Qu.:30.25   3rd Qu.:20.77                      \n Max.   :40.00   Max.   :30.40                      \n\n\nMan erkennt, dass es sich um einen Dataframe mit einer metrischen (Tauchzeit) und zwei kategorialen (Unterart, Jahreszeit) Variablen handelt. Die adäquate Analyse (1 metrische Abhängige vs. 2 kategoriale Unabhängige) ist damit eine zweifaktorielle ANOVA Die Sortierung der Jahreszeiten (default: alphabetisch) ist inhaltlich aber nicht sinnvoll und sollte angepasst werden.\n\n# Umsortieren der Faktoren, damit sie in den Boxplots eine sinnvolle Reihung haben\nkormoran$Jahreszeit <- ordered(kormoran$Jahreszeit, levels = c(\"F\", \"S\", \"H\", \"W\"))\nkormoran$Jahreszeit\n\n [1] F F F F F S S S S S H H H H H W W W W W F F F F F S S S S S H H H H H W W W\n[39] W W\nLevels: F < S < H < W\n\n# Explorative Datenanalyse (zeigt uns die Gesamtverteilung)\nboxplot(kormoran$Tauchzeit)\n\n\n\n\nAbbildung 22.1: Generierter Plot\n\n\n\n\nDas ist noch OK für parametrische Verfahren (Box ziemlich symmetrisch um Median, Whisker etwas asymmetrisch aber nicht kritisch). Wegen der leichten Asymmetrie (Linksschiefe) könnte man eine log-Transformation ausprobieren.\n\nboxplot(log10(kormoran$Tauchzeit))\n\n\n\n\nAbbildung 22.2: Generierter Plot\n\n\n\n\nDer Gesamtboxplot für log10 sieht perfekt symmetrisch aus, das spräche also für eine log10-Transformation. De facto kommt es aber nicht auf den Gesamtboxplot an, sondern auf die einzelnen.\n\n# Explorative Datenanalyse \n# (Check auf Normalverteilung der Residuen und Varianzhomogenitaet)\nboxplot(Tauchzeit~Jahreszeit * Unterart, data = kormoran)\nboxplot(log10(Tauchzeit)~Jahreszeit * Unterart, data = kormoran)\n\n\n\n\nAbbildung 22.3: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 22.4: Generierter Plot\n\n\n\n\nHier sieht mal die Verteilung für die untransformierten Daten, mal für die transformierten besser aus. Da die Transformation keine klare Verbesserung bringt, bleiben wir im Folgenden bei den untransformierten Daten, da diese leichter (direkter) interpretiert werden können\n\n# Vollständiges Modell mit Interaktion\naov.1 <- aov(Tauchzeit~Unterart * Jahreszeit, data = kormoran)\naov.1\n\nCall:\n   aov(formula = Tauchzeit ~ Unterart * Jahreszeit, data = kormoran)\n\nTerms:\n                Unterart Jahreszeit Unterart:Jahreszeit Residuals\nSum of Squares   106.929    756.170              11.009    84.992\nDeg. of Freedom        1          3                   3        32\n\nResidual standard error: 1.629724\nEstimated effects may be unbalanced\n\nsummary(aov.1)\n\n                    Df Sum Sq Mean Sq F value   Pr(>F)    \nUnterart             1  106.9  106.93  40.259 4.01e-07 ***\nJahreszeit           3  756.2  252.06  94.901 5.19e-16 ***\nUnterart:Jahreszeit  3   11.0    3.67   1.382    0.266    \nResiduals           32   85.0    2.66                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# p-Wert der Interaktion ist 0.266\n\nDas volle (maximale) Modell zeigt, dass es keine signifikante Interaktion zwischen Jahreszeit und Unterart gibt. Wir können das Modell also vereinfachen, indem wir die Interaktion herausnehmen (+ statt * in der Modellspezifikation)\n\n# Modellvereinfachung\naov.2 <- aov(Tauchzeit~Unterart + Jahreszeit, data = kormoran)\naov.2\n\nCall:\n   aov(formula = Tauchzeit ~ Unterart + Jahreszeit, data = kormoran)\n\nTerms:\n                Unterart Jahreszeit Residuals\nSum of Squares   106.929    756.170    96.001\nDeg. of Freedom        1          3        35\n\nResidual standard error: 1.656166\nEstimated effects may be unbalanced\n\nsummary(aov.2)\n\n            Df Sum Sq Mean Sq F value   Pr(>F)    \nUnterart     1  106.9  106.93   38.98 3.69e-07 ***\nJahreszeit   3  756.2  252.06   91.89  < 2e-16 ***\nResiduals   35   96.0    2.74                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nIm so vereinfachten Modell sind alle verbleibenden Terme signifikant, wir sind also beim „minimal adäquaten Modell“ angelangt\n\n# Anderer Weg, um zu pruefen, ob man das komplexere Modell mit Interaktion behalten soll\nanova(aov.1, aov.2)\n\nAnalysis of Variance Table\n\nModel 1: Tauchzeit ~ Unterart * Jahreszeit\nModel 2: Tauchzeit ~ Unterart + Jahreszeit\n  Res.Df    RSS Df Sum of Sq      F Pr(>F)\n1     32 84.992                           \n2     35 96.001 -3   -11.009 1.3817 0.2661\n\n# In diesem Fall bekommen wir den gleichen p-Wert wie oben (0.266)\n\n# Modelldiagnostik\npar(mfrow = c(2, 2)) #alle vier Abbildungen in einem 2 x 2 Raster\nplot(aov.2)\n\n\n\n\nAbbildung 22.5: Generierter Plot\n\n\n\n\n\ninfluence.measures(aov.2) # \n# kann man sich zusätzlich zum \"plot\" ansehen, um herauszufinden, \n# ob es evtl. sehr einflussreiche Werte mit Cook's D von 1 oder grösser gibt\n\nLinks oben ist alles bestens, d. h. keine Hinweise auf Varianzheterogenität („Keil“) oder Nichtlinearität („Banane“) Rechts oben ganz gut, allerdings weichen Punkte 1 und 20 deutlich von der optimalen Gerade ab -> aus diesem Grund können wir es doch noch mal mit der log10-Transformation versuchen (s.u.) Rechts unten: kein Punkt hat einen problematischen Einfluss (die roten Linien für Cook’s D > 0.5 und > 1 sind noch nicht einmal im Bildausschnitt.\n\n# Alternative mit log10\naov.3 <-aov(log10(Tauchzeit)~Unterart + Jahreszeit, data=kormoran)\naov.3\n\nCall:\n   aov(formula = log10(Tauchzeit) ~ Unterart + Jahreszeit, data = kormoran)\n\nTerms:\n                 Unterart Jahreszeit Residuals\nSum of Squares  0.0627004  0.4958434 0.0562031\nDeg. of Freedom         1          3        35\n\nResidual standard error: 0.04007247\nEstimated effects may be unbalanced\n\nsummary(aov.3)\n\n            Df Sum Sq Mean Sq F value   Pr(>F)    \nUnterart     1 0.0627 0.06270   39.05 3.64e-07 ***\nJahreszeit   3 0.4958 0.16528  102.93  < 2e-16 ***\nResiduals   35 0.0562 0.00161                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nplot(aov.3)\n\n\n\n\nAbbildung 22.6: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 22.7: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 22.8: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 22.9: Generierter Plot\n\n\n\n\nRechts oben: Punkt 20 jetzt auf der Linie, aber Punkt 1 weicht umso deutlicher ab -> keine Verbesserung -> wir bleiben bei den untransformierten Daten. Da wir keine Interaktion zwischen Unterart und Jahreszeit festgestellt haben, brauchen wir auch keinen Interaktionsplot (unnötig kompliziert), statt dessen können wir die Ergebnisse am besten mit zwei getrennten Plots für die beiden Faktoren darstellen. Bitte die Achsenbeschriftungen und den Tukey post-hoc-Test nicht vergessen.\n\npar(mfrow = c(1, 1)) #Zurückschalten auf Einzelplots\nif(!require(multcomp)){install.packages(\"multcomp\")} \n\nError in contrib.url(repos, \"source\"): versuche CRAN ohne einen Spiegelserver zu nutzen\n\nlibrary(multcomp)\n\nError in library(multcomp): es gibt kein Paket namens 'multcomp'\n\nboxplot(Tauchzeit~Unterart, data = kormoran)\n\nletters <- cld(glht(aov.2, linfct = mcp(Jahreszeit = \"Tukey\")))\n\nError in cld(glht(aov.2, linfct = mcp(Jahreszeit = \"Tukey\"))): konnte Funktion \"cld\" nicht finden\n\nboxplot(Tauchzeit~Jahreszeit, data = kormoran)\nmtext(letters$mcletters$Letters, at = 1:4)\n\nError in letters$mcletters: $ operator is invalid for atomic vectors\n\n\n\n\n\nAbbildung 22.10: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 22.11: Generierter Plot\n\n\n\n\nJetzt brauchen wir noch die Mittelwerte bzw. Effektgroessen\nFür den Ergebnistext brauchen wir auch noch Angaben zu den Effektgrössen. Hier sind zwei Möglichkeiten, um an sie zu gelangen.\n\naggregate(Tauchzeit~Jahreszeit, FUN = mean, data = kormoran)\n\n  Jahreszeit Tauchzeit\n1          F     11.86\n2          S     15.09\n3          H     19.23\n4          W     23.42\n\naggregate(Tauchzeit~Unterart, FUN = mean, data = kormoran)\n\n  Unterart Tauchzeit\n1        C    19.035\n2        S    15.765\n\nsummary(lm(Tauchzeit~Jahreszeit, data = kormoran))\n\n\nCall:\nlm(formula = Tauchzeit ~ Jahreszeit, data = kormoran)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-3.820 -1.617 -0.145  1.587  6.980 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   17.4000     0.3754  46.351  < 2e-16 ***\nJahreszeit.L   8.6804     0.7508  11.562 1.12e-13 ***\nJahreszeit.Q   0.4800     0.7508   0.639    0.527    \nJahreszeit.C  -0.1923     0.7508  -0.256    0.799    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.374 on 36 degrees of freedom\nMultiple R-squared:  0.7884,    Adjusted R-squared:  0.7708 \nF-statistic: 44.72 on 3 and 36 DF,  p-value: 3.156e-12\n\nsummary(lm(Tauchzeit~Unterart, data = kormoran))\n\n\nCall:\nlm(formula = Tauchzeit ~ Unterart, data = kormoran)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-9.535 -3.585 -0.335  3.760 11.365 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   19.035      1.059  17.976   <2e-16 ***\nUnterartS     -3.270      1.498  -2.184   0.0352 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.736 on 38 degrees of freedom\nMultiple R-squared:  0.1115,    Adjusted R-squared:  0.08811 \nF-statistic: 4.768 on 1 and 38 DF,  p-value: 0.03523"
  },
  {
    "objectID": "stat1-4/Statistik3_Demo.html",
    "href": "stat1-4/Statistik3_Demo.html",
    "title": "Stat3: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)\nDatensatz ipomopsis.csv\nDatensatz loyn.csv"
  },
  {
    "objectID": "stat1-4/Statistik3_Demo.html#ancova",
    "href": "stat1-4/Statistik3_Demo.html#ancova",
    "title": "Stat3: Demo",
    "section": "ANCOVA",
    "text": "ANCOVA\nExperiment zur Fruchtproduktion (“Fruit”) von Ipomopsis sp. (“Fruit”) in Abhängigkeit von der Beweidung (“Grazing” mit 2 Levels: “Grazed”, “Ungrazed”) und korrigiert für die Pflanzengrösse vor der Beweidung (hier ausgedrückt als Durchmesser an der Spitze des Wurzelstock: “Root”)\n\n# Daten einlesen und anschauen\n\ncompensation <- read.delim(\"datasets/statistik/ipomopsis.csv\", sep = \",\", stringsAsFactors = T)\n head(compensation)\n\n  X  Root Fruit  Grazing\n1 1 6.225 59.77 Ungrazed\n2 2 6.487 60.98 Ungrazed\n3 3 4.919 14.73 Ungrazed\n4 4 5.130 19.28 Ungrazed\n5 5 5.417 34.25 Ungrazed\n6 6 5.359 35.53 Ungrazed\n\nsummary(compensation)\n\n       X              Root            Fruit            Grazing  \n Min.   : 1.00   Min.   : 4.426   Min.   : 14.73   Grazed  :20  \n 1st Qu.:10.75   1st Qu.: 6.083   1st Qu.: 41.15   Ungrazed:20  \n Median :20.50   Median : 7.123   Median : 60.88                \n Mean   :20.50   Mean   : 7.181   Mean   : 59.41                \n 3rd Qu.:30.25   3rd Qu.: 8.510   3rd Qu.: 76.19                \n Max.   :40.00   Max.   :10.253   Max.   :116.05                \n\n\n\n# Pflanzengrösse (\"Root\") vs. Fruchtproduktion (\"Fruit\") \nplot(Fruit~Root, data = compensation)\n\n\n\n\n-> Je grösser die Pflanze, desto grösser ihre Fruchtproduktion.\n\n# Beweidung (\"Grazing\") vs. Fruchtroduktion (\"Fruit)\nboxplot(Fruit~Grazing, data = compensation)\n\n\n\n\n\n\nIn der beweideten Gruppe scheint die Fruchtproduktion grösser. Liegt dies an der Beweidung oder an den Pflanzengrössen in der Gruppe?\n\n\n\n#Lineare Modelle definieren und anschauen\n\naoc.1 <- lm(Fruit~Root * Grazing, data = compensation)\nsummary.aov(aoc.1)\n\n             Df Sum Sq Mean Sq F value   Pr(>F)    \nRoot          1  16795   16795 359.968  < 2e-16 ***\nGrazing       1   5264    5264 112.832 1.21e-12 ***\nRoot:Grazing  1      5       5   0.103     0.75    \nResiduals    36   1680      47                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\naoc.2 <- lm(Fruit~Grazing * Root, data = compensation)\nsummary.aov(aoc.2)\n\n             Df Sum Sq Mean Sq F value   Pr(>F)    \nGrazing       1   2910    2910  62.380 2.26e-09 ***\nRoot          1  19149   19149 410.420  < 2e-16 ***\nGrazing:Root  1      5       5   0.103     0.75    \nResiduals    36   1680      47                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\naoc.3 <- lm(Fruit~Grazing + Root, data = compensation)\nsummary.aov(aoc.2)\n\n             Df Sum Sq Mean Sq F value   Pr(>F)    \nGrazing       1   2910    2910  62.380 2.26e-09 ***\nRoot          1  19149   19149 410.420  < 2e-16 ***\nGrazing:Root  1      5       5   0.103     0.75    \nResiduals    36   1680      47                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary.lm(aoc.3)\n\n\nCall:\nlm(formula = Fruit ~ Grazing + Root, data = compensation)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-17.1920  -2.8224   0.3223   3.9144  17.3290 \n\nCoefficients:\n                Estimate Std. Error t value Pr(>|t|)    \n(Intercept)     -127.829      9.664  -13.23 1.35e-15 ***\nGrazingUngrazed   36.103      3.357   10.75 6.11e-13 ***\nRoot              23.560      1.149   20.51  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.747 on 37 degrees of freedom\nMultiple R-squared:  0.9291,    Adjusted R-squared:  0.9252 \nF-statistic: 242.3 on 2 and 37 DF,  p-value: < 2.2e-16\n\n\n\n# Plotten der Daten\nlibrary(tidyverse)\nggplot(compensation, aes(Root, Fruit, color = Grazing)) +\n  geom_point() + \n  theme_classic()\n\n\n\n\n\n# Ploten mit base R\nplot(Fruit~Root, pch = 16, col = Grazing, data = compensation)\nlegend(\"topleft\", c(\"grazed\", \"ungrazed\"), col = c(\"black\",\"red\"), pch = 16)"
  },
  {
    "objectID": "stat1-4/Statistik3_Demo.html#polynomische-regression",
    "href": "stat1-4/Statistik3_Demo.html#polynomische-regression",
    "title": "Stat3: Demo",
    "section": "Polynomische Regression",
    "text": "Polynomische Regression\n\n# Daten generieren und Modelle rechnen\ne <- c(20, 19, 25, 10, 8, 15, 13, 18, 11, 14, 25, 39, 38, 28, 24)\nf <- c(12, 15, 10, 7, 2, 10, 12, 11, 13, 10, 9, 2, 4, 7, 13)\n\nlm.1 <- lm(f~e)\nlm.quad <- lm(f~e + I(e^2))\n\n\nsummary(lm.1)\n\n\nCall:\nlm(formula = f ~ e)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-9.0549 -1.7015  0.5654  2.0617  5.6406 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  12.2879     2.4472   5.021 0.000234 ***\ne            -0.1541     0.1092  -1.412 0.181538    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.863 on 13 degrees of freedom\nMultiple R-squared:  0.1329,    Adjusted R-squared:  0.06622 \nF-statistic: 1.993 on 1 and 13 DF,  p-value: 0.1815\n\n\n-> kein signifikanter Zusammenhang und entsprechend kleines Bestimmtheitsmass (adj. R2 = 0.07)\n\nsummary(lm.quad)\n\n\nCall:\nlm(formula = f ~ e + I(e^2))\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-4.3866 -1.1018 -0.2027  1.3831  4.4211 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)   \n(Intercept) -2.239308   3.811746  -0.587  0.56777   \ne            1.330933   0.360105   3.696  0.00306 **\nI(e^2)      -0.031587   0.007504  -4.209  0.00121 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.555 on 12 degrees of freedom\nMultiple R-squared:  0.6499,    Adjusted R-squared:  0.5915 \nF-statistic: 11.14 on 2 and 12 DF,  p-value: 0.001842\n\n\n-> signifikanter Zusammenhang und viel besseres Bestimmtheitsmass (adj. R2 = 0.60)\n\n# Modelle plotten\n\npar(mfrow = c(1, 2))\n\n# 1. lineares Modell\nplot(f~e, xlim = c(0, 40), ylim = c(0, 20), main = \"Lineares Modell\")\nabline(lm.1, col = \"blue\")\n\n# 2. quadratisches Modell\nplot(f~e, xlim = c(0, 40), ylim = c(0, 20), main = \"Quadratisches  Modell\")\nxv <- seq(0, 40, 0.1) # Input für Modellvoraussage via predict ()\nyv2 <- predict(lm.quad, list(e = xv))\nlines(xv, yv2, col = \"red\")\n\n\n\n\n\n# Residualplots\npar(mfrow = c(2, 2))\nplot(lm.1, main = \"Lineares Modell\")\n\n\n\nplot(lm.quad, main = \"Quadratisches  Modell\")\n\n\n\n\n\nSimulation Overfitting\n\n# Beispieldaten mit 6 Datenpunkten\ntest <- data.frame(\"x\" = c(1, 2, 3, 4, 5, 6), \"y\" = c(34, 21, 70, 47, 23, 45))\n\npar(mfrow=c(1,1))\nplot(y~x, data = test)\n\n\n\n\n\n# Zunehmend komplizierte Modelle definieren und anschauen\nlm.0 <- lm(y~1, data = test)\nlm.1 <- lm(y~x, data = test)\nlm.2 <- lm(y~x+ I(x^2), data = test)\nlm.3 <- lm(y~x+ I(x^2) + I(x^3), data = test)\nlm.4 <- lm(y~x+ I(x^2) + I(x^3) + I(x^4), data = test)\nlm.5 <- lm(y~x+ I(x^2) + I(x^3) + I(x^4) + I(x^5), data = test)\nlm.6 <- lm(y~x+ I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6), data = test)\nsummary(lm.0)\n\n\nCall:\nlm(formula = y ~ 1, data = test)\n\nResiduals:\n  1   2   3   4   5   6 \n -6 -19  30   7 -17   5 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)   40.000      7.439   5.377    0.003 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 18.22 on 5 degrees of freedom\n\nsummary(lm.1)\n\n\nCall:\nlm(formula = y ~ x, data = test)\n\nResiduals:\n      1       2       3       4       5       6 \n -3.286 -17.371  30.543   6.457 -18.629   2.286 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   36.200     18.847   1.921    0.127\nx              1.086      4.839   0.224    0.833\n\nResidual standard error: 20.24 on 4 degrees of freedom\nMultiple R-squared:  0.01243,   Adjusted R-squared:  -0.2345 \nF-statistic: 0.05033 on 1 and 4 DF,  p-value: 0.8335\n\nsummary(lm.2)\n\n\nCall:\nlm(formula = y ~ x + I(x^2), data = test)\n\nResiduals:\n       1        2        3        4        5        6 \n  3.6786 -18.7643  24.9714   0.8857 -20.0214   9.2500 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)   16.700     39.684   0.421    0.702\nx             15.711     25.962   0.605    0.588\nI(x^2)        -2.089      3.631  -0.575    0.605\n\nResidual standard error: 22.18 on 3 degrees of freedom\nMultiple R-squared:  0.1106,    Adjusted R-squared:  -0.4823 \nF-statistic: 0.1865 on 2 and 3 DF,  p-value: 0.8388\n\nsummary(lm.3)\n\n\nCall:\nlm(formula = y ~ x + I(x^2) + I(x^3), data = test)\n\nResiduals:\n      1       2       3       4       5       6 \n  7.373 -23.937  22.016   3.841 -14.849   5.556 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)  -14.333     94.646  -0.151    0.894\nx             54.749    107.840   0.508    0.662\nI(x^2)       -15.020     34.508  -0.435    0.706\nI(x^3)         1.231      3.261   0.378    0.742\n\nResidual standard error: 26.25 on 2 degrees of freedom\nMultiple R-squared:  0.1698,    Adjusted R-squared:  -1.076 \nF-statistic: 0.1364 on 3 and 2 DF,  p-value: 0.93\n\nsummary(lm.4)\n\n\nCall:\nlm(formula = y ~ x + I(x^2) + I(x^3) + I(x^4), data = test)\n\nResiduals:\n      1       2       3       4       5       6 \n 0.9087 -4.5437  9.0873 -9.0873  4.5437 -0.9087 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)  257.167    125.760   2.045    0.290\nx           -412.835    205.907  -2.005    0.295\nI(x^2)       236.549    107.776   2.195    0.272\nI(x^3)       -51.560     22.336  -2.308    0.260\nI(x^4)         3.771      1.590   2.371    0.254\n\nResidual standard error: 14.43 on 1 degrees of freedom\nMultiple R-squared:  0.8746,    Adjusted R-squared:  0.3732 \nF-statistic: 1.744 on 4 and 1 DF,  p-value: 0.5089\n\nsummary(lm.5)\n\n\nCall:\nlm(formula = y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5), data = test)\n\nResiduals:\nALL 6 residuals are 0: no residual degrees of freedom!\n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)\n(Intercept)   677.000        NaN     NaN      NaN\nx           -1301.633        NaN     NaN      NaN\nI(x^2)        893.333        NaN     NaN      NaN\nI(x^3)       -269.958        NaN     NaN      NaN\nI(x^4)         37.167        NaN     NaN      NaN\nI(x^5)         -1.908        NaN     NaN      NaN\n\nResidual standard error: NaN on 0 degrees of freedom\nMultiple R-squared:      1, Adjusted R-squared:    NaN \nF-statistic:   NaN on 5 and 0 DF,  p-value: NA\n\n\n\n# Modelle plotten\nxv <- seq(from = 0, to = 10, by = 0.1)\n\nplot(y~x, cex = 2, col = \"black\", lwd = 3, data = test)\nyv <- predict(lm.1, list(x = xv))\nlines(xv, yv, col = \"red\", lwd = 3)\nyv <- predict(lm.2, list(x = xv))\nlines(xv, yv, col = \"blue\", lwd = 3)\nyv<-predict(lm.3, list(x = xv))\nlines(xv, yv, col = \"green\", lwd =3)\nyv <- predict(lm.4, list(x = xv))\nlines(xv, yv, col = \"orange\", lwd = 3)\nyv <- predict(lm.5, list(x = xv))\nlines(xv, yv, col = \"black\", lwd = 3)"
  },
  {
    "objectID": "stat1-4/Statistik3_Demo.html#multiple-lineare-regression-basierend-auf-logan-beispiel-9a",
    "href": "stat1-4/Statistik3_Demo.html#multiple-lineare-regression-basierend-auf-logan-beispiel-9a",
    "title": "Stat3: Demo",
    "section": "Multiple lineare Regression (basierend auf Logan, Beispiel 9A)",
    "text": "Multiple lineare Regression (basierend auf Logan, Beispiel 9A)\n\n# Daten laden und anschauen\nloyn <- read.delim(\"datasets/statistik/loyn.csv\", sep = \",\")\nsummary(loyn)\n\n       X             ABUND            AREA            YR.ISOL    \n Min.   : 1.00   Min.   : 1.50   Min.   :   0.10   Min.   :1890  \n 1st Qu.:14.75   1st Qu.:12.40   1st Qu.:   2.00   1st Qu.:1928  \n Median :28.50   Median :21.05   Median :   7.50   Median :1962  \n Mean   :28.50   Mean   :19.51   Mean   :  69.27   Mean   :1950  \n 3rd Qu.:42.25   3rd Qu.:28.30   3rd Qu.:  29.75   3rd Qu.:1966  \n Max.   :56.00   Max.   :39.60   Max.   :1771.00   Max.   :1976  \n      DIST            LDIST            GRAZE            ALT       \n Min.   :  26.0   Min.   :  26.0   Min.   :1.000   Min.   : 60.0  \n 1st Qu.:  93.0   1st Qu.: 158.2   1st Qu.:2.000   1st Qu.:120.0  \n Median : 234.0   Median : 338.5   Median :3.000   Median :140.0  \n Mean   : 240.4   Mean   : 733.3   Mean   :2.982   Mean   :146.2  \n 3rd Qu.: 333.2   3rd Qu.: 913.8   3rd Qu.:4.000   3rd Qu.:182.5  \n Max.   :1427.0   Max.   :4426.0   Max.   :5.000   Max.   :260.0  \n\n\n\nKorrelation zwischen den Prädiktoren\n\ncor <- cor(loyn[, 3:8]) # Korrelationen rechnen details siehe: \"?cor\"\n\n# Korrelationen Visualisieren (google: \"correlation plot r\"...)\nif(!require(corrplot)){install.packages(\"corrplot\")}\nlibrary(corrplot)\n\ncorrplot.mixed(cor, lower = 'ellipse', upper = \"number\", order = 'AOE')\n\n\n\n\n\n# Volles Modell definieren\n# Eigentlich bestünde das volle Modell aus 6 Prädiktoren\n# Aus pragmatischen Gründen wird hier nur mit 3 Prädiktoren weitergerechnet\n\nlm.1 <- lm (ABUND ~ YR.ISOL + ALT + GRAZE, data = loyn)\nif(!require(car)){install.packages(\"car\")} \nlibrary(car)\n\nvif(lm.1) \n\n YR.ISOL      ALT    GRAZE \n1.679995 1.200372 1.904799 \n\ninfluence.measures(lm.1)\n\nInfluence measures of\n     lm(formula = ABUND ~ YR.ISOL + ALT + GRAZE, data = loyn) :\n\n      dfb.1_  dfb.YR.I   dfb.ALT  dfb.GRAZ     dffit cov.r   cook.d    hat inf\n1   0.128900 -0.136701 -2.25e-02  8.68e-02 -0.455383 0.663 4.64e-02 0.0286   *\n2  -0.046388  0.041396  1.50e-01 -2.15e-02 -0.222873 1.159 1.26e-02 0.0996    \n3  -0.178685  0.184085 -5.40e-02 -4.08e-02 -0.298379 1.108 2.23e-02 0.0901    \n4   0.054207 -0.053864 -2.43e-02 -4.06e-02 -0.085906 1.099 1.87e-03 0.0331    \n5   0.032249 -0.035235  3.34e-02  6.56e-02  0.138294 1.123 4.85e-03 0.0597    \n6   0.072550 -0.075381  3.68e-02 -3.40e-02 -0.129304 1.072 4.22e-03 0.0315    \n7   0.153153 -0.155477  8.56e-02 -1.78e-01 -0.263831 1.139 1.75e-02 0.0978    \n8  -0.044533  0.039741  1.44e-01 -2.07e-02 -0.213965 1.162 1.16e-02 0.0996    \n9   0.305330 -0.305810  1.16e-02 -2.93e-01 -0.412610 0.935 4.12e-02 0.0593    \n10 -0.134119  0.136978 -1.50e-02 -2.15e-02 -0.217402 1.140 1.19e-02 0.0876    \n11  0.145761 -0.154644  2.14e-01 -2.21e-02  0.300565 1.103 2.26e-02 0.0883    \n12 -0.246939  0.255702 -1.22e-01 -2.33e-02 -0.369735 1.161 3.42e-02 0.1318    \n13  0.071832 -0.068266 -1.34e-01 -3.53e-02 -0.191283 1.110 9.23e-03 0.0653    \n14  0.019281 -0.016626 -3.08e-01  1.90e-01 -0.597735 0.810 8.32e-02 0.0692    \n15  0.000311 -0.000315 -2.26e-05  2.96e-05  0.000496 1.184 6.27e-08 0.0874    \n16 -0.131537  0.136111 -5.26e-02 -3.46e-02 -0.223973 1.146 1.27e-02 0.0923    \n17 -0.098856  0.108184 -1.60e-01  1.44e-02  0.266285 0.984 1.75e-02 0.0393    \n18  0.238014 -0.243468  3.85e-02 -1.36e-01 -0.397451 0.753 3.65e-02 0.0293   *\n19 -0.031350  0.029292  5.78e-02  3.66e-02  0.081711 1.121 1.70e-03 0.0460    \n20 -0.024122  0.019709  7.59e-02  5.75e-02 -0.093805 1.170 2.24e-03 0.0829    \n21  0.036050 -0.033748 -7.79e-02 -2.15e-02 -0.102357 1.162 2.66e-03 0.0786    \n22 -0.015768  0.016959  4.26e-03 -6.28e-02 -0.127636 1.116 4.13e-03 0.0531    \n23  0.050368 -0.052333  2.55e-02 -2.36e-02 -0.089769 1.095 2.04e-03 0.0315    \n24 -0.012264  0.008841  5.20e-02  5.07e-02 -0.071851 1.209 1.31e-03 0.1091    \n25  0.145637 -0.146703  2.41e-02 -7.94e-02  0.157322 1.319 6.30e-03 0.1876   *\n26 -0.007372  0.007451  1.67e-03  5.11e-03  0.015793 1.106 6.36e-05 0.0232    \n27  0.043873 -0.045585  2.22e-02 -2.05e-02 -0.078194 1.100 1.55e-03 0.0315    \n28 -0.018037  0.016743  2.82e-02  2.63e-02  0.036688 1.224 3.43e-04 0.1175    \n29 -0.131935  0.133012 -2.20e-02  1.11e-01  0.164334 1.152 6.84e-03 0.0836    \n30  0.094249 -0.092478 -8.47e-02  1.81e-02  0.210983 1.127 1.12e-02 0.0790    \n31  0.118899 -0.130120  1.93e-01 -1.73e-02 -0.320276 0.928 2.49e-02 0.0393    \n32 -0.103130  0.098781  9.40e-02  1.33e-01  0.170699 1.126 7.37e-03 0.0690    \n33 -0.284839  0.290760 -1.33e-01  2.50e-01  0.433995 0.919 4.54e-02 0.0602    \n34 -0.213008  0.199453  2.95e-01  3.01e-01  0.408017 1.071 4.12e-02 0.1008    \n35  0.068874 -0.066760 -1.35e-01 -3.57e-03 -0.246916 1.008 1.51e-02 0.0407    \n36 -0.151383  0.159324 -1.23e-01  5.71e-02  0.283014 0.959 1.96e-02 0.0376    \n37  0.022901 -0.022520 -3.21e-02  3.25e-02  0.103312 1.136 2.71e-03 0.0605    \n38 -0.001488  0.001427  3.83e-03 -1.89e-04  0.006929 1.125 1.22e-05 0.0393    \n39 -0.299662  0.296262  7.86e-02  2.86e-01  0.365529 1.060 3.31e-02 0.0860    \n40  0.045779 -0.044212 -7.15e-02  3.70e-02  0.168859 1.126 7.21e-03 0.0685    \n41 -0.043463  0.037744  6.26e-02  1.22e-01 -0.153196 1.126 5.94e-03 0.0653    \n42 -0.067499  0.070133 -3.42e-02  3.16e-02  0.120302 1.078 3.66e-03 0.0315    \n43  0.002552 -0.002850 -1.05e-02  1.52e-02 -0.036428 1.143 3.38e-04 0.0558    \n44  0.011473 -0.009053 -3.51e-02 -3.92e-02  0.052676 1.192 7.07e-04 0.0953    \n45  0.002848  0.003165 -8.61e-02 -6.95e-02  0.137899 1.092 4.81e-03 0.0427    \n46 -0.116776  0.109111  2.15e-01  1.36e-01  0.304366 0.977 2.28e-02 0.0460    \n47  0.445830 -0.431209 -2.69e-01 -3.41e-01  0.629701 0.642 8.76e-02 0.0483   *\n48 -0.000133  0.004718  4.46e-02 -1.58e-01  0.302736 1.002 2.26e-02 0.0520    \n49  0.008724 -0.006876 -2.00e-02 -3.60e-02  0.048292 1.150 5.94e-04 0.0626    \n50  0.019369 -0.017688 -5.80e-03 -5.14e-02  0.069197 1.136 1.22e-03 0.0548    \n51 -0.122055  0.122805  7.02e-02  2.13e-02  0.231107 1.022 1.33e-02 0.0408    \n52  0.020580 -0.015671 -8.25e-02 -6.78e-02  0.099679 1.298 2.53e-03 0.1704   *\n53  0.014674 -0.013095 -8.87e-03 -4.28e-02  0.057249 1.139 8.35e-04 0.0549    \n54  0.138452 -0.137403  3.82e-02 -1.54e-01  0.204365 1.168 1.06e-02 0.1011    \n55 -0.000650  0.000535 -4.05e-03  6.97e-03 -0.014242 1.144 5.17e-05 0.0555    \n56  0.021139 -0.021938  2.56e-02 -1.62e-02  0.039541 1.363 3.98e-04 0.2077   *\n\n\n\n\nModellvereinfachung\n\nlm.1 <- lm(ABUND ~ YR.ISOL + ALT + GRAZE, data = loyn)\nsummary(lm.1)\n\n\nCall:\nlm(formula = ABUND ~ YR.ISOL + ALT + GRAZE, data = loyn)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-19.5498  -4.8951   0.6504   4.7798  20.2384 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept) -73.58185  107.24995  -0.686 0.495712    \nYR.ISOL       0.05143    0.05393   0.954 0.344719    \nALT           0.03285    0.02679   1.226 0.225618    \nGRAZE        -4.01692    0.99881  -4.022 0.000188 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.894 on 52 degrees of freedom\nMultiple R-squared:  0.4887,    Adjusted R-squared:  0.4592 \nF-statistic: 16.57 on 3 and 52 DF,  p-value: 1.106e-07\n\nlm.2 <- update(lm.1,~.-YR.ISOL)\nanova(lm.1, lm.2)\n\nAnalysis of Variance Table\n\nModel 1: ABUND ~ YR.ISOL + ALT + GRAZE\nModel 2: ABUND ~ ALT + GRAZE\n  Res.Df    RSS Df Sum of Sq      F Pr(>F)\n1     52 3240.4                           \n2     53 3297.1 -1   -56.662 0.9093 0.3447\n\nsummary(lm.2)\n\n\nCall:\nlm(formula = ABUND ~ ALT + GRAZE, data = loyn)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-19.1677  -4.8261   0.0266   4.6944  19.1054 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept) 28.55582    5.43245   5.257 2.67e-06 ***\nALT          0.03191    0.02675   1.193    0.238    \nGRAZE       -4.59679    0.79167  -5.806 3.67e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.887 on 53 degrees of freedom\nMultiple R-squared:  0.4798,    Adjusted R-squared:  0.4602 \nF-statistic: 24.44 on 2 and 53 DF,  p-value: 3.011e-08\n\nlm.3 <- update(lm.2,~.-ALT)\nanova(lm.2, lm.3)\n\nAnalysis of Variance Table\n\nModel 1: ABUND ~ ALT + GRAZE\nModel 2: ABUND ~ GRAZE\n  Res.Df    RSS Df Sum of Sq      F Pr(>F)\n1     53 3297.1                           \n2     54 3385.6 -1   -88.519 1.4229 0.2382\n\nsummary(lm.3)\n\n\nCall:\nlm(formula = ABUND ~ GRAZE, data = loyn)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-19.1066  -5.4097   0.0934   4.4856  18.2747 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  34.3692     2.4095  14.264  < 2e-16 ***\nGRAZE        -4.9813     0.7259  -6.862  6.9e-09 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.918 on 54 degrees of freedom\nMultiple R-squared:  0.4658,    Adjusted R-squared:  0.4559 \nF-statistic: 47.09 on 1 and 54 DF,  p-value: 6.897e-09\n\npar(mfrow = c(2, 2))\nplot(lm.1)\n\n\n\n\n\n\nHierarchical partitioning\n\nif(!require(hier.part)){install.packages(\"hier.part\")}\nlibrary(hier.part)\n\nloyn.preds <-with(loyn, data.frame(YR.ISOL, ALT, GRAZE))\nhier.part(loyn$ABUND, loyn.preds, gof = \"Rsqu\")\n\n\n\n\n$gfs\n[1] 0.0000000 0.2533690 0.1488696 0.4658218 0.3297010 0.4739432 0.4797883\n[8] 0.4887284\n\n$IJ\n                 I          J     Total\nYR.ISOL 0.11892853 0.13444049 0.2533690\nALT     0.06960132 0.07926823 0.1488696\nGRAZE   0.30019854 0.16562324 0.4658218\n\n$I.perc\n        ind.exp.var\nYR.ISOL    24.33428\nALT        14.24131\nGRAZE      61.42441\n\n$params\n$params$full.model\n[1] \"y ~ YR.ISOL + ALT + GRAZE\"\n\n$params$family\n[1] \"gaussian\"\n\n$params$link\n[1] \"default\"\n\n$params$gof\n[1] \"Rsqu\"\n\n\n\n\nPartial regressions\n\navPlots(lm.1, ask = F)"
  },
  {
    "objectID": "stat1-4/Statistik3_Demo.html#multimodel-inference",
    "href": "stat1-4/Statistik3_Demo.html#multimodel-inference",
    "title": "Stat3: Demo",
    "section": "Multimodel inference",
    "text": "Multimodel inference\n\nif(!require(MuMIn)){install.packages(\"MuMIn\")}\nlibrary(MuMIn)\n\nglobal.model <- lm(ABUND ~ YR.ISOL + ALT + GRAZE, data = loyn)\noptions(na.action = \"na.fail\")\n\nallmodels <- dredge(global.model)\nallmodels\n\nGlobal model call: lm(formula = ABUND ~ YR.ISOL + ALT + GRAZE, data = loyn)\n---\nModel selection table \n     (Int)     ALT    GRA  YR.ISO df   logLik  AICc delta weight\n3   34.370         -4.981          3 -194.315 395.1  0.00  0.407\n4   28.560 0.03191 -4.597          4 -193.573 395.9  0.84  0.267\n7  -62.750         -4.440 0.04898  4 -193.886 396.6  1.46  0.196\n8  -73.580 0.03285 -4.017 0.05143  5 -193.087 397.4  2.28  0.130\n6 -348.500 0.07006        0.18350  4 -200.670 410.1 15.03  0.000\n5 -392.300                0.21120  3 -203.690 413.8 18.75  0.000\n2    5.598 0.09515                 3 -207.358 421.2 26.09  0.000\n1   19.510                         2 -211.871 428.0 32.88  0.000\nModels ranked by AICc(x) \n\nsw(allmodels)\n\n                     GRAZE ALT  YR.ISOL\nSum of weights:      1.00  0.40 0.33   \nN containing models:    4     4    4   \n\navgmodel <- model.avg(allmodels, subset = TRUE)\nsummary(avgmodel)\n\n\nCall:\nmodel.avg(object = allmodels, subset = TRUE)\n\nComponent model call: \nlm(formula = ABUND ~ <8 unique rhs>, data = loyn)\n\nComponent models: \n       df  logLik   AICc delta weight\n2       3 -194.31 395.09  0.00   0.41\n12      4 -193.57 395.93  0.84   0.27\n23      4 -193.89 396.56  1.46   0.20\n123     5 -193.09 397.37  2.28   0.13\n13      4 -200.67 410.13 15.03   0.00\n3       3 -203.69 413.84 18.75   0.00\n1       3 -207.36 421.18 26.09   0.00\n(Null)  2 -211.87 427.97 32.88   0.00\n\nTerm codes: \n    ALT   GRAZE YR.ISOL \n      1       2       3 \n\nModel-averaged coefficients:  \n(full average) \n            Estimate Std. Error Adjusted SE z value Pr(>|z|)    \n(Intercept) -0.29874   77.23966    78.39113   0.004    0.997    \nGRAZE       -4.64605    0.89257     0.91048   5.103    3e-07 ***\nALT          0.01282    0.02311     0.02340   0.548    0.584    \nYR.ISOL      0.01631    0.03883     0.03941   0.414    0.679    \n \n(conditional average) \n            Estimate Std. Error Adjusted SE z value Pr(>|z|)    \n(Intercept) -0.29874   77.23966    78.39113   0.004    0.997    \nGRAZE       -4.64724    0.88957     0.90755   5.121    3e-07 ***\nALT          0.03224    0.02678     0.02741   1.176    0.240    \nYR.ISOL      0.05007    0.05421     0.05548   0.902    0.367    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "stat1-4/Statistik3_Uebung.html",
    "href": "stat1-4/Statistik3_Uebung.html",
    "title": "Stat3: Übung",
    "section": "",
    "text": "Übung 3: Multiple Regression\n\nBereiten Sie den Datensatz Ukraine_bearbeitet.csv für das Einlesen in R vor und lesen Sie ihn dann ein. Dieser enthält Pflanzenartenzahlen (Species.richness) von 199 10 m² grossen Plots (Vegetationsaufnahmen) von Steppenrasen in der Ukraine sowie zahlreiche Umweltvariablen, deren Bedeutung und Einheiten im Kopf der ExcelTabelle angegeben sind.\nErmitteln Sie ein minimal adäquates Modell, das den Artenreichtum in den Plots durch die Umweltvariablen erklärt.\nBitte erklären und begründen Sie die einzelnen Schritte, die Sie unternehmen, um zu diesem Ergebnis zu kommen. Dazu erstellen Sie bitte ein Word-Dokument, in das Sie Schritt für Schritt den verwendeten R-Code, die dazu gehörigen Ausgaben von R, Ihre Interpretation derselben und die sich ergebenden Schlussfolgerungen für das weitere Vorgehen dokumentieren.\nDieser Ablauf sollte insbesondere beinhalten:\n\nÜberprüfen der Datenstruktur nach dem Einlesen: welches sind die abhängige(n) und welches die unabängige(n) Variablen, sind alle Variablen für die Analyse geeignet?\nExplorative Datenanalyse, um zu sehen, ob die abhängige Variable in der vorliegenden Form für die Analyse geeignet ist\nDefinition eines globalen Modelles und dessen Reduktion zu einem minimal adäquaten Modell\nDurchführen der Modelldiagnostik für dieses\nGenerieren aller Zahlen, Statistiken und Tabellen, die für eine wiss. Ergebnisdarstellung benötigt werden\nFormulieren Sie abschliessend einen Methoden- und Ergebnisteil (ggf. incl. adäquaten Abbildungen) zu dieser Untersuchung in der Form einer wissenschaftlichen Arbeit (ausformulierte schriftliche Zusammenfassung, mit je einem Absatz von ca. 60-100 Worten, resp. 3-8 Sätzen für den Methoden- und Ergebnisteil). D. h. alle wichtigen Informationen sollten enthalten sein, unnötige Redundanz dagegen vermieden werden.\nAbzugeben sind am Ende (a) Ein lauffähiges R-Skript; (b) begründeter Lösungsweg (Kombination aus R-Code, R Output und dessen Interpretation) und (c) ausformulierter Methoden- und Ergebnisteil (für eine wiss. Arbeit)."
  },
  {
    "objectID": "stat1-4/Statistik4_Demo.html",
    "href": "stat1-4/Statistik4_Demo.html",
    "title": "Stat4: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)\nDatensatz loyn.csv"
  },
  {
    "objectID": "stat1-4/Statistik4_Demo.html#von-lms-zu-glms",
    "href": "stat1-4/Statistik4_Demo.html#von-lms-zu-glms",
    "title": "Stat4: Demo",
    "section": "von LMs zu GLMs",
    "text": "von LMs zu GLMs\n\n# Daten erstellen und anschauen\ntemp <- c(10, 12 ,16, 20, 24, 25, 30, 33, 37)\nbesucher <- c(40, 12, 50, 500, 400, 900, 1500, 900, 2000)\nstrand <- data.frame(\"Temperatur\" = temp, \"Besucher\" = besucher)\n\nplot(besucher~temp, data = strand)\n\n\n\n\n\n# Modell definieren und anschauen\nlm.strand <- lm(Besucher~Temperatur, data = strand)\nsummary(lm.strand)\n\n\nCall:\nlm(formula = Besucher ~ Temperatur, data = strand)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-476.41 -176.89   55.59  218.82  353.11 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -855.01     290.54  -2.943 0.021625 *  \nTemperatur     67.62      11.80   5.732 0.000712 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 311.7 on 7 degrees of freedom\nMultiple R-squared:  0.8244,    Adjusted R-squared:  0.7993 \nF-statistic: 32.86 on 1 and 7 DF,  p-value: 0.0007115\n\npar(mfrow = c(2, 2))\nplot(lm.strand)\n\n\n\n\n\npar(mfrow = c(1 ,1))\nxv <- seq(0, 40, by = .1)\nyv <- predict(lm.strand, list(Temperatur = xv))\nplot(strand$Temperatur, strand$Besucher, xlim = c(0, 40))\nlines(xv, yv, lwd = 3, col=  \"blue\")\n\n\n\n\n\n# GLMs definieren und anschauen\nglm.gaussian <- glm(Besucher~Temperatur, family = gaussian, data = strand)\nglm.poisson <- glm(Besucher~Temperatur, family = poisson, data = strand)\n\nsummary(glm.gaussian)\n\n\nCall:\nglm(formula = Besucher ~ Temperatur, family = gaussian, data = strand)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-476.41  -176.89    55.59   218.82   353.11  \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -855.01     290.54  -2.943 0.021625 *  \nTemperatur     67.62      11.80   5.732 0.000712 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for gaussian family taken to be 97138.03)\n\n    Null deviance: 3871444  on 8  degrees of freedom\nResidual deviance:  679966  on 7  degrees of freedom\nAIC: 132.63\n\nNumber of Fisher Scoring iterations: 2\n\nsummary(glm.poisson)\n\n\nCall:\nglm(formula = Besucher ~ Temperatur, family = poisson, data = strand)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-13.577  -12.787   -4.491    9.515   15.488  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) 3.500301   0.056920   61.49   <2e-16 ***\nTemperatur  0.112817   0.001821   61.97   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 6011.8  on 8  degrees of freedom\nResidual deviance: 1113.7  on 7  degrees of freedom\nAIC: 1185.1\n\nNumber of Fisher Scoring iterations: 5\n\n\nRücktranformation der Werte auf die orginale Skale (Hier Exponentialfunktion da family=possion als Link-Funktion den natürlichen Logarithmus (log) verwendet) Besucher = exp(3.50 + 0.11 Temperatur/°C)\n\nexp(3.500301) # Anzahl besucher bei 0°C\n\n[1] 33.12542\n\nexp(glm.poisson$coefficients[1]) # Werte aus Modell\n\n(Intercept) \n   33.12542 \n\nexp(3.500301 + 30*0.112817) # Anzahl besucher bei 30°C\n\n[1] 977.3169\n\nexp(glm.poisson$coeff[1] * glm.poisson$coeff[2]) #coefficients kann mit coeff abgekürzt werden\n\n(Intercept) \n   1.484225 \n\n# Test Overdispersion\nif(!require(AER)){install.packages(\"AER\")}\nlibrary(AER)\ndispersiontest(glm.poisson)\n\n\n    Overdispersion test\n\ndata:  glm.poisson\nz = 3.8576, p-value = 5.726e-05\nalternative hypothesis: true dispersion is greater than 1\nsample estimates:\ndispersion \n  116.5467 \n\nglm.quasi <- glm(Besucher~Temperatur, family = quasipoisson, data = strand)\nsummary(glm.quasi)\n\n\nCall:\nglm(formula = Besucher ~ Temperatur, family = quasipoisson, data = strand)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-13.577  -12.787   -4.491    9.515   15.488  \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)   \n(Intercept)  3.50030    0.69639   5.026  0.00152 **\nTemperatur   0.11282    0.02227   5.065  0.00146 **\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for quasipoisson family taken to be 149.6826)\n\n    Null deviance: 6011.8  on 8  degrees of freedom\nResidual deviance: 1113.7  on 7  degrees of freedom\nAIC: NA\n\nNumber of Fisher Scoring iterations: 5\n\n\n\npar(mfrow = c(2,2))\nplot(glm.gaussian, main = \"glm.gaussian\" )\n\n\n\n\n\npar(mfrow = c(2,2))\nplot(glm.poisson, main = \"glm.poisson\")\n\n\n\n\n\npar(mfrow = c(2,2))\nplot(glm.quasi, main = \"glm.quasi\")\n\n\n\n\n\npar(mfrow = c(1, 1))\nplot(strand$Temperatur, strand$Besucher, xlim=c(0, 40))\nxv <- seq(0, 40, by = .1)\n\nyv <- predict(lm.strand, list(Temperatur = xv))\nlines(xv, yv, lwd = 3, col = \"blue\")\n\nyv2 <- predict(glm.poisson, list(Temperatur = xv))\nlines(xv, exp(yv2), lwd = 3, col = \"red\")\n\nyv3 <- predict(glm.quasi, list(Temperatur = xv))\nlines(xv, exp(yv3), lwd = 3, col = \"green\")"
  },
  {
    "objectID": "stat1-4/Statistik4_Demo.html#logistische-regression",
    "href": "stat1-4/Statistik4_Demo.html#logistische-regression",
    "title": "Stat4: Demo",
    "section": "Logistische Regression",
    "text": "Logistische Regression\n\nbathing <- data.frame(\n  \"temperature\" = c(1, 2, 5, 9, 14, 14, 15, 19, 22, 24, 25, 26, 27, 28, 29),\n  \"bathing\" = c(0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1))\nplot(bathing~temperature, data = bathing)\n\n\n\nglm.1<-glm(bathing~temperature, family = \"binomial\", data = bathing)\nsummary(glm.1)\n\n\nCall:\nglm(formula = bathing ~ temperature, family = \"binomial\", data = bathing)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-1.7408  -0.4723  -0.1057   0.5123   1.8615  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)  \n(Intercept)  -5.4652     2.8501  -1.918   0.0552 .\ntemperature   0.2805     0.1350   2.077   0.0378 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 20.728  on 14  degrees of freedom\nResidual deviance: 10.829  on 13  degrees of freedom\nAIC: 14.829\n\nNumber of Fisher Scoring iterations: 6\n\n# Modeldiagnostik (wenn nicht signifikant, dann OK)\n1 - pchisq (glm.1$deviance, glm.1$df.resid)\n\n[1] 0.6251679\n\n# Modellgüte (pseudo-R²)\n1 - (glm.1$dev / glm.1$null)\n\n[1] 0.4775749\n\n# Steilheit der Beziehung (relative Änderung der odds bei x + 1 vs. x)\nexp(glm.1$coefficients[2])\n\ntemperature \n   1.323807 \n\n# LD50 (also hier: Temperatur, bei der 50% der Touristen baden)\n-glm.1$coefficients[1] / glm.1$coefficients[2]\n\n(Intercept) \n   19.48311 \n\n# Vorhersagen\npredicted <- predict(glm.1, type = \"response\")\n\n# Konfusionsmatrix\nkm <- table(bathing$bathing, predicted > 0.5)\nkm\n\n   \n    FALSE TRUE\n  0     7    1\n  1     1    6\n\n# Missklassifizierungsrate\n1 - sum(diag(km) / sum(km))\n\n[1] 0.1333333\n\n#Plotting\nxs <- seq(0, 30, l = 1000)\nmodel.predict <- predict(glm.1, type = \"response\", se = T, \n                         newdata = data.frame(temperature = xs))\n\nplot(bathing~temperature, xlab = \"Temperature (°C)\", \n     ylab = \"% Bathing\", pch = 16, col = \"red\", data = bathing)\npoints(model.predict$fit ~ xs, type=\"l\")\nlines(model.predict$fit+model.predict$se.fit ~ xs, type = \"l\", lty = 2)\nlines(model.predict$fit-model.predict$se.fit ~ xs, type = \"l\", lty = 2)"
  },
  {
    "objectID": "stat1-4/Statistik4_Demo.html#nicht-lineare-regression",
    "href": "stat1-4/Statistik4_Demo.html#nicht-lineare-regression",
    "title": "Stat4: Demo",
    "section": "Nicht-lineare Regression",
    "text": "Nicht-lineare Regression\n\nif(!require(AICcmodavg)){install.packages(\"AICcmodavg\")}\n\nError in contrib.url(repos, \"source\"): versuche CRAN ohne einen Spiegelserver zu nutzen\n\nif(!require(nlstools)){install.packages(\"nlstools\")}\nlibrary(AICcmodavg)\n\nError in library(AICcmodavg): es gibt kein Paket namens 'AICcmodavg'\n\nlibrary(nlstools)\n\nloyn <- read.delim(\"datasets/statistik/loyn.csv\", sep = \",\") # Verzeichnis muss dort gesetzt sein wo Daten sind\n\n#Selbstdefinierte Funktion, hier Potenzfunktion\npower.model <- nls(ABUND~c*AREA^z, start = (list(c = 1, z = 0)), data = loyn)\nsummary(power.model)\n\n\nFormula: ABUND ~ c * AREA^z\n\nParameters:\n  Estimate Std. Error t value Pr(>|t|)    \nc 13.39418    1.30721  10.246 2.87e-14 ***\nz  0.16010    0.02438   6.566 2.09e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.995 on 54 degrees of freedom\n\nNumber of iterations to convergence: 12 \nAchieved convergence tolerance: 7.124e-06\n\nAICc(power.model)\n\nError in AICc(power.model): konnte Funktion \"AICc\" nicht finden\n\n#Modeldiagnostik (in nlstools)\nplot(nlsResiduals(power.model))\n\n#Vordefinierte \"Selbststartfunktionen\"#\n?selfStart\nlogistic.model <- nls(ABUND~SSlogis(AREA, Asym, xmid, scal), data = loyn)\nsummary(logistic.model)\n\n\nFormula: ABUND ~ SSlogis(AREA, Asym, xmid, scal)\n\nParameters:\n     Estimate Std. Error t value Pr(>|t|)    \nAsym   31.306      2.207  14.182  < 2e-16 ***\nxmid    6.501      2.278   2.854  0.00614 ** \nscal    9.880      3.152   3.135  0.00280 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 7.274 on 53 degrees of freedom\n\nNumber of iterations to convergence: 8 \nAchieved convergence tolerance: 4.371e-06\n\nAICc(logistic.model)\n\nError in AICc(logistic.model): konnte Funktion \"AICc\" nicht finden\n\n#Modeldiagnostik (in nlstools)\nplot(nlsResiduals(logistic.model))\n\n#Visualisierung\nplot(ABUND~AREA, data = loyn)\npar(mfrow = c(1, 1))\nxv <- seq(0, 2000, 0.01)\n\n# 1. Potenzfunktion\nyv1 <- predict(power.model, list(AREA = xv))\nlines(xv, yv1, col = \"green\")\n\n# 2. Logistische Funktion\nyv2 <- predict(logistic.model, list(AREA = xv))\nlines(xv, yv2, col = \"blue\")\n\n#Visualisierung II\nplot(ABUND~log10(AREA), data = loyn)\npar(mfrow = c(1, 1))\n\n# 1. Potenzfunktion\nyv1 <- predict(power.model, list(AREA = xv))\nlines(log10(xv), yv1, col = \"green\")\n\n# 2. Logistische Funktion\nyv2 <- predict(logistic.model, list(AREA = xv))\nlines(log10(xv), yv2, col = \"blue\")\n\n#Model seletkion zwischen den nicht-lineraen Modelen\ncand.models<-list()\ncand.models[[1]] <- power.model\ncand.models[[2]] <- logistic.model\n\nModnames <- c(\"Power\", \"Logistic\")\n\naictab(cand.set = cand.models, modnames = Modnames)\n\nError in aictab(cand.set = cand.models, modnames = Modnames): konnte Funktion \"aictab\" nicht finden\n\n\n\n\n\nAbbildung 25.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 25.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 25.3: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 25.4: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik4_Demo.html#smoother",
    "href": "stat1-4/Statistik4_Demo.html#smoother",
    "title": "Stat4: Demo",
    "section": "Smoother",
    "text": "Smoother\n\nloyn$log_AREA<-log10(loyn$AREA)       \nplot(ABUND~log_AREA, data = loyn)\nlines(lowess(loyn$log_AREA, loyn$ABUND, f = 0.25), lwd = 2, col = \"red\")\nlines(lowess(loyn$log_AREA, loyn$ABUND, f = 0.5), lwd = 2, col = \"blue\")\nlines(lowess(loyn$log_AREA, loyn$ABUND, f = 1), lwd = 2, col = \"green\")\n\n\n\n\nAbbildung 25.5: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik4_Demo.html#gams",
    "href": "stat1-4/Statistik4_Demo.html#gams",
    "title": "Stat4: Demo",
    "section": "GAMs",
    "text": "GAMs\n\nif(!require(mgcv)){install.packages(\"mgcv\")}\nlibrary(mgcv)\n\ngam.1 <- gam(ABUND~s(log_AREA), data = loyn)\ngam.1\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nABUND ~ s(log_AREA)\n\nEstimated degrees of freedom:\n2.88  total = 3.88 \n\nGCV score: 52.145     \n\nsummary(gam.1)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nABUND ~ s(log_AREA)\n\nParametric coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  19.5143     0.9309   20.96   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n              edf Ref.df     F p-value    \ns(log_AREA) 2.884  3.628 21.14  <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.579   Deviance explained = 60.1%\nGCV = 52.145  Scale est. = 48.529    n = 56\n\nplot(loyn$log_AREA, loyn$ABUND, pch = 16)\nxv <- seq(-1,4, by = 0.1)\nyv <- predict(gam.1, list(log_AREA = xv))\nlines(xv, yv, lwd = 2, col = \"red\")\n\nAICc(gam.1)\n\nError in AICc(gam.1): konnte Funktion \"AICc\" nicht finden\n\nsummary(gam.1)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\nABUND ~ s(log_AREA)\n\nParametric coefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  19.5143     0.9309   20.96   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nApproximate significance of smooth terms:\n              edf Ref.df     F p-value    \ns(log_AREA) 2.884  3.628 21.14  <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nR-sq.(adj) =  0.579   Deviance explained = 60.1%\nGCV = 52.145  Scale est. = 48.529    n = 56\n\n\n\n\n\nAbbildung 25.6: Generierter Plot"
  },
  {
    "objectID": "stat1-4/Statistik4_Uebung.html",
    "href": "stat1-4/Statistik4_Uebung.html",
    "title": "Stat4: Übung",
    "section": "",
    "text": "Datensatz Curonian_Spit.csv\nDieser enthält gemittelte Pflanzenartenzahlen (Species.richness) von geschachtelten Plots (Vegetationsaufnahmen) der Pflanzengesellschaft LolioCynosuretum im Nationalpark Kurische Nehrung (Russland) auf Flächengrössen (Area) von 0.0001 bis 900 m².\nErmittelt den funktionellen Zusammenhang (das beste Modell), der die Zunahme der Artenzahl mit der Flächengrösse am besten beschreibt.Berücksichtigt dabei mindestens die Potenzfunktion (power function, die logarithmische Funktion (logarithmic function,und eine Funktion mit Sättigung (saturation, asymptote) eurer Wahl."
  },
  {
    "objectID": "stat1-4/Statistik4_Uebung.html#aufgabe-4.2n-logistische-regression-natwis",
    "href": "stat1-4/Statistik4_Uebung.html#aufgabe-4.2n-logistische-regression-natwis",
    "title": "Stat4: Übung",
    "section": "Aufgabe 4.2N: Logistische Regression (NatWis)",
    "text": "Aufgabe 4.2N: Logistische Regression (NatWis)\nDatensatz polis.csv\nDer Datensatz polis.csv beschreibt für 19 Inseln im Golf von Kalifornien, ob Eidechsen der Gattung Uta vorkommen (presence/absence: PA) in Abhängigkeit von der Form der Inseln (Verhältnis Umfang zu Fläche: RATIO).\nBitte prüft mit einer logistischen Regression, ob und ggf. wie die Inselform die Präsenz der Eidechsen beinflusst"
  },
  {
    "objectID": "stat1-4/Statistik4_Uebung.html#aufgabe-4.2s-multiple-logistische-regression-sozwis",
    "href": "stat1-4/Statistik4_Uebung.html#aufgabe-4.2s-multiple-logistische-regression-sozwis",
    "title": "Stat4: Übung",
    "section": "Aufgabe 4.2S: Multiple logistische Regression (SozWis)",
    "text": "Aufgabe 4.2S: Multiple logistische Regression (SozWis)\nDatensatz Datensatz_novanimal_Uebung_Statistik4.2.csv\nFührt mit dem Datensatz der Gästebefragung eine logistische Regression durch. Kann der Mensabesuch durch die sozioökonomischen Variablen (Alter, Geschlecht, Hochschulzugehörigkeit), wahrgenommener Fleischkonsum und Umwelteinstellung vorhergesagt werden?"
  },
  {
    "objectID": "Stat5-8.html",
    "href": "Stat5-8.html",
    "title": "Statistik 5 - 8",
    "section": "",
    "text": "Statistik 6\nStatistik 6 führt in multivariat-deskriptive Methoden ein, die dazu dienen Datensätze mit multiplen abhängigen und multiplen unabhängigen Variablen effektiv zu analysieren. Dabei betonen Ordinationen kontinuierliche Gradienten und fokussieren auf zusammengehörende Variablen, während Cluster-Analysen Diskontinuitäten betonen und auf zusammengehörende Beobachtungen fokussieren. Es folgt eine konzeptionelle Einführung in die Idee von Ordinationen als einer Technik der deskriptiven Statistik, die Strukturen in multivariaten Datensätzen via Dimensionsreduktion visualisiert. Das Prinzip und die praktische Implementierung wird detailliert am Beispiel der Hauptkomponentenanalyse (PCA) erklärt. Danach folgen kurze Einführungen in weitere Ordinationstechniken für besondere Fälle, welche bestimmte Limitierungen der PCA überwinden, namentlich CA, DCA und NMDS.\n\n\nStatistik 7\nIn Statistik 7 beschäftigen wir uns zunächst damit, wie wir Ordinationsdiagramme informativer gestalten können, etwa durch die Beschriftung der Beobachtunge, post-hoc-Projektion der Prädiktorvariablen oder Response surfaces. Während wir bislang mit «unconstrained» Ordinationen gearbeitet haben, welche die Gesamtvariabilität in den Beobachtungen visualisieren, beschränken die jeweiligen «constrained»-Varianten derselben Ordinationsmethoden die Betrachtung auf den Teil der Variabilität, welcher durch eine Linearkombination der berücksichtigen Prädiktoren erklärt werden kann. Wir beschäftigen uns im Detail mit der Redundanz-Analyse (RDA), der «constrained»-Variante der PCA und gehen einen kompletten analytischen Ablauf mit Aufbereitung, Interpretation und Visualisierung der Ergebnisse am Beispiel eines gemeinschaftsökologischen Datensatzes (Fischgesellschaften und Umweltfaktoren im Jura-Fluss Doubs) durch\n\n\nStatistik 8\nIn Statistik 8 lernen die Studierenden Clusteranalysen/Klassifikationen als eine den Ordinationen komplementäre Technik der deskriptiven Statistik multivariater Datensätze kennen. Es gibt Partitionierungen (ohne Hierarchie), divisive und agglomerative Clusteranalysen (die jeweils eine Hierarchie produzieren). Etwas genauer gehen wir auf die k-means Clusteranalyse (eine Partitionierung) und eine Reihe von agglomerativen Clusterverfahren ein. Hierbei hat das gewählte Distanzmass und der Modus für die sukzessive Fusion von Clustern einen grossen Einfluss auf das Endergebnis. Wir besprechen ferner, wie man die Ergebnisse von Clusteranalysen adäquat visualisieren und mit anderen statistischen Prozeduren kombinieren kann. Im Abschluss von Statistik 8 werden wir dann die an den acht Statistiktagen behandelten Verfahren noch einmal rückblickend betrachten und thematisieren, welches Verfahren wann gewählt werden sollte. Ebenfalls ist Platz, um den adäquaten Ablauf statistischer Analysen vom Einlesen der Daten bis zur Verschriftlichung der Ergebnisse, einschliesslich der verschiedenen zu treffenden Entscheidungen, zu thematisieren.\n\n\n\n\n\n\n\n   \n     \n     \n       Sortieren nach\n       Voreinstellung\n         \n          Datum - Datum (aufsteigend)\n        \n         \n          Datum - Neueste\n        \n         \n          Titel\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitel\n\n\nDatum\n\n\nLesson\n\n\nThema\n\n\n\n\n\n\nStat5: Demo\n\n\n2022-11-14\n\n\nStat5\n\n\nVon linearen Modellen zu GLMMs\n\n\n\n\nStat5: Übung\n\n\n2022-11-14\n\n\nStat5\n\n\nVon linearen Modellen zu GLMMs\n\n\n\n\nStat6: Demo\n\n\n2022-11-15\n\n\nStat6\n\n\nEinführung in “multivariate” Methoden\n\n\n\n\nStat6: Übung\n\n\n2022-11-15\n\n\nStat6\n\n\nEinführung in “multivariate” Methoden\n\n\n\n\nStat7: Demo\n\n\n2022-11-21\n\n\nStat7\n\n\nOrdinationen II\n\n\n\n\nStat7: Übung\n\n\n2022-11-21\n\n\nStat7\n\n\nOrdinationen II\n\n\n\n\nStat8: Demo\n\n\n2022-11-22\n\n\nStat8\n\n\nClusteranalysen\n\n\n\n\nStat8: Übung\n\n\n2022-11-22\n\n\nStat8\n\n\nClusteranalysen\n\n\n\n\n\n\nKeine Treffer"
  },
  {
    "objectID": "stat5-8/Statistik5_Demo.html",
    "href": "stat5-8/Statistik5_Demo.html",
    "title": "Stat5: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)\nDatensatz spf.csv\nDatensatz DeerEcervi.txt"
  },
  {
    "objectID": "stat5-8/Statistik5_Demo.html#split-plot-anova",
    "href": "stat5-8/Statistik5_Demo.html#split-plot-anova",
    "title": "Stat5: Demo",
    "section": "Split-plot ANOVA",
    "text": "Split-plot ANOVA\nBased on Logan (2010), Chapter 14\n\nspf <- read.delim(\"datasets/statistik/spf.csv\", sep = \";\") \nspf.aov <- aov(Reaktion~Signal * Messung + Error(VP), data = spf)\nsummary(spf.aov)\n\n\nError: VP\n          Df Sum Sq Mean Sq F value Pr(>F)\nSignal     1  3.125   3.125       2  0.207\nResiduals  6  9.375   1.562               \n\nError: Within\n               Df Sum Sq Mean Sq F value   Pr(>F)    \nMessung         3 194.50   64.83  127.89 2.52e-12 ***\nSignal:Messung  3  19.37    6.46   12.74 0.000105 ***\nResiduals      18   9.13    0.51                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\ninteraction.plot(spf$Messung, spf$Signal, spf$Reaktion)\n\n# nun als LMM\nif(!require(nlme)){install.packages(\"nlme\")}\nlibrary(nlme)\n\n# mit random intercept (VP) und random slope (Messung)\nspf.lme.1 <- lme(Reaktion~Signal * Messung, random = ~Messung | VP, data = spf)\n# nur random intercept\nspf.lme.2 <- lme(Reaktion~Signal * Messung, random = ~1 | VP, data = spf)\n\nanova(spf.lme.1)\n\n               numDF denDF   F-value p-value\n(Intercept)        1    18 1488.1631  <.0001\nSignal             1     6    2.0808  0.1993\nMessung            3    18   70.7887  <.0001\nSignal:Messung     3    18   11.8592  0.0002\n\nanova(spf.lme.2)\n\n               numDF denDF  F-value p-value\n(Intercept)        1    18 591.6800  <.0001\nSignal             1     6   2.0000  0.2070\nMessung            3    18 127.8904  <.0001\nSignal:Messung     3    18  12.7397  0.0001\n\nsummary(spf.lme.1)\n\nLinear mixed-effects model fit by REML\n  Data: spf \n       AIC      BIC    logLik\n  97.63924 120.0223 -29.81962\n\nRandom effects:\n Formula: ~Messung | VP\n Structure: General positive-definite, Log-Cholesky parametrization\n            StdDev    Corr                \n(Intercept) 1.0801385 (Intr) MssnH2 MssnH3\nMessungH2   0.6455527 -0.717              \nMessungH3   0.6455528 -0.837  0.600       \nMessungH4   1.3229024 -0.816  0.390  0.878\nResidual    0.2886126                     \n\nFixed effects:  Reaktion ~ Signal * Messung \n                        Value Std.Error DF   t-value p-value\n(Intercept)              3.75 0.5590162 18  6.708213  0.0000\nSignalvisuell           -2.00 0.7905683  6 -2.529826  0.0447\nMessungH2                0.25 0.3818811 18  0.654654  0.5210\nMessungH3                3.25 0.3818811 18  8.510501  0.0000\nMessungH4                4.25 0.6922184 18  6.139681  0.0000\nSignalvisuell:MessungH2  1.00 0.5400614 18  1.851641  0.0806\nSignalvisuell:MessungH3  0.50 0.5400615 18  0.925821  0.3668\nSignalvisuell:MessungH4  4.00 0.9789446 18  4.086033  0.0007\n Correlation: \n                        (Intr) Sgnlvs MssnH2 MssnH3 MssnH4 Sg:MH2 Sg:MH3\nSignalvisuell           -0.707                                          \nMessungH2               -0.683  0.483                                   \nMessungH3               -0.781  0.552  0.571                            \nMessungH4               -0.808  0.571  0.394  0.788                     \nSignalvisuell:MessungH2  0.483 -0.683 -0.707 -0.404 -0.279              \nSignalvisuell:MessungH3  0.552 -0.781 -0.404 -0.707 -0.557  0.571       \nSignalvisuell:MessungH4  0.571 -0.808 -0.279 -0.557 -0.707  0.394  0.788\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-0.86583578 -0.26649517 -0.03263197  0.23603775  0.95285749 \n\nNumber of Observations: 32\nNumber of Groups: 8 \n\nsummary(spf.lme.2)\n\nLinear mixed-effects model fit by REML\n  Data: spf \n       AIC      BIC    logLik\n  89.64876 101.4293 -34.82438\n\nRandom effects:\n Formula: ~1 | VP\n        (Intercept)  Residual\nStdDev:   0.5137012 0.7120003\n\nFixed effects:  Reaktion ~ Signal * Messung \n                        Value Std.Error DF   t-value p-value\n(Intercept)              3.75 0.4389856 18  8.542422  0.0000\nSignalvisuell           -2.00 0.6208194  6 -3.221549  0.0181\nMessungH2                0.25 0.5034602 18  0.496564  0.6255\nMessungH3                3.25 0.5034602 18  6.455326  0.0000\nMessungH4                4.25 0.5034602 18  8.441580  0.0000\nSignalvisuell:MessungH2  1.00 0.7120003 18  1.404494  0.1772\nSignalvisuell:MessungH3  0.50 0.7120003 18  0.702247  0.4915\nSignalvisuell:MessungH4  4.00 0.7120003 18  5.617975  0.0000\n Correlation: \n                        (Intr) Sgnlvs MssnH2 MssnH3 MssnH4 Sg:MH2 Sg:MH3\nSignalvisuell           -0.707                                          \nMessungH2               -0.573  0.405                                   \nMessungH3               -0.573  0.405  0.500                            \nMessungH4               -0.573  0.405  0.500  0.500                     \nSignalvisuell:MessungH2  0.405 -0.573 -0.707 -0.354 -0.354              \nSignalvisuell:MessungH3  0.405 -0.573 -0.354 -0.707 -0.354  0.500       \nSignalvisuell:MessungH4  0.405 -0.573 -0.354 -0.354 -0.707  0.500  0.500\n\nStandardized Within-Group Residuals:\n        Min          Q1         Med          Q3         Max \n-1.34519292 -0.63943480 -0.06164167  0.41510594  2.15199656 \n\nNumber of Observations: 32\nNumber of Groups: 8 \n\n\n\n\n\nAbbildung 27.1: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik5_Demo.html#glmm",
    "href": "stat5-8/Statistik5_Demo.html#glmm",
    "title": "Stat5: Demo",
    "section": "GLMM",
    "text": "GLMM\nBased on Zuur et al. (2009), chapter 13\n\nDeerEcervi <- read.delim(\"datasets/statistik/DeerEcervi.txt\", sep = \"\", stringsAsFactors = T)\n\n# Anzahl Larven hier in Presence/Absence übersetzt\nDeerEcervi$Ecervi.01 <- DeerEcervi$Ecervi\nDeerEcervi$Ecervi.01[DeerEcervi$Ecervi>0] <- 1\n\n#Numerische Geschlechtscodierung als Factor\nDeerEcervi$fSex <- as.factor(DeerEcervi$Sex)\n\nHirschlänge hier standardisiert, sonst würde der Achsenabschnitt im Modell für einen Hirsch der Länge 0 modelliert, was schlecht interpretierbar ist, jetzt ist der Achsenabschnitt für einen durschnittlich langen Hirsch\n\nDeerEcervi$CLength <- DeerEcervi$Length - mean(DeerEcervi$Length)\n\n# Zunächst als GLM\n# Interaktionen mit fFarm nicht berücksichtigt, da zu viele Freiheitsgrade verbraucht würden\nDE.glm <- glm(Ecervi.01 ~ CLength * fSex + Farm, family = binomial, data = DeerEcervi)\n\ndrop1(DE.glm, test = \"Chi\")\n\nSingle term deletions\n\nModel:\nEcervi.01 ~ CLength * fSex + Farm\n             Df Deviance     AIC     LRT  Pr(>Chi)    \n<none>            745.50  799.50                      \nFarm         23  1003.72 1011.72 258.225 < 2.2e-16 ***\nCLength:fSex  1   755.48  807.48   9.984  0.001579 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nsummary(DE.glm)\n\n\nCall:\nglm(formula = Ecervi.01 ~ CLength * fSex + Farm, family = binomial, \n    data = DeerEcervi)\n\nDeviance Residuals: \n    Min       1Q   Median       3Q      Max  \n-2.8400  -0.7576   0.3556   0.6431   2.2964  \n\nCoefficients:\n                Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   -1.796e+00  5.900e-01  -3.044 0.002336 ** \nCLength        4.062e-02  7.132e-03   5.695 1.24e-08 ***\nfSex2          6.280e-01  2.292e-01   2.740 0.006150 ** \nFarmAU         3.340e+00  7.841e-01   4.259 2.05e-05 ***\nFarmBA         3.510e+00  7.150e-01   4.908 9.19e-07 ***\nFarmBE         1.883e+01  6.216e+02   0.030 0.975831    \nFarmCB         3.012e+00  6.573e-01   4.583 4.58e-06 ***\nFarmCRC       -1.293e+01  2.400e+03  -0.005 0.995701    \nFarmHB        -2.364e-01  9.730e-01  -0.243 0.808045    \nFarmLN         3.831e+00  8.881e-01   4.314 1.60e-05 ***\nFarmMAN        1.046e+00  6.960e-01   1.503 0.132855    \nFarmMB         3.693e+00  8.152e-01   4.529 5.91e-06 ***\nFarmMO         9.722e-01  5.969e-01   1.629 0.103380    \nFarmNC         1.370e+00  6.904e-01   1.985 0.047169 *  \nFarmNV         2.098e+00  7.702e-01   2.725 0.006435 ** \nFarmPN         4.185e+00  8.584e-01   4.875 1.09e-06 ***\nFarmQM         3.975e+00  7.220e-01   5.506 3.68e-08 ***\nFarmRF         4.552e+00  1.050e+00   4.337 1.45e-05 ***\nFarmRN         8.706e-01  7.454e-01   1.168 0.242822    \nFarmRO         4.555e+00  9.556e-01   4.766 1.88e-06 ***\nFarmSAU       -1.545e+01  1.368e+03  -0.011 0.990986    \nFarmSE         2.785e+00  7.876e-01   3.536 0.000407 ***\nFarmTI         3.900e+00  1.166e+00   3.343 0.000828 ***\nFarmTN         3.102e+00  7.665e-01   4.046 5.21e-05 ***\nFarmVISO       3.720e+00  1.011e+00   3.679 0.000234 ***\nFarmVY         3.974e+00  1.257e+00   3.162 0.001565 ** \nCLength:fSex2  3.618e-02  1.168e-02   3.097 0.001953 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 1073.1  on 825  degrees of freedom\nResidual deviance:  745.5  on 799  degrees of freedom\nAIC: 799.5\n\nNumber of Fisher Scoring iterations: 15\n\nanova(DE.glm)\n\nAnalysis of Deviance Table\n\nModel: binomial, link: logit\n\nResponse: Ecervi.01\n\nTerms added sequentially (first to last)\n\n             Df Deviance Resid. Df Resid. Dev\nNULL                           825    1073.13\nCLength       1   64.815       824    1008.31\nfSex          1    0.191       823    1008.12\nFarm         23  252.638       800     755.48\nCLength:fSex  1    9.984       799     745.50\n\n# Response curves für die einzelnen Farmen (Weibliche Tiere: fSex = \"1\" )\nplot(DeerEcervi$CLength, DeerEcervi$Ecervi.01,\n     xlab = \"Length\", ylab = \"Probability of \\\n     presence of E. cervi L1\")\n\nI <- order(DeerEcervi$CLength)\nAllFarms <- unique(DeerEcervi$Farm)\nfor (j in AllFarms){\n  mydata <- data.frame(CLength=DeerEcervi$CLength, fSex = \"1\",\n                       Farm = j)\n  n <- dim(mydata)[1]\n  if (n>10){\n    P.DE2 <- predict(DE.glm, mydata, type = \"response\")\n    lines(mydata$CLength[I], P.DE2[I])\n  }}\n\n\n\n\nAbbildung 27.2: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik5_Demo.html#glmm-1",
    "href": "stat5-8/Statistik5_Demo.html#glmm-1",
    "title": "Stat5: Demo",
    "section": "GLMM",
    "text": "GLMM\n\nif(!require(MASS)){install.packages(\"MASS\")}\nlibrary(MASS)\nDE.PQL <- glmmPQL(Ecervi.01 ~ CLength * fSex,\n                random = ~ 1 | Farm, family = binomial, data = DeerEcervi)\nsummary(DE.PQL)\n\nLinear mixed-effects model fit by maximum likelihood\n  Data: DeerEcervi \n  AIC BIC logLik\n   NA  NA     NA\n\nRandom effects:\n Formula: ~1 | Farm\n        (Intercept)  Residual\nStdDev:    1.462108 0.9620576\n\nVariance function:\n Structure: fixed weights\n Formula: ~invwt \nFixed effects:  Ecervi.01 ~ CLength * fSex \n                  Value Std.Error  DF  t-value p-value\n(Intercept)   0.8883697 0.3373283 799 2.633547  0.0086\nCLength       0.0378608 0.0065269 799 5.800768  0.0000\nfSex2         0.6104570 0.2137293 799 2.856216  0.0044\nCLength:fSex2 0.0350666 0.0108558 799 3.230228  0.0013\n Correlation: \n              (Intr) CLngth fSex2 \nCLength       -0.108              \nfSex2         -0.191  0.230       \nCLength:fSex2  0.092 -0.522  0.235\n\nStandardized Within-Group Residuals:\n       Min         Q1        Med         Q3        Max \n-6.3466592 -0.6387839  0.2978382  0.5218829  3.4912879 \n\nNumber of Observations: 826\nNumber of Groups: 24 \n\ng <- 0.8883697 + 0.0378608 * DeerEcervi$CLength\np.averageFarm1 <- exp(g)/(1 + exp(g))\nI <- order(DeerEcervi$CLength)  #Avoid spaghetti plot\nplot(DeerEcervi$CLength, DeerEcervi$Ecervi.01, xlab=\"Length\",\n     ylab = \"Probability of presence of E. cervi L1\")\nlines(DeerEcervi$CLength[I], p.averageFarm1[I],lwd = 3)\np.Upp <- exp(g + 1.96 * 1.462108)/(1 + exp(g + 1.96 * 1.462108))\np.Low <- exp(g - 1.96 * 1.462108)/(1 + exp(g - 1.96 * 1.462108))\nlines(DeerEcervi$CLength[I], p.Upp[I])\nlines(DeerEcervi$CLength[I], p.Low[I])\n\nif(!require(lme4)){install.packages(\"lme4\")}\nlibrary(lme4)\nDE.lme4 <- glmer(Ecervi.01 ~ CLength * fSex + (1|Farm), \n                 family = binomial, data = DeerEcervi)\nsummary(DE.lme4)\n\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: Ecervi.01 ~ CLength * fSex + (1 | Farm)\n   Data: DeerEcervi\n\n     AIC      BIC   logLik deviance df.resid \n   832.6    856.1   -411.3    822.6      821 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-6.2678 -0.6090  0.2809  0.5022  3.4546 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n Farm   (Intercept) 2.391    1.546   \nNumber of obs: 826, groups:  Farm, 24\n\nFixed effects:\n              Estimate Std. Error z value Pr(>|z|)    \n(Intercept)   0.938969   0.356004   2.638  0.00835 ** \nCLength       0.038964   0.006917   5.633 1.77e-08 ***\nfSex2         0.624487   0.222938   2.801  0.00509 ** \nCLength:fSex2 0.035859   0.011409   3.143  0.00167 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) CLngth fSex2 \nCLength     -0.107              \nfSex2       -0.189  0.238       \nCLngth:fSx2  0.091 -0.514  0.232\n\nif(!require(glmmML)){install.packages(\"glmmML\")}\nlibrary(glmmML)\nDE.glmmML <- glmmML(Ecervi.01 ~ CLength * fSex,\n                  cluster = Farm, family = binomial, data = DeerEcervi)\nsummary(DE.glmmML)\n\n\nCall:  glmmML(formula = Ecervi.01 ~ CLength * fSex, family = binomial,      data = DeerEcervi, cluster = Farm) \n\n                 coef se(coef)     z Pr(>|z|)\n(Intercept)   0.93968 0.357915 2.625 8.65e-03\nCLength       0.03898 0.006956 5.604 2.10e-08\nfSex2         0.62451 0.224251 2.785 5.35e-03\nCLength:fSex2 0.03586 0.011437 3.135 1.72e-03\n\nScale parameter in mixing distribution:  1.547 gaussian \nStd. Error:                              0.2975 \n\n        LR p-value for H_0: sigma = 0:  1.346e-41 \n\nResidual deviance: 822.6 on 821 degrees of freedom  AIC: 832.6 \n\n\n\n\n\nAbbildung 27.3: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik5_Uebung.html",
    "href": "stat5-8/Statistik5_Uebung.html",
    "title": "Stat5: Übung",
    "section": "",
    "text": "Datensatz splityield.csv\nVersuch zum Ernteertrag (yield) einer Kulturpflanze in Abhängigkeit der drei Faktoren Bewässerung (irrigated vs. control), Düngung (N, NP, P) und Aussaatdichten (low, medium, high). Es gab vier ganze Felder (block), die zwei Hälften mit den beiden Bewässerungstreatments, diese wiederum drei Drittel für die drei Saatdichten und diese schliesslich je drei Drittel für die drei Düngertreatments hatten.\n\n\n\nBestimmt das minimal adäquate Modell\nStellt die Ergebnisse da"
  },
  {
    "objectID": "stat5-8/Statistik5_Uebung.html#aufgabe-5.2-glmm",
    "href": "stat5-8/Statistik5_Uebung.html#aufgabe-5.2-glmm",
    "title": "Stat5: Übung",
    "section": "Aufgabe 5.2: GLMM",
    "text": "Aufgabe 5.2: GLMM\nDatensatz Datensatz_novanimal_Uebung_Statistik5.2.csv\nFührt mit dem novanimal Datensatz (inviduelle Daten) eine logistische Regression durch, wobei ihr die einzelnen Käufer (single campus_card holder) als weitere randomisierte Variable mitberücksichtigt. Kann der Fleischkonsum durch das Geschlecht, die Hochschulzugehörigkeit und das Alter erklärt werden? Vergleich die Ergebnisse mit der eurem multiplen logistische Modell von Aufgabe 4.2.\n\nAufgaben\n\nBestimmt das minimal adäquate Modell\nStellt die Ergebnisse dar"
  },
  {
    "objectID": "stat5-8/Statistik6_Demo.html",
    "href": "stat5-8/Statistik6_Demo.html",
    "title": "Stat6: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)"
  },
  {
    "objectID": "stat5-8/Statistik6_Demo.html#ordinationen-i",
    "href": "stat5-8/Statistik6_Demo.html#ordinationen-i",
    "title": "Stat6: Demo",
    "section": "Ordinationen I",
    "text": "Ordinationen I\n\nPCA\n\nif(!require(labdsv)){install.packages(\"labdsv\")}\nlibrary(labdsv)\n\n# Für Ordinationen benötigen wir Matrizen, nicht Data.frames\n# Generieren von Daten\nraw <- matrix(c(1, 2, 2.5, 2.5, 1, 0.5, 0, 1, 2, 4, 3, 1), nrow = 6)\ncolnames(raw) <- c(\"spec.1\", \"spec.2\")\nrownames(raw) <- c(\"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\")\nraw\n\n   spec.1 spec.2\nr1    1.0      0\nr2    2.0      1\nr3    2.5      2\nr4    2.5      4\nr5    1.0      3\nr6    0.5      1\n\n# Originale Daten im zweidimensionalen Raum\nx1 <- raw[,1]\ny1 <- raw[,2]\nz <- c(rep(1:6))\n\n# Plot Abhängigkeit der Arten vom Umweltgradienten\nplot(c(x1, y1)~c(z, z), type = \"n\", axes = T, bty = \"l\", \n     las = 1, xlim = c(1,6), ylim = c(0,5),\n     xlab = \"Umweltgradient\", ylab = \"Deckung der Arten\")\npoints(x1~z, pch = 21, type = \"b\")\npoints(y1~z, pch = 16, type = \"b\")\n\n# zentrierte Daten\ncent <- scale(raw, scale = F)\nx2 <- cent[,1]\ny2 <- cent[,2]\n\n# rotierte Daten\no.pca <- pca(raw)\nx3 <- o.pca$scores[,1]\ny3 <- o.pca$scores[,2]\n\n# Visualisierung der Schritte im Ordinationsraum\nplot(c(y1, y2, y3)~c(x1, x2, x3), type = \"n\", axes = T, bty = \"l\", las = 1,\n     xlim = c(-4, 4), ylim = c(-4, 4), xlab = \"Art 1\", ylab=  \"Art 2\")\npoints(y1~x1, pch = 21, type = \"b\", col = \"green\", lwd = 2)\npoints(y2~x2, pch = 16, type = \"b\",col = \"red\", lwd = 2)\npoints(y3~x3, pch = 17, type = \"b\", col = \"blue\", lwd = 2)\n\n# Durchführung der PCA\no.pca <- pca(raw)\n\n# Koordinaten im Ordinationsraum\no.pca$scores\n\n          PC1         PC2\nr1 -1.9216223 -0.09357697\nr2 -0.6353776 -0.68143293\nr3  0.4762699 -0.80076373\nr4  2.3503705 -0.10237502\nr5  0.8895287  0.95400610\nr6 -1.1591692  0.72414255\n\n# Korrelationen der Variablen mit den Ordinationsachsen\no.pca$loadings\n\n             PC1        PC2\nspec.1 0.3491944 -0.9370503\nspec.2 0.9370503  0.3491944\n\n#Erklärte Varianz der Achsen\nE <- o.pca$sdev^2 / o.pca$totdev * 100\nE\n\n[1] 82.40009 17.59991\n\n# mit prcomp\npca.2 <- prcomp(raw, scale = F)\nsummary(pca.2)\n\nImportance of components:\n                         PC1    PC2\nStandard deviation     1.548 0.7154\nProportion of Variance 0.824 0.1760\nCumulative Proportion  0.824 1.0000\n\nplot(pca.2)\nbiplot(pca.2)\n\n# mit vegan\nif(!require(vegan)){install.packages(\"vegan\")}\nlibrary(\"vegan\")\n# Die Funktion rda führt ein PCA aus an wenn nicht Artdaten UND Umweltdaten definiert werden\npca.3 <- rda(raw, scale = FALSE)\n#scores(pca.3, display = c(\"sites\"))\n#scores(pca.3, display = c(\"species\"))\nsummary(pca.3, axes = 0)\n\n\nCall:\nrda(X = raw, scale = FALSE) \n\nPartitioning of variance:\n              Inertia Proportion\nTotal           2.908          1\nUnconstrained   2.908          1\n\nEigenvalues, and their contribution to the variance \n\nImportance of components:\n                        PC1    PC2\nEigenvalue            2.396 0.5119\nProportion Explained  0.824 0.1760\nCumulative Proportion 0.824 1.0000\n\nScaling 2 for species and site scores\n* Species are scaled proportional to eigenvalues\n* Sites are unscaled: weighted dispersion equal on all dimensions\n* General scaling constant of scores:  \n\nbiplot(pca.3)\n\n# Mit Beispieldaten aus Wildi\nif(!require(dave)){install.packages(\"dave\")}\nlibrary(dave)\ndata(sveg)\n\n\n\n\nAbbildung 29.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.3: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.4: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.5: Generierter Plot\n\n\n\n\n\nstr(sveg)\nsummary(sveg)\nnames(sveg)\n\n\n# PCA: Deckungen Wurzeltransformiert, cor=T erzwingt Nutzung der Korrelationsmatrix\npca.5 <- pca(sveg^0.25, cor = T)\n\n\n# Koordinaten im Ordinationsraum\npca.5$scores\n\n# Korrelationen der Variablen mit den Ordinationsachsen\npca.5$loadings\n\n\n# Erklärte Varianz der Achsen in Prozent (sdev ist die Wurzel daraus)\nE <- pca.5$sdev^2 / pca.5$totdev * 100\nE\n\n [1] 2.061885e+01 8.098205e+00 6.070537e+00 3.666650e+00 3.322363e+00\n [6] 3.128942e+00 3.003875e+00 2.634636e+00 2.605558e+00 2.449637e+00\n[11] 2.339344e+00 2.265430e+00 2.116464e+00 2.046578e+00 1.969912e+00\n[16] 1.871020e+00 1.777063e+00 1.693483e+00 1.524015e+00 1.503332e+00\n[21] 1.434245e+00 1.378271e+00 1.329404e+00 1.291336e+00 1.251895e+00\n[26] 1.186157e+00 1.109340e+00 1.068661e+00 1.044385e+00 9.891552e-01\n[31] 9.764586e-01 8.869747e-01 8.451212e-01 8.049318e-01 7.603242e-01\n[36] 7.311274e-01 6.945830e-01 6.339064e-01 6.063542e-01 5.502527e-01\n[41] 5.411059e-01 4.956931e-01 4.795188e-01 4.601244e-01 3.936176e-01\n[46] 3.477631e-01 3.402128e-01 3.165971e-01 2.951856e-01 2.728882e-01\n[51] 2.635725e-01 2.233500e-01 2.125542e-01 1.989449e-01 1.681852e-01\n[56] 1.555571e-01 1.485298e-01 1.271079e-01 9.164615e-02 7.880113e-02\n[61] 5.913306e-02 5.113452e-02 4.066351e-30\n\nE[1:5]\n\n[1] 20.618848  8.098205  6.070537  3.666650  3.322363\n\n# PCA-Plot der Lage der Beobachtungen im Ordinationsraum\nplot(pca.5$scores[,1], pca.5$scores[,2], type = \"n\", asp = 1, xlab = \"PC1\", ylab = \"PC2\")\npoints(pca.5$scores[,1], pca.5$scores[,2], pch = 18)\n\n# Subjektive Auswahl von Arten zur Darstellung\nsel.sp <- c(3, 11, 23, 39, 46, 72, 77, 96)\nsnames <- names(sveg[,sel.sp])\nsnames\n\n[1] \"Vaccinium.oxycoccos\" \"Carex.echinata\"      \"Arnica.montana\"     \n[4] \"Carex.pulicaris\"     \"Sphagnum.recurvum\"   \"Viola.palustris\"    \n[7] \"Galium.uliginosum\"   \"Stachys.officinalis\"\n\n# PCA-Plot der Korrelationen der Variablen (hier Arten) mit den Achsen (h)\nx <- pca.5$loadings[,1]\ny <- pca.5$loadings[,2]\nplot(x, y, type = \"n\", asp = 1)\narrows(0,0, x[sel.sp], y[sel.sp], length = 0.08)\ntext(x[sel.sp], y[sel.sp], snames, pos = 1, cex = 0.6)\n\n# Mit vegan\npca.6 <- rda(sveg^0.25, scale = TRUE)\n# Erklärte Varianz der Achsen\nsummary(pca.6, axes = 0)\n\n\nCall:\nrda(X = sveg^0.25, scale = TRUE) \n\nPartitioning of correlations:\n              Inertia Proportion\nTotal             119          1\nUnconstrained     119          1\n\nEigenvalues, and their contribution to the correlations \n\nImportance of components:\n                          PC1     PC2     PC3     PC4     PC5     PC6     PC7\nEigenvalue            24.5364 9.63686 7.22394 4.36331 3.95361 3.72344 3.57461\nProportion Explained   0.2062 0.08098 0.06071 0.03667 0.03322 0.03129 0.03004\nCumulative Proportion  0.2062 0.28717 0.34788 0.38454 0.41777 0.44906 0.47909\n                          PC8     PC9   PC10    PC11    PC12    PC13    PC14\nEigenvalue            3.13522 3.10061 2.9151 2.78382 2.69586 2.51859 2.43543\nProportion Explained  0.02635 0.02606 0.0245 0.02339 0.02265 0.02116 0.02047\nCumulative Proportion 0.50544 0.53150 0.5560 0.57939 0.60204 0.62320 0.64367\n                        PC15    PC16    PC17    PC18    PC19    PC20    PC21\nEigenvalue            2.3442 2.22651 2.11470 2.01524 1.81358 1.78896 1.70675\nProportion Explained  0.0197 0.01871 0.01777 0.01693 0.01524 0.01503 0.01434\nCumulative Proportion 0.6634 0.68208 0.69985 0.71679 0.73203 0.74706 0.76140\n                         PC22    PC23    PC24    PC25    PC26    PC27    PC28\nEigenvalue            1.64014 1.58199 1.53669 1.48976 1.41153 1.32011 1.27171\nProportion Explained  0.01378 0.01329 0.01291 0.01252 0.01186 0.01109 0.01069\nCumulative Proportion 0.77518 0.78848 0.80139 0.81391 0.82577 0.83687 0.84755\n                         PC29     PC30     PC31    PC32     PC33     PC34\nEigenvalue            1.24282 1.177095 1.161986 1.05550 1.005694 0.957869\nProportion Explained  0.01044 0.009892 0.009765 0.00887 0.008451 0.008049\nCumulative Proportion 0.85800 0.867887 0.877652 0.88652 0.894973 0.903022\n                          PC35     PC36     PC37     PC38     PC39     PC40\nEigenvalue            0.904786 0.870042 0.826554 0.754349 0.721562 0.654801\nProportion Explained  0.007603 0.007311 0.006946 0.006339 0.006064 0.005503\nCumulative Proportion 0.910626 0.917937 0.924883 0.931222 0.937285 0.942788\n                          PC41     PC42     PC43     PC44     PC45     PC46\nEigenvalue            0.643916 0.589875 0.570627 0.547548 0.468405 0.413838\nProportion Explained  0.005411 0.004957 0.004795 0.004601 0.003936 0.003478\nCumulative Proportion 0.948199 0.953156 0.957951 0.962552 0.966488 0.969966\n                          PC47     PC48     PC49     PC50     PC51     PC52\nEigenvalue            0.404853 0.376750 0.351271 0.324737 0.313651 0.265787\nProportion Explained  0.003402 0.003166 0.002952 0.002729 0.002636 0.002234\nCumulative Proportion 0.973368 0.976534 0.979486 0.982215 0.984851 0.987084\n                          PC53     PC54     PC55     PC56     PC57     PC58\nEigenvalue            0.252939 0.236744 0.200140 0.185113 0.176750 0.151258\nProportion Explained  0.002126 0.001989 0.001682 0.001556 0.001485 0.001271\nCumulative Proportion 0.989210 0.991199 0.992881 0.994436 0.995922 0.997193\n                           PC59     PC60      PC61      PC62\nEigenvalue            0.1090589 0.093773 0.0703683 0.0608501\nProportion Explained  0.0009165 0.000788 0.0005913 0.0005113\nCumulative Proportion 0.9981093 0.998897 0.9994887 1.0000000\n\nScaling 2 for species and site scores\n* Species are scaled proportional to eigenvalues\n* Sites are unscaled: weighted dispersion equal on all dimensions\n* General scaling constant of scores:  \n\n# PCA-Plot der Lage der Beobachtungen im Ordinationsraum\nbiplot(pca.6, display = \"sites\", type = \"points\", scaling = 1)\n# Subjektive Auswahl von Arten zur Darstellung\nsel.sp <- c(3, 11, 23, 39, 46, 72, 77, 96)\nsnames <- names(sveg[,sel.sp])\nsnames\n\n[1] \"Vaccinium.oxycoccos\" \"Carex.echinata\"      \"Arnica.montana\"     \n[4] \"Carex.pulicaris\"     \"Sphagnum.recurvum\"   \"Viola.palustris\"    \n[7] \"Galium.uliginosum\"   \"Stachys.officinalis\"\n\n# PCA-Plot der Korrelationen der Variablen (hier Arten) mit den Achsen (h)\nscores <- scores(pca.6, display = \"species\")\nx <- scores[,1]\ny <- scores[,2]\nplot(x, y, type = \"n\", asp = 1)\narrows(0,0, x[sel.sp], y[sel.sp], length = 0.08)\ntext(x[sel.sp], y[sel.sp], snames, pos = 1, cex = 0.6)\n\n# Mit angepassten Achsen\nplot(x, y, type = \"n\", asp = 1, xlim = c(-1, 1), ylim = c(-0.6, 0.6))\narrows(0,0, x[sel.sp], y[sel.sp], length = 0.08)\ntext(x[sel.sp], y[sel.sp], snames, pos = 1, cex = 0.6)\n\n\n\n\nAbbildung 29.6: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.7: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.8: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.9: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.10: Generierter Plot\n\n\n\n\n\n\nCA\n\nca.1 <- cca(sveg^0.5)\n# Arten (o) und Communities (+) plotten\nplot(ca.1)\n\n# Nur Arten plotten\nplot(ca.1, display = \"species\", type = \"points\")\n\n\n# Anteilige Varianz, die durch die ersten beiden Achsen erklärt wird\nca.1$CA$eig[1:2] / sum(ca.1$CA$eig)\n\n      CA1       CA2 \n0.1938717 0.0784178 \n\nsummary(eigenvals(ca.1))\n\nImportance of components:\n                         CA1     CA2     CA3     CA4     CA5     CA6     CA7\nEigenvalue            0.4248 0.17182 0.12995 0.09102 0.07954 0.07274 0.06705\nProportion Explained  0.1939 0.07842 0.05931 0.04154 0.03630 0.03320 0.03060\nCumulative Proportion 0.1939 0.27229 0.33160 0.37314 0.40944 0.44264 0.47324\n                          CA8     CA9    CA10    CA11    CA12    CA13   CA14\nEigenvalue            0.06245 0.05811 0.05348 0.05261 0.05133 0.04868 0.0480\nProportion Explained  0.02850 0.02652 0.02441 0.02401 0.02343 0.02222 0.0219\nCumulative Proportion 0.50174 0.52826 0.55267 0.57668 0.60010 0.62232 0.6442\n                         CA15    CA16    CA17    CA18    CA19    CA20    CA21\nEigenvalue            0.04421 0.04279 0.03913 0.03752 0.03699 0.03412 0.03309\nProportion Explained  0.02018 0.01953 0.01786 0.01712 0.01688 0.01557 0.01510\nCumulative Proportion 0.66440 0.68393 0.70179 0.71892 0.73580 0.75137 0.76647\n                         CA22    CA23    CA24    CA25    CA26    CA27    CA28\nEigenvalue            0.03253 0.03033 0.02963 0.02718 0.02621 0.02486 0.02372\nProportion Explained  0.01485 0.01384 0.01352 0.01241 0.01196 0.01135 0.01083\nCumulative Proportion 0.78132 0.79516 0.80869 0.82109 0.83305 0.84440 0.85523\n                         CA29     CA30     CA31     CA32     CA33     CA34\nEigenvalue            0.02262 0.021397 0.020274 0.018805 0.018216 0.017737\nProportion Explained  0.01032 0.009765 0.009253 0.008582 0.008314 0.008095\nCumulative Proportion 0.86555 0.875318 0.884571 0.893153 0.901467 0.909561\n                          CA35    CA36     CA37     CA38     CA39     CA40\nEigenvalue            0.016855 0.01422 0.014044 0.013002 0.011367 0.011185\nProportion Explained  0.007693 0.00649 0.006409 0.005934 0.005188 0.005105\nCumulative Proportion 0.917254 0.92374 0.930153 0.936087 0.941275 0.946379\n                          CA41     CA42     CA43     CA44     CA45     CA46\nEigenvalue            0.010417 0.010172 0.009513 0.009183 0.008162 0.007993\nProportion Explained  0.004754 0.004643 0.004342 0.004191 0.003725 0.003648\nCumulative Proportion 0.951133 0.955776 0.960118 0.964308 0.968033 0.971681\n                          CA47     CA48     CA49     CA50    CA51     CA52\nEigenvalue            0.006900 0.006684 0.006108 0.005493 0.00515 0.004995\nProportion Explained  0.003149 0.003051 0.002788 0.002507 0.00235 0.002279\nCumulative Proportion 0.974830 0.977881 0.980668 0.983176 0.98553 0.987805\n                          CA53     CA54     CA55     CA56     CA57     CA58\nEigenvalue            0.004426 0.004011 0.003517 0.003455 0.003059 0.002279\nProportion Explained  0.002020 0.001830 0.001605 0.001577 0.001396 0.001040\nCumulative Proportion 0.989825 0.991656 0.993261 0.994837 0.996233 0.997274\n                           CA59      CA60      CA61      CA62\nEigenvalue            0.0019296 0.0017784 0.0011904 0.0010752\nProportion Explained  0.0008807 0.0008116 0.0005433 0.0004907\nCumulative Proportion 0.9981544 0.9989660 0.9995093 1.0000000\n\n\n\n\n\nAbbildung 29.11: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.12: Generierter Plot\n\n\n\n\n\n\nDCA\n\nlibrary(vegan)\ndca.1 <- decorana(sveg, mk = 10)\nplot(dca.1, display = \"sites\", type = \"point\")\n\ndca.2 <- decorana(sveg, mk = 100)\nplot(dca.2, display = \"sites\", type = \"point\")\n\n\n\n\nAbbildung 29.13: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.14: Generierter Plot\n\n\n\n\n\n\nNMDS\n\n# Distanzmatrix als Start erzeugen\nmde <- vegdist(sveg, method = \"euclidean\")\n\n# Alternative mit einem für Vegetationsdaten häufig verwendeten Dissimilarity-index\nmde <- vegdist(sveg, method = \"bray\")\n\n#Z wei verschiedene NMDS-Methoden\nif(!require(MASS)){install.packages(\"MASS\")}\nlibrary(MASS)\nset.seed(1) # macht man, wenn man bei einer Wiederholung exakt die gleichen Ergebnisse will\nimds <- isoMDS(mde, k = 2)\n\ninitial  value 16.524491 \niter   5 value 12.518681\niter  10 value 12.025808\niter  10 value 12.020751\niter  10 value 12.020751\nfinal  value 12.020751 \nconverged\n\nset.seed(1)\nmmds <- metaMDS(mde, k = 2)\n\nRun 0 stress 0.1179909 \nRun 1 stress 0.1179909 \n... Procrustes: rmse 1.11122e-05  max resid 4.697213e-05 \n... Similar to previous best\nRun 2 stress 0.170918 \nRun 3 stress 0.1529993 \nRun 4 stress 0.1179909 \n... Procrustes: rmse 2.021269e-06  max resid 1.184555e-05 \n... Similar to previous best\nRun 5 stress 0.1252011 \nRun 6 stress 0.1583424 \nRun 7 stress 0.1181212 \n... Procrustes: rmse 0.006525662  max resid 0.04396629 \nRun 8 stress 0.1596312 \nRun 9 stress 0.1630026 \nRun 10 stress 0.1179909 \n... New best solution\n... Procrustes: rmse 3.475822e-06  max resid 2.360888e-05 \n... Similar to previous best\nRun 11 stress 0.1538119 \nRun 12 stress 0.1252011 \nRun 13 stress 0.1500845 \nRun 14 stress 0.1251634 \nRun 15 stress 0.1251634 \nRun 16 stress 0.1179909 \n... Procrustes: rmse 5.655652e-06  max resid 1.960818e-05 \n... Similar to previous best\nRun 17 stress 0.1179909 \n... Procrustes: rmse 7.036898e-06  max resid 2.755273e-05 \n... Similar to previous best\nRun 18 stress 0.1179909 \n... Procrustes: rmse 1.0129e-05  max resid 3.793497e-05 \n... Similar to previous best\nRun 19 stress 0.1251572 \nRun 20 stress 0.1179909 \n... Procrustes: rmse 5.011736e-06  max resid 2.261906e-05 \n... Similar to previous best\n*** Solution reached\n\nplot(imds$points)\nplot(mmds$points)\n\n#Stress = S² = Abweichung der zweidimensionalen NMDS-Lösung von der originalen Distanzmatrix\nstressplot(imds, mde)\nstressplot(mmds, mde)\n\n\n\n\nAbbildung 29.15: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.16: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.17: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 29.18: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik6_Uebung.html",
    "href": "stat5-8/Statistik6_Uebung.html",
    "title": "Stat6: Übung",
    "section": "",
    "text": "Datensatz: Doubs.RData\n\nLädt den Datensatz Doubs.RData mit dem folgenden Befehl ins R: load(“Doubs.RData”)\nDie Umweltvariablen findet ihr im data.frame env die Abundanzen im data.frame spe. Im data.frame fishtrait findet ihr die Vollständigen Namen der Fische\nDer Datensatz enthält Daten zum Vorkommen von Fischarten und den zugehörigen Umweltvariablen im Fluss Doubs (Jura). Es gibt 30 Probestellen (sites), an denen jeweils die Abundanzen von 27 Fischarten (auf einer Skalen von 0 bis 5) sowie 11 Umweltvariablen erhoben wurden:\n\ndfs = Distance from source (km)\nele = Elevation (m a.s.l.)\nslo = Slope (‰)\ndis = Mean annual discharge (m3 s-1)\npH = pH of water\nhar = Hardness (Ca concentration) (mg L-1)\npho = Phosphate concentration (mg L-1)\nnit = Nitrate concentration (mg L-1)\namm = Ammonium concentration (mg L-1)\noxy = Dissolved oxygen (mg L-1)\nbod = Biological oxygen demand (mg L-1)\n\nEure Aufgabe ist nun, in einem ersten Schritt eine PCA für die 11 Umweltvariablen zu rechnen. Da die einzelnen Variablen auf ganz unterschiedlichen Skalen gemessen wurden, ist dazu eine Standardisierung nötig (pca mit der Funktion rda, scale=TRUE). Überlegt, wie viele Achsen wichtig sind und für was sie jeweils stehen.\nIn einem zweiten Schritt sollen dann die vollständig unkorrelierten PCA-Achsen als Prädiktoren einer multiplen Regression zur Erklärung der Fischartenzahl (Anzahl kann z.B. kann mit dem Befehl specnumber(spe) ermittel werden) verwendet werden (wahlweise lm oder glm). Gebt das minimal adäquate Modell an und interpretiert dieses (wahlweise im frequentist oder information theoretician approach). (Wer noch mehr probieren möchte, kann zum Vergleich noch eine multiple Regression mit den Originaldaten rechnen)."
  },
  {
    "objectID": "stat5-8/Statistik7_Demo.html",
    "href": "stat5-8/Statistik7_Demo.html",
    "title": "Stat7: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)\nDatensatz Doubs.RData\nFunktion triplot.rda.R"
  },
  {
    "objectID": "stat5-8/Statistik7_Demo.html#ordinationen-ii",
    "href": "stat5-8/Statistik7_Demo.html#ordinationen-ii",
    "title": "Stat7: Demo",
    "section": "Ordinationen II",
    "text": "Ordinationen II\n\nInterpretation von Ordinationen\nWildi pp. 96 et seq.\n\n## Plot Arten\nif(!require(dave)){install.packages(\"dave\")}\nlibrary(dave)\nca <- cca(sveg^0.5)\n\n## Plot mit ausgewählten Arten\nsel.spec <- c(3, 11, 23, 31, 39, 46, 72, 77, 96)\nsnames <- names(sveg[,sel.spec])\nsnames\n\n[1] \"Vaccinium.oxycoccos\" \"Carex.echinata\"      \"Arnica.montana\"     \n[4] \"Festuca.rubra\"       \"Carex.pulicaris\"     \"Sphagnum.recurvum\"  \n[7] \"Viola.palustris\"     \"Galium.uliginosum\"   \"Stachys.officinalis\"\n\nscores <- scores(ca, display = \"species\", scaling = \"sites\")\nsx <- scores[sel.spec, 1]\nsy <- scores[sel.spec, 2]\nplot(ca, display = \"sites\", type = \"point\")\npoints(sx, sy, pch = 16)\nsnames <- make.cepnames(snames)\ntext(sx, sy, snames, pos = c(1,2,1,1,3,2,4,3,1), cex = 0.8)\n\n## Plot \"response surfaces\" in der CA\nplot(ca, display = \"sites\", type = \"point\")\nordisurf(ca, ssit$pH.peat, add = T)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ny ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n\nEstimated degrees of freedom:\n4.63  total = 5.63 \n\nREML score: 28.14791     \n\nplot(ca, display = \"sites\", type = \"points\")\nordisurf(ca, ssit$Waterlev.av, add = T, col = \"blue\")\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ny ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n\nEstimated degrees of freedom:\n5.07  total = 6.07 \n\nREML score: 161.492     \n\n## Das gleiche für die DCA\ndca <- decorana(sveg)\nplot(dca, display = \"sites\", type = \"points\")\nordisurf(dca, ssit$pH.peat, add = T)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ny ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n\nEstimated degrees of freedom:\n2.61  total = 3.61 \n\nREML score: 29.47878     \n\nordisurf(dca, ssit$Waterlev.av, add = T, col = \"blue\")\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ny ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n\nEstimated degrees of freedom:\n6.23  total = 7.23 \n\nREML score: 161.1293     \n\n## Das gleiche mit NMDS\nmde <- vegdist(sveg, method = \"euclidean\")\nmmds <- metaMDS(mde)\n\nRun 0 stress 0.1478603 \nRun 1 stress 0.1792628 \nRun 2 stress 0.148944 \nRun 3 stress 0.1978 \nRun 4 stress 0.1795324 \nRun 5 stress 0.1471305 \n... New best solution\n... Procrustes: rmse 0.01128026  max resid 0.06926748 \nRun 6 stress 0.1478603 \nRun 7 stress 0.1760608 \nRun 8 stress 0.1802729 \nRun 9 stress 0.1472017 \n... Procrustes: rmse 0.004284971  max resid 0.02127202 \nRun 10 stress 0.1462813 \n... New best solution\n... Procrustes: rmse 0.03020752  max resid 0.1480293 \nRun 11 stress 0.146296 \n... Procrustes: rmse 0.002120228  max resid 0.01304336 \nRun 12 stress 0.1611976 \nRun 13 stress 0.1990612 \nRun 14 stress 0.1602556 \nRun 15 stress 0.1801464 \nRun 16 stress 0.1478582 \nRun 17 stress 0.1950656 \nRun 18 stress 0.1471847 \nRun 19 stress 0.1958851 \nRun 20 stress 0.1478582 \n*** No convergence -- monoMDS stopping criteria:\n    14: stress ratio > sratmax\n     6: scale factor of the gradient < sfgrmin\n\nif(!require(MASS)){install.packages(\"MASS\")}\nlibrary(MASS)\nimds <- isoMDS(mde)\n\ninitial  value 21.981028 \niter   5 value 15.595142\niter  10 value 15.269201\nfinal  value 15.229997 \nconverged\n\nplot(mmds$points)\nordisurf(mmds, ssit$pH.peat, add = T)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ny ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n\nEstimated degrees of freedom:\n5.99  total = 6.99 \n\nREML score: 41.84472     \n\nordisurf(mmds, ssit$Waterlev.av,add = T, col = \"blue\")\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ny ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n\nEstimated degrees of freedom:\n6.32  total = 7.32 \n\nREML score: 168.9811     \n\nplot(imds$points)\nordisurf(imds, ssit$pH.peat, add = T)\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ny ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n\nEstimated degrees of freedom:\n7.06  total = 8.06 \n\nREML score: 37.68641     \n\nordisurf(imds, ssit$Waterlev.av, add = T, col = \"blue\")\n\n\nFamily: gaussian \nLink function: identity \n\nFormula:\ny ~ s(x1, x2, k = 10, bs = \"tp\", fx = FALSE)\n\nEstimated degrees of freedom:\n6.01  total = 7.01 \n\nREML score: 167.6801     \n\n\n\n\n\nAbbildung 31.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 31.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 31.3: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 31.4: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 31.5: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 31.6: Generierter Plot\n\n\n\n\n\n\nConstrained ordination\n\n## 5 Umweltvariablen gewählt, durch die die Ordination constrained werden soll\nssit\nsummary(ssit)\ns5 <- c(\"pH.peat\", \"P.peat\", \"Waterlev.av\", \"CEC.peat\", \"Acidity.peat\")\nssit5 <- ssit[s5]\n\ndata(sveg)\nsummary(sveg)\n\n\n## RDA = constrained PCA\nrda <- rda(sveg~., ssit5)\nplot(rda)\n\n## CCA = constrained CA\ncca <- cca(sveg~., ssit5)\nplot(cca)\n\n## Unconstrained and constrained variance\ntot <- cca$tot.chi\nconstr <- cca$CCA$tot.chi\nconstr / tot\n\n\n\nRedundancy analysis (RDA)\nMehr Details zu RDA aus Borcard et al. (Numerical ecology with R)\n\n## Datensatz Doubs\n## Doubs Datensatz in den workspace laden\nload(\"datasets/statistik/Doubs.RData\")  \n\n\nsummary(spe)\nsummary(env)\nsummary(spa)\n\n\n## Entfernen der Untersuchungsfläche ohne Arten\nspe <- spe[-8, ]\nenv <- env[-8, ]\nspa <- spa[-8, ]\n\n## Karten für 4 Fischarten\npar(mfrow = c(2, 2))\nplot(spa, asp = 1, col = \"brown\", cex = spe$Satr, xlab = \"x (km)\", ylab = \"y (km)\", main = \"Brown trout\")\nlines(spa, col = \"light blue\")\nplot(spa, asp = 1, col = \"brown\", cex = spe$Thth, xlab = \"x (km)\", ylab = \"y (km)\", main = \"Grayling\")\nlines(spa, col = \"light blue\")\nplot(spa, asp = 1, col = \"brown\", cex = spe$Alal, xlab = \"x (km)\", ylab = \"y (km)\", main = \"Bleak\")\nlines(spa, col = \"light blue\")\nplot(spa, asp = 1, col = \"brown\", cex = spe$Titi, xlab = \"x (km)\", ylab = \"y (km)\", main = \"Tench\")\nlines(spa, col = \"light blue\")\n\n## Set aside the variable 'dfs' (distance from the source) for \n## later use\ndfs <- env[, 1]\n## Remove the 'dfs' variable from the env data frame\nenv2 <- env[, -1]\n\n## Recode the slope variable (slo) into a factor (qualitative) \n## variable to show how these are handled in the ordinations\nslo2 <- rep(\".very_steep\", nrow(env))\nslo2[env$slo <= quantile(env$slo)[4]] <- \".steep\"\nslo2[env$slo <= quantile(env$slo)[3]] <- \".moderate\"\nslo2[env$slo <= quantile(env$slo)[2]] <- \".low\"\nslo2 <- factor(slo2, levels = c(\".low\", \".moderate\", \".steep\", \".very_steep\"))\ntable(slo2)\n\nslo2\n       .low   .moderate      .steep .very_steep \n          8           8           6           7 \n\n## Create an env3 data frame with slope as a qualitative variable\nenv3 <- env2\nenv3$slo <- slo2\n\n## Create two subsets of explanatory variables\n## Physiography (upstream-downstream gradient)\nenvtopo <- env2[, c(1 : 3)]\nnames(envtopo)\n\n[1] \"ele\" \"slo\" \"dis\"\n\n## Water quality\nenvchem <- env2[, c(4 : 10)]\nnames(envchem)\n\n[1] \"pH\"  \"har\" \"pho\" \"nit\" \"amm\" \"oxy\" \"bod\"\n\n## Hellinger-transform the species dataset\nlibrary(vegan)\nspe.hel <- decostand(spe, \"hellinger\")\n\n\n\n\nAbbildung 31.7: Generierter Plot\n\n\n\n\n\nspe.hel\n\n\n## Redundancy analysis (RDA)\n### RDA of the Hellinger-transformed fish species data, constrained\n### by all the environmental variables contained in env3\nspe.rda <- rda(spe.hel ~ ., env3) # Observe the shortcut formula\n\n\nspe.rda\nsummary(spe.rda)    # Scaling 2 (default)\n\n\n## Canonical coefficients from the rda object\ncoef(spe.rda)\n\n\n## Unadjusted R^2 und Adjusted R^2\n(R2 <- RsquareAdj(spe.rda))\n\n$r.squared\n[1] 0.7270922\n\n$adj.r.squared\n[1] 0.5224114\n\n### Triplots of the rda results (lc scores)\n### Site scores as linear combinations of the environmental variables\n## dev.new(title = \"RDA scaling 1 and 2 + lc\", width = 12, height = 6, noRStudioGD = TRUE)\npar(mfrow = c(1, 2))\n## Scaling 1\nplot(spe.rda,scaling = 1, display = c(\"sp\", \"lc\", \"cn\"), main = \"Triplot RDA spe.hel ~ env3 - scaling 1 - lc scores\")\nspe.sc1 <- scores(spe.rda, choices = 1:2, scaling = 1, display = \"sp\")\narrows(0, 0, spe.sc1[, 1] * 0.92, spe.sc1[, 2] * 0.92, length = 0, lty = 1, col = \"red\")\ntext(-0.75, 0.7, \"a\", cex = 1.5)\n## Scaling 2\nplot(spe.rda, display = c(\"sp\", \"lc\", \"cn\"), main = \"Triplot RDA spe.hel ~ env3 - scaling 2 - lc scores\")\nspe.sc2 <- scores(spe.rda, choices = 1:2, display = \"sp\")\narrows(0, 0, spe.sc2[, 1] * 0.92, spe.sc2[, 2] * 0.92,length = 0, lty = 1, col = \"red\")\ntext(-0.82, 0.55, \"b\", cex = 1.5)\n\n### Triplots of the rda results (wa scores)\n### Site scores as weighted averages (vegan's default)\n## Scaling 1 :  distance triplot\n##dev.new(title = \"RDA plot\", width = 12, height = 6, noRStudioGD = TRUE)\npar(mfrow = c(1, 2))\nplot(spe.rda, scaling = 1, main = \"Triplot RDA spe.hel ~ env3 - scaling 1 - wa scores\")\narrows(0, 0, spe.sc1[, 1] * 0.92, spe.sc1[, 2] * 0.92, length = 0, lty = 1, col = \"red\")\n## Scaling 2 (default) :  correlation triplot\nplot(spe.rda, main = \"Triplot RDA spe.hel ~ env3 - scaling 2 - wa scores\")\narrows(0, 0, spe.sc2[, 1] * 0.92, spe.sc2[, 2] * 0.92, length = 0, lty = 1, col = \"red\")\n\n## Select species with goodness-of-fit at least 0.6 in the \n## ordination plane formed by axes 1 and 2\nspe.good <- goodness(spe.rda)\nsel.sp <- which(spe.good[, 2] >= 0.6)\nsel.sp\n\nSatr Phph Chna Baba Albi Rham Legi Cyca Abbr Gyce Ruru Blbj Alal Anan \n   2    3    7   11   12   16   17   19   21   23   24   25   26   27 \n\n## Triplots with homemade function triplot.rda(), scalings 1 and 2\nsource(\"stat5-8/triplot.rda.R\")\n##dev.new(title = \"RDA plot with triplot.rda\", width = 12, height = 6, noRStudioGD = TRUE)\npar(mfrow = c(1, 2))\ntriplot.rda(spe.rda, site.sc = \"lc\", scaling = 1, cex.char2 = 0.7, pos.env = 3, \n            pos.centr = 1, mult.arrow = 1.1, mar.percent = 0.05, select.spe = sel.sp)\n\n\n-----------------------------------------------------------------------\nSite constraints (lc) selected. To obtain site scores that are weighted\nsums of species scores (default in vegan), argument site.sc must be set\nto wa.\n-----------------------------------------------------------------------\n\n\nError in if (class(mat) == \"matrix\") {: Bedingung hat Länge > 1\n\ntext(-0.92, 0.72, \"a\", cex = 2)\ntriplot.rda(spe.rda, site.sc = \"lc\", scaling = 2, cex.char2 = 0.7, pos.env = 3, \n            pos.centr = 1, mult.arrow = 1.1, mar.percent = 0.05, select.spe = sel.sp)\n\n\n-----------------------------------------------------------------------\nSite constraints (lc) selected. To obtain site scores that are weighted\nsums of species scores (default in vegan), argument site.sc must be set\nto wa.\n-----------------------------------------------------------------------\n\n\nError in if (class(mat) == \"matrix\") {: Bedingung hat Länge > 1\n\ntext(-2.82, 2, \"b\", cex = 2)\n\n## Global test of the RDA result\nanova(spe.rda, permutations = how(nperm = 999))\n\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(formula = spe.hel ~ ele + slo + dis + pH + har + pho + nit + amm + oxy + bod, data = env3)\n         Df Variance      F Pr(>F)    \nModel    12  0.36537 3.5523  0.001 ***\nResidual 16  0.13714                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n## Tests of all canonical axes\nanova(spe.rda, by = \"axis\", permutations = how(nperm = 999))\n\nPermutation test for rda under reduced model\nForward tests for axes\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(formula = spe.hel ~ ele + slo + dis + pH + har + pho + nit + amm + oxy + bod, data = env3)\n         Df Variance       F Pr(>F)    \nRDA1      1 0.228083 26.6105  0.001 ***\nRDA2      1 0.053698  6.2649  0.004 ** \nRDA3      1 0.032119  3.7473  0.350    \nRDA4      1 0.023206  2.7074  0.762    \nRDA5      1 0.008699  1.0149  1.000    \nRDA6      1 0.007218  0.8421  1.000    \nRDA7      1 0.004869  0.5681  1.000    \nRDA8      1 0.002924  0.3412  1.000    \nRDA9      1 0.002141  0.2498  1.000    \nRDA10     1 0.001160  0.1353  1.000    \nRDA11     1 0.000914  0.1066  1.000    \nRDA12     1 0.000341  0.0397  1.000    \nResidual 16 0.137139                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n### Partial RDA: effect of water chemistry, holding physiography\n### constant\n\n## Simple syntax; X and W may be in separate tables of quantitative \n## variables\n(spechem.physio <- rda(spe.hel, envchem, envtopo))\n\nCall: rda(X = spe.hel, Y = envchem, Z = envtopo)\n\n              Inertia Proportion Rank\nTotal          0.5025     1.0000     \nConditional    0.2087     0.4152    3\nConstrained    0.1602     0.3189    7\nUnconstrained  0.1336     0.2659   18\nInertia is variance \n\nEigenvalues for constrained axes:\n   RDA1    RDA2    RDA3    RDA4    RDA5    RDA6    RDA7 \n0.09136 0.04590 0.00928 0.00625 0.00387 0.00214 0.00142 \n\nEigenvalues for unconstrained axes:\n    PC1     PC2     PC3     PC4     PC5     PC6     PC7     PC8 \n0.04643 0.02071 0.01746 0.01326 0.00975 0.00588 0.00512 0.00400 \n(Showing 8 of 18 unconstrained eigenvalues)\n\n\n\n\n\nAbbildung 31.8: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 31.9: Generierter Plot\n\n\n\n\n\nsummary(spechem.physio)\n\n\n## Formula interface; X and W variables must be in the same \n## data frame\n(spechem.physio2 <- rda(spe.hel ~ pH + har + pho + nit + amm + oxy + bod \n        + Condition(ele + slo + dis), data = env2))\n\nCall: rda(formula = spe.hel ~ pH + har + pho + nit + amm + oxy + bod +\nCondition(ele + slo + dis), data = env2)\n\n              Inertia Proportion Rank\nTotal          0.5025     1.0000     \nConditional    0.2087     0.4152    3\nConstrained    0.1602     0.3189    7\nUnconstrained  0.1336     0.2659   18\nInertia is variance \n\nEigenvalues for constrained axes:\n   RDA1    RDA2    RDA3    RDA4    RDA5    RDA6    RDA7 \n0.09136 0.04590 0.00928 0.00625 0.00387 0.00214 0.00142 \n\nEigenvalues for unconstrained axes:\n    PC1     PC2     PC3     PC4     PC5     PC6     PC7     PC8 \n0.04643 0.02071 0.01746 0.01326 0.00975 0.00588 0.00512 0.00400 \n(Showing 8 of 18 unconstrained eigenvalues)\n\n## Test of the partial RDA, using the results with the formula \n## interface to allow the tests of the axes to be run\nanova(spechem.physio2, permutations = how(nperm = 999))\n\nPermutation test for rda under reduced model\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(formula = spe.hel ~ pH + har + pho + nit + amm + oxy + bod + Condition(ele + slo + dis), data = env2)\n         Df Variance      F Pr(>F)    \nModel     7  0.16023 3.0836  0.001 ***\nResidual 18  0.13362                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nanova(spechem.physio2, permutations = how(nperm = 999), by = \"axis\")\n\nPermutation test for rda under reduced model\nForward tests for axes\nPermutation: free\nNumber of permutations: 999\n\nModel: rda(formula = spe.hel ~ pH + har + pho + nit + amm + oxy + bod + Condition(ele + slo + dis), data = env2)\n         Df Variance       F Pr(>F)    \nRDA1      1 0.091363 12.3078  0.001 ***\nRDA2      1 0.045904  6.1839  0.009 ** \nRDA3      1 0.009277  1.2497  0.967    \nRDA4      1 0.006250  0.8420  0.996    \nRDA5      1 0.003868  0.5210  1.000    \nRDA6      1 0.002145  0.2890  1.000    \nRDA7      1 0.001424  0.1919  0.999    \nResidual 18 0.133617                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n## Partial RDA triplots (with fitted site scores) \n## with function triplot.rda\n## Scaling 1\n##dev.new(title = \"Partial RDA\",width = 12, height = 6, noRStudioGD = TRUE)\npar(mfrow = c(1, 2))\ntriplot.rda(spechem.physio, site.sc = \"lc\", scaling = 1, \n            cex.char2 = 0.8, pos.env = 3, mar.percent = 0)\n\n\n-----------------------------------------------------------------------\nSite constraints (lc) selected. To obtain site scores that are weighted\nsums of species scores (default in vegan), argument site.sc must be set\nto wa.\n-----------------------------------------------------------------------\nNo factor, hence levels cannot be plotted with symbols; 'plot.centr' is set to FALSE\n\n\nError in if (class(mat) == \"matrix\") {: Bedingung hat Länge > 1\n\ntext(-0.58, 0.64, \"a\", cex = 2)\n\nError in text.default(-0.58, 0.64, \"a\", cex = 2): plot.new has not been called yet\n\n## Scaling 2\ntriplot.rda(spechem.physio, site.sc = \"lc\", scaling = 2, cex.char2 = 0.8, \n            pos.env = 3, mult.spe = 1.1, mar.percent = 0.04)\n\n\n-----------------------------------------------------------------------\nSite constraints (lc) selected. To obtain site scores that are weighted\nsums of species scores (default in vegan), argument site.sc must be set\nto wa.\n-----------------------------------------------------------------------\nNo factor, hence levels cannot be plotted with symbols; 'plot.centr' is set to FALSE\n\n\nError in if (class(mat) == \"matrix\") {: Bedingung hat Länge > 1\n\ntext(-3.34, 3.64, \"b\", cex = 2)\n\nError in text.default(-3.34, 3.64, \"b\", cex = 2): plot.new has not been called yet\n\n\n\n\nVariation partioning\n\n### Variation partitioning with two sets of explanatory variables\n\n## Explanation of fraction labels (two, three and four explanatory \n## matrices) with optional colours\npar(mfrow = c(1, 3), mar = c(1, 1, 1, 1))\nshowvarparts(2, bg = c(\"red\", \"blue\"))\nshowvarparts(3, bg = c(\"red\", \"blue\", \"yellow\"))\nshowvarparts(4, bg = c(\"red\", \"blue\", \"yellow\", \"green\"))\n\n### 1. Variation partitioning with all explanatory variables\n###    (except dfs)\n(spe.part.all <- varpart(spe.hel, envchem, envtopo))\n\n\nPartition of variance in RDA \n\nCall: varpart(Y = spe.hel, X = envchem, envtopo)\n\nExplanatory tables:\nX1:  envchem\nX2:  envtopo \n\nNo. of explanatory tables: 2 \nTotal variation (SS): 14.07 \n            Variance: 0.50251 \nNo. of observations: 29 \n\nPartition table:\n                     Df R.squared Adj.R.squared Testable\n[a+b] = X1            7   0.60579       0.47439     TRUE\n[b+c] = X2            3   0.41524       0.34507     TRUE\n[a+b+c] = X1+X2      10   0.73410       0.58638     TRUE\nIndividual fractions                                    \n[a] = X1|X2           7                 0.24131     TRUE\n[b]                   0                 0.23308    FALSE\n[c] = X2|X1           3                 0.11199     TRUE\n[d] = Residuals                         0.41362    FALSE\n---\nUse function 'rda' to test significance of fractions of interest\n\n## Plot of the partitioning results\npar(mfrow = c(1, 1))\nplot(spe.part.all, digits = 2, bg = c(\"red\", \"blue\"),\n     Xnames = c(\"Chemistry\", \"Physiography\"), \n     id.size = 0.7)\n\n\n\n\nAbbildung 31.10: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 31.11: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik7_Uebung.html",
    "href": "stat5-8/Statistik7_Uebung.html",
    "title": "Stat7: Übung",
    "section": "",
    "text": "Funktion triplot.rda.R\n\nMoordatensatz in library(dave) :\n\nsveg (Vegetationsdaten)\nssit (Umweltdaten)\n\nFührt eine RDA mit allen in der Vorlesung gezeigten Schritten durch und interpretiert die Ergebnisse.\nVon den Umweltvariablen entfallen x.axis & y.axis\nFür die partielle RDA und die Varianzpartitionierung bildet zwei Gruppen:\n\nPhysiographie (Waterlev.max, Waterlev.av, Waterlev.min, log.peat.lev, log slope.deg)\nChemie (alle übrigen)"
  },
  {
    "objectID": "stat5-8/Statistik8_Demo.html",
    "href": "stat5-8/Statistik8_Demo.html",
    "title": "Stat8: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)\nDatensatz Doubs.RData\nFunktion drawmap.R drawmap.R\nFunktion hcoplot.R hcoplot.R"
  },
  {
    "objectID": "stat5-8/Statistik8_Demo.html#k-means-clustering",
    "href": "stat5-8/Statistik8_Demo.html#k-means-clustering",
    "title": "Stat8: Demo",
    "section": "k-means clustering",
    "text": "k-means clustering\n\n# das Moordatenset aus Wildi...\nif(!require(dave)){install.packages(\"dave\")}\nlibrary(dave)\npca <- rda(sveg^0.25, scale = TRUE)\nca <- cca(sveg^0.5)\n\nkmeans.1 <- kmeans(sveg, 4)\n\n\nkmeans.1\n\n\nplot(ca, type = \"n\")\npoints(ca, display = \"sites\", col = kmeans.1[[1]])\n\nkmeans.2 <- kmeans(sveg, 3)\nplot(pca, type = \"n\")\npoints(pca, display = \"sites\", pch=19, col = kmeans.2[[1]])\n\nplot(pca, choices = c(1, 3), type = \"n\")\npoints(pca, choices = c(1, 3), display = \"sites\", pch = 19, col=kmeans.2[[1]])\n\n# k-means partitioning, 2 to 10 groups\nKM.cascade <- cascadeKM(sveg,  inf.gr = 2, sup.gr = 10, iter = 100, criterion = \"ssi\")\nsummary(KM.cascade)\n\n          Length Class  Mode     \npartition 567    -none- numeric  \nresults    18    -none- numeric  \ncriterion   1    -none- character\nsize       90    -none- numeric  \n\nKM.cascade$results\n\n      2 groups     3 groups     4 groups     5 groups     6 groups     7 groups\nSSE 1840.13571 1629.4399038 1488.2961538 1378.3369048 1286.5005411 1214.3219697\nssi    0.26103    0.2710839    0.3672851    0.3033619    0.4087283    0.4572838\n        8 groups     9 groups    10 groups\nSSE 1156.7314935 1101.5523810 1053.1476190\nssi    0.4264392    0.5218545    0.5033503\n\nKM.cascade$partition\n\n    2 groups 3 groups 4 groups 5 groups 6 groups 7 groups 8 groups 9 groups\n501        1        2        4        5        2        4        3        1\n502        1        2        1        4        4        3        6        9\n503        1        2        4        5        2        4        3        1\n504        1        2        4        5        2        4        3        1\n505        1        2        1        4        4        3        6        9\n506        1        2        4        5        4        3        6        9\n507        1        2        4        5        2        4        3        1\n508        1        2        4        5        2        4        3        1\n509        1        2        4        5        2        4        3        1\n510        1        2        1        4        3        1        8        7\n511        1        2        4        5        2        4        3        1\n512        1        2        1        4        4        3        6        9\n513        1        2        1        4        3        1        8        6\n514        1        2        1        4        4        3        6        9\n515        1        2        1        4        4        3        6        9\n516        1        2        1        4        4        3        6        9\n517        1        2        1        4        3        1        8        7\n518        2        1        3        3        1        5        1        8\n519        1        2        1        4        4        3        6        9\n520        1        2        1        4        3        1        8        7\n521        1        2        4        5        2        4        3        7\n522        1        2        1        4        4        3        6        9\n523        2        1        3        3        1        5        1        8\n524        1        2        4        5        2        4        3        7\n525        1        2        4        5        2        4        3        7\n526        2        3        2        3        1        5        1        8\n527        1        2        1        4        3        1        8        6\n528        1        2        1        4        3        1        8        6\n529        1        2        1        4        3        1        8        6\n530        1        2        1        4        3        1        8        7\n531        2        1        3        1        5        2        5        3\n532        1        2        1        4        3        1        8        6\n533        1        2        1        4        3        1        8        7\n534        1        1        3        1        5        2        5        3\n535        2        1        3        1        5        2        5        3\n536        1        2        1        4        3        1        8        6\n537        1        2        1        4        3        1        8        6\n538        2        1        3        3        1        5        1        8\n539        2        3        2        2        6        7        7        5\n540        1        2        4        5        2        4        3        1\n541        2        3        2        2        6        7        4        4\n542        2        3        2        2        6        7        7        5\n543        2        3        2        2        6        7        4        4\n544        1        1        3        1        5        2        5        3\n545        2        1        3        3        1        5        1        8\n546        2        1        3        1        5        2        5        3\n547        1        1        3        1        5        2        5        6\n548        2        3        2        2        6        7        4        4\n549        2        1        3        1        5        2        5        3\n550        2        1        3        1        5        2        5        3\n551        2        3        2        3        1        6        2        2\n552        2        3        2        2        6        7        4        4\n553        2        3        2        2        6        7        2        2\n554        2        3        2        3        1        6        2        2\n555        2        3        2        3        1        6        2        2\n556        2        3        2        2        6        7        4        4\n557        2        3        2        3        1        6        2        2\n558        2        3        2        3        1        6        2        2\n559        2        3        2        3        1        5        1        8\n560        2        3        2        3        1        5        1        8\n561        2        1        3        3        1        5        1        8\n562        2        3        2        2        6        7        7        5\n563        2        3        2        3        1        6        2        2\n    10 groups\n501        10\n502         2\n503        10\n504        10\n505         2\n506         2\n507        10\n508        10\n509        10\n510         5\n511         8\n512         2\n513         4\n514         2\n515         2\n516         2\n517         5\n518         8\n519         2\n520         5\n521         5\n522         2\n523         1\n524         5\n525         5\n526         1\n527         4\n528         4\n529         4\n530         5\n531         3\n532         4\n533         5\n534         3\n535         3\n536         4\n537         4\n538         8\n539         6\n540        10\n541         7\n542         6\n543         7\n544         3\n545         1\n546         3\n547         4\n548         7\n549         3\n550         3\n551         9\n552         7\n553         9\n554         9\n555         9\n556         7\n557         9\n558         9\n559         1\n560         1\n561         1\n562         6\n563         9\n\n# k-means visualisation\nplot(KM.cascade, sortg = TRUE)\n\n\n\n\nAbbildung 33.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.3: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.4: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik8_Demo.html#agglomarative-clusteranalyse",
    "href": "stat5-8/Statistik8_Demo.html#agglomarative-clusteranalyse",
    "title": "Stat8: Demo",
    "section": "Agglomarative Clusteranalyse",
    "text": "Agglomarative Clusteranalyse\nmit Daten und Skripten aus Borcard et al. (2018)\n\nload(\"datasets/statistik/Doubs.RData\")  \n\n\n# Remove empty site 8\nspe <- spe[-8, ]\nenv <- env[-8, ]\nspa <- spa[-8, ]\nlatlong <- latlong[-8, ]"
  },
  {
    "objectID": "stat5-8/Statistik8_Demo.html#dendogramme-berechnen-und-ploten",
    "href": "stat5-8/Statistik8_Demo.html#dendogramme-berechnen-und-ploten",
    "title": "Stat8: Demo",
    "section": "Dendogramme berechnen und ploten",
    "text": "Dendogramme berechnen und ploten\n\n## Hierarchical agglomerative clustering of the species abundance \n\n# Compute matrix of chord distance among sites\nspe.norm <- decostand(spe, \"normalize\")\nspe.ch <- vegdist(spe.norm, \"euc\")\n\n# Attach site names to object of class 'dist'\nattr(spe.ch, \"Labels\") <- rownames(spe)\n\npar(mfrow = c(1, 1))\n\n# Compute single linkage agglomerative clustering\nspe.ch.single <- hclust(spe.ch, method = \"single\")\n# Plot a dendrogram using the default options\nplot(spe.ch.single, labels = rownames(spe), main = \"Chord - Single linkage\")\n\n# Compute complete-linkage agglomerative clustering\nspe.ch.complete <- hclust(spe.ch, method = \"complete\")\nplot(spe.ch.complete, labels = rownames(spe), main = \"Chord - Complete linkage\")\n\n# Compute UPGMA agglomerative clustering\nspe.ch.UPGMA <- hclust(spe.ch, method = \"average\")\nplot(spe.ch.UPGMA, labels = rownames(spe), main = \"Chord - UPGMA\")\n\n# Compute centroid clustering\nspe.ch.centroid <- hclust(spe.ch, method = \"centroid\")\nplot(spe.ch.centroid, labels = rownames(spe),  main = \"Chord - Centroid\")\n\n# Compute Ward's minimum variance clustering\nspe.ch.ward <-hclust(spe.ch, method = \"ward.D2\")\nplot(spe.ch.ward, labels = rownames(spe),  main = \"Chord - Ward\")\n\n# Compute beta-flexible clustering using cluster::agnes()\n# beta = -0.1\nspe.ch.beta1 <- agnes(spe.ch, method = \"flexible\", par.method = 0.55)\n# beta = -0.25\nspe.ch.beta2 <- agnes(spe.ch, method = \"flexible\", par.method = 0.625)\n# beta = -0.5\nspe.ch.beta3 <- agnes(spe.ch, method = \"flexible\", par.method = 0.75)\n# Change the class of agnes objects\nclass(spe.ch.beta1)\n\n[1] \"agnes\" \"twins\"\n\nspe.ch.beta1 <- as.hclust(spe.ch.beta1)\nclass(spe.ch.beta1)\n\n[1] \"hclust\"\n\nspe.ch.beta2 <- as.hclust(spe.ch.beta2)\nspe.ch.beta3 <- as.hclust(spe.ch.beta3)\n\npar(mfrow = c(2, 2))\nplot(spe.ch.beta1, labels = rownames(spe), main = \"Chord - Beta-flexible (beta=-0.1)\")\nplot(spe.ch.beta2, labels = rownames(spe), main = \"Chord - Beta-flexible (beta=-0.25)\")\nplot(spe.ch.beta3,  labels = rownames(spe),  main = \"Chord - Beta-flexible (beta=-0.5)\")\n\n# Compute Ward's minimum variance clustering\nspe.ch.ward <- hclust(spe.ch, method = \"ward.D2\")\nplot(spe.ch.ward, labels = rownames(spe), main = \"Chord - Ward\")\n\n\n\n\nAbbildung 33.5: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.6: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.7: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.8: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.9: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.10: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik8_Demo.html#cophenetic-correlations",
    "href": "stat5-8/Statistik8_Demo.html#cophenetic-correlations",
    "title": "Stat8: Demo",
    "section": "Cophenetic correlations",
    "text": "Cophenetic correlations\n\n# Single linkage clustering\nspe.ch.single.coph <- cophenetic(spe.ch.single)\ncor(spe.ch, spe.ch.single.coph)\n\n[1] 0.5015116\n\n# Complete linkage clustering\nspe.ch.comp.coph <- cophenetic(spe.ch.complete)\ncor(spe.ch, spe.ch.comp.coph)\n\n[1] 0.7567998\n\n# Average clustering\nspe.ch.UPGMA.coph <- cophenetic(spe.ch.UPGMA)\ncor(spe.ch, spe.ch.UPGMA.coph)\n\n[1] 0.8537529\n\n# Ward clustering\nspe.ch.ward.coph <- cophenetic(spe.ch.ward)\ncor(spe.ch, spe.ch.ward.coph)\n\n[1] 0.7821555\n\n# Shepard-like diagrams\npar(mfrow = c(2, 2))\nplot(spe.ch, spe.ch.single.coph,\n  xlab = \"Chord distance\", ylab = \"Cophenetic distance\",\n  asp = 1, xlim = c(0, sqrt(2)), ylim = c(0, sqrt(2)),\n  main = c(\"Single linkage\", paste(\"Cophenetic correlation =\",\n                                   round(cor(spe.ch, spe.ch.single.coph), 3))))\nabline(0, 1)\nlines(lowess(spe.ch, spe.ch.single.coph), col = \"red\")\n\nplot(spe.ch, spe.ch.comp.coph,\n  xlab = \"Chord distance\", ylab = \"Cophenetic distance\",\n  asp = 1, xlim = c(0, sqrt(2)), ylim = c(0, sqrt(2)),\n  main = c(\"Complete linkage\", paste(\"Cophenetic correlation =\",\n                                     round(cor(spe.ch, spe.ch.comp.coph), 3))))\nabline(0, 1)\nlines(lowess(spe.ch, spe.ch.comp.coph), col = \"red\")\n\nplot(spe.ch, spe.ch.UPGMA.coph,\n  xlab = \"Chord distance\", ylab = \"Cophenetic distance\",\n  asp = 1, xlim = c(0, sqrt(2)), ylim = c(0, sqrt(2)),\n  main = c(\"UPGMA\", paste(\"Cophenetic correlation =\",\n                          round( cor(spe.ch, spe.ch.UPGMA.coph), 3))))\nabline(0, 1)\nlines(lowess(spe.ch, spe.ch.UPGMA.coph), col = \"red\")\n\nplot(spe.ch, spe.ch.ward.coph,\n  xlab = \"Chord distance\", ylab = \"Cophenetic distance\",\n  asp = 1, xlim = c(0, sqrt(2)), ylim = c(0, max(spe.ch.ward$height)),\n  main = c(\"Ward\", paste(\"Cophenetic correlation =\", \n                         round(cor(spe.ch, spe.ch.ward.coph), 3))))\nabline(0, 1)\nlines(lowess(spe.ch, spe.ch.ward.coph), col = \"red\")\n\n\n\n\nAbbildung 33.11: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik8_Demo.html#optimale-anzahl-cluster",
    "href": "stat5-8/Statistik8_Demo.html#optimale-anzahl-cluster",
    "title": "Stat8: Demo",
    "section": "Optimale Anzahl Cluster",
    "text": "Optimale Anzahl Cluster\n\n## Select a dendrogram (Ward/chord) and apply three criteria\n## to choose the optimal number of clusters\n\n# Choose and rename the dendrogram (\"hclust\" object)\nhc <- spe.ch.ward\n# hc <- spe.ch.beta2\n# hc <- spe.ch.complete\n\npar(mfrow = c(1, 2))\n\n# Average silhouette widths (Rousseeuw quality index)\nSi <- numeric(nrow(spe))\nfor (k in 2:(nrow(spe) - 1))\n{\n  sil <- silhouette(cutree(hc, k = k), spe.ch)\n  Si[k] <- summary(sil)$avg.width\n}\n\nk.best <- which.max(Si)\nplot(1:nrow(spe), Si, type = \"h\",\n  main = \"Silhouette-optimal number of clusters\",\n  xlab = \"k (number of clusters)\", ylab = \"Average silhouette width\")\naxis(1, k.best,paste(\"optimum\", k.best, sep = \"\\n\"), col = \"red\", \n     font = 2, col.axis = \"red\")\npoints(k.best,max(Si), pch = 16, col = \"red\",cex = 1.5)\n\n# Optimal number of clusters according to matrix correlation \n# statistic (Pearson)\n\n# Homemade function grpdist from Borcard et al. (2018)\ngrpdist <- function(X)\n{\n  require(cluster)\n  veg <- as.data.frame(as.factor(X))\n  distgr <- daisy(veg, \"gower\")\n  distgr\n} \n\nkt <- data.frame(k = 1:nrow(spe), r = 0)\nfor (i in 2:(nrow(spe) - 1)) \n{\n  gr <- cutree(hc, i)\n  distgr <- grpdist(gr)\n  mt <- cor(spe.ch, distgr, method = \"pearson\")\n  kt[i, 2] <- mt\n}\n\nk.best <- which.max(kt$r)\nplot(kt$k,kt$r, type = \"h\",\n  main = \"Matrix correlation-optimal number of clusters\",\n  xlab = \"k (number of clusters)\", ylab = \"Pearson's correlation\")\naxis(1, k.best, paste(\"optimum\", k.best, sep = \"\\n\"),\n  col = \"red\", font = 2, col.axis = \"red\")\npoints(k.best, max(kt$r), pch = 16, col = \"red\", cex = 1.5)\n\n# Optimal number of clusters according as per indicator species\n# analysis (IndVal, Dufrene-Legendre; package: labdsv)\nIndVal <- numeric(nrow(spe))\nng <- numeric(nrow(spe))\nfor (k in 2:(nrow(spe) - 1))\n{\n  iva <- indval(spe, cutree(hc, k = k), numitr = 1000)\n  gr <- factor(iva$maxcls[iva$pval <= 0.05])\n  ng[k] <- length(levels(gr)) / k\n  iv <- iva$indcls[iva$pval <= 0.05]\n  IndVal[k] <- sum(iv)\n}\n\nk.best <- which.max(IndVal[ng == 1]) + 1\ncol3 <- rep(1, nrow(spe))\ncol3[ng == 1] <- 3\n\npar(mfrow = c(1, 2))\nplot(1:nrow(spe), IndVal, type = \"h\",\n  main = \"IndVal-optimal number of clusters\",\n  xlab = \"k (number of clusters)\", ylab = \"IndVal sum\", col = col3)\naxis(1,k.best,paste(\"optimum\", k.best, sep = \"\\n\"),\n  col = \"red\", font = 2, col.axis = \"red\")\n\npoints(which.max(IndVal),max(IndVal),pch = 16,col = \"red\",cex = 1.5)\ntext(28, 15.7, \"a\", cex = 1.8)\n\nplot(1:nrow(spe),ng,\n  type = \"h\",\n  xlab = \"k (number of clusters)\",\n  ylab = \"Ratio\",\n  main = \"Proportion of clusters with significant indicator species\",\n  col = col3)\naxis(1,k.best,paste(\"optimum\", k.best, sep = \"\\n\"),\n     col = \"red\", font = 2, col.axis = \"red\")\npoints(k.best,max(ng), pch = 16, col = \"red\", cex = 1.5)\ntext(28, 0.98, \"b\", cex = 1.8)\n\n\n\n\nAbbildung 33.12: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.13: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik8_Demo.html#final-dendrogram-with-the-selected-clusters",
    "href": "stat5-8/Statistik8_Demo.html#final-dendrogram-with-the-selected-clusters",
    "title": "Stat8: Demo",
    "section": "Final dendrogram with the selected clusters",
    "text": "Final dendrogram with the selected clusters\n\n# Choose the number of clusters\nk <- 4\n# Silhouette plot of the final partition\nspech.ward.g <- cutree(spe.ch.ward, k = k)\nsil <- silhouette(spech.ward.g, spe.ch)\nrownames(sil) <- row.names(spe)\n\nplot(sil, main = \"Silhouette plot - Chord - Ward\", cex.names = 0.8, col = 2:(k + 1), nmax = 100)\n\n# Reorder clusters\nif(!require(gclus)){install.packages(\"gclus\")}\nlibrary(\"gclus\")\nspe.chwo <- reorder.hclust(spe.ch.ward, spe.ch)\n\n# Plot reordered dendrogram with group labels\npar(mfrow = c(1, 1))\nplot(spe.chwo, hang = -1, xlab = \"4 groups\", ylab = \"Height\", sub = \"\",\n  main = \"Chord - Ward (reordered)\", labels = cutree(spe.chwo, k = k))\nrect.hclust(spe.chwo, k = k)\n\n# Plot the final dendrogram with group colors (RGBCMY...)\n# Fast method using the additional hcoplot() function:\n# Usage:\n# hcoplot(tree = hclust.object,\n#   diss = dissimilarity.matrix,\n#   lab = object labels (default NULL),\n#   k = nb.clusters,\n#   title = paste(\"Reordered dendrogram from\",deparse(tree$call),\n#   sep=\"\\n\"))\nsource(\"stat5-8/hcoplot.R\")\nhcoplot(spe.ch.ward, spe.ch, lab = rownames(spe), k = 4)\n\n# Plot the Ward clusters on a map of the Doubs River\n# (see Chapter 2)\nsource(\"stat5-8/drawmap.R\")\ndrawmap(xy = spa, clusters = spech.ward.g, main = \"Four Ward clusters along the Doubs River\")\n\n\n\n\nAbbildung 33.14: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.15: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.16: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 33.17: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik8_Demo.html#miscellaneous-graphical-outputs",
    "href": "stat5-8/Statistik8_Demo.html#miscellaneous-graphical-outputs",
    "title": "Stat8: Demo",
    "section": "Miscellaneous graphical outputs",
    "text": "Miscellaneous graphical outputs\n\n# konvertieren von \"hclust\" Objekt in ein Dendogram Objekt\ndend <- as.dendrogram(spe.ch.ward)\n\n# Heat map of the dissimilarity matrix ordered with the dendrogram\nheatmap(as.matrix(spe.ch), Rowv = dend, symm = TRUE, margin = c(3, 3))\n\n# Ordered community table\n# Species are ordered by their weighted averages on site scores.\n# Dots represent absences.\nlibrary(vegan)\nor <- vegemite(spe, spe.chwo)\n\n                                    \n      32222222222  111111     1111  \n      098762105439598765064732213481\n Icme 5432121.......................\n Abbr 54332431.....1................\n Blbj 54542432.1...1................\n Anan 54432222.....111..............\n Gyce 5555443212...11...............\n Scer 522112221...21................\n Cyca 53421321.....1111.............\n Rham 55432333.....221..............\n Legi 35432322.1...1111.............\n Alal 55555555352..322..............\n Chna 12111322.1...211..............\n Titi 53453444...1321111.21.........\n Ruru 55554555121455221..1..........\n Albi 53111123.....2341.............\n Baba 35342544.....23322.........1..\n Eslu 453423321...41111..12.1....1..\n Gogo 5544355421..242122111......1..\n Pefl 54211432....41321..12.........\n Pato 2211.222.....3344.............\n Sqce 3443242312152132232211..11.1..\n Lele 332213221...52235321.1........\n Babl .1111112...32534554555534124..\n Teso .1...........11254........23..\n Phph .1....11...13334344454544455..\n Cogo ..............1123......2123..\n Satr .1..........2.12341345555355.3\n Thth .1............11.2......2134..\n30 sites, 27 species\n\n\n\n\n\nAbbildung 33.18: Generierter Plot"
  },
  {
    "objectID": "stat5-8/Statistik8_Uebung.html",
    "href": "stat5-8/Statistik8_Uebung.html",
    "title": "Stat8: Übung",
    "section": "",
    "text": "Datensatz crime2.csv\n\nRaten von 7 Kriminalitätsformen pro 100000 Einwohner und Jahr für die Bundesstaaten der USA\n\n(a) Führt eine k-means- und eine agglomerative Clusteranalyse eurer Wahl durch.\n(b) Überlegt in beiden Fällen, wie viele Cluster sinnvoll sind (k-means z. B.visuelle Betrachtung einer PCA, agglomerative Clusteranalyse z. B. SilhouettePlot).\n(c) Abschliessend entscheidet euch für eine Clusterung und vergleicht die erhaltenen Cluster bezüglich der Kriminalitätsformen mittels ANOVA und interpretiert die Cluster entsprechend.\n\nHinweis: Wegen der sehr ungleichen Varianzen muss auf jeden Fall eine Standardisierung stattfinden, damit Distanzen zwischen den verschiedenen Kriminalitätsraten sinnvoll berechnet werden können"
  },
  {
    "objectID": "StatKons.html",
    "href": "StatKons.html",
    "title": "Statistik Konsolidierung",
    "section": "",
    "text": "Statstik Konsolidierung 1\nIn diesem Block beschäftigen wir uns mit folgenden Inhalten:\nWarum Statistik? Warum mit R? Genereller Ablauf einer statistischen Analyse \\(Chi ^{2}/\\)-Test- bzw. Fishers Test (für kategoriale Daten) t-Test (für metrische Daten)\n\n\nStatistik Konsolidierung 2\nIn Statistik Konsolidierung 2 bekommen die Studierenden eine Einführung in das Thema der Ordinationen, eine Technik der deskriptiven Statistik. Diese Methoden visualisiert die Strukturen in multivariaten Datensätzen via Dimensionsreduktion. Das Prinzip und die praktische Implementierung wird detailliert am Beispiel der Hauptkomponentenanalyse (PCA) erklärt. Danach folgen kurze Einführungen in weitere Ordinationstechniken für besondere Fälle, welche bestimmte Limitierungen der PCA überwinden, namentlich NMDS.\n\n\nStatistik Konsolidierung 3\nIn Statistik Konsolidierung 3 lernen die Studierenden die Idee, die Voraussetzungen und die praktische Anwendung „einfacher“ linearer Modelle in R. Im Fokus steht die Varianzanalyse (ANOVA) als Verallgemeinerung des t-Tests, einschliesslich post-hoc-Tests und mehrfaktorieller ANOVA. Dann geht es um die Voraussetzungen parametrischer (und nicht-parametrischer) Tests und Optionen, wenn diese verletzt sind.\n\n\nStatistik Konsolidierung 4\nIn Statistik Konsolidierung 4 kennen die Studierende alles Rund um das Thema der lineare Regressionen (inkl. nicht-lineare Regressionen). Die Studierenden bekommen eine Einführung in die generalized linear models (GLMs), eine Methode die einige wesentliche Limitierungen von linearen Modellen überwindenwerden können. Spezifisch werden wir uns die Poisson-Regressionen für Zähldaten und logistische Regression für ja/nein-Daten anschauen.\n\n\n\n\n\n\n\n   \n     \n     \n       Sortieren nach\n       Voreinstellung\n         \n          Datum - Datum (aufsteigend)\n        \n         \n          Datum - Neueste\n        \n         \n          Titel\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitel\n\n\nDatum\n\n\nLesson\n\n\nThema\n\n\n\n\n\n\nStatKons1: Demo\n\n\n2022-11-14\n\n\nStatKons1\n\n\nStatistik Grundlagen\n\n\n\n\nStatKons1: Open Datasets\n\n\n2022-11-14\n\n\nStatKons1\n\n\nStatistik Grundlagen\n\n\n\n\nStatKons2: Demo\n\n\n2022-11-15\n\n\nStatKons2\n\n\nPCA\n\n\n\n\nStatKons3: Demo\n\n\n2022-11-21\n\n\nStatKons3\n\n\nLM\n\n\n\n\nStatKons4: Demo\n\n\n2022-11-22\n\n\nStatKons4\n\n\nGLM\n\n\n\n\n\n\nKeine Treffer"
  },
  {
    "objectID": "statKons/StatKons1_Demo_assoziationen.html",
    "href": "statKons/StatKons1_Demo_assoziationen.html",
    "title": "StatKons1: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)"
  },
  {
    "objectID": "statKons/StatKons1_Demo_assoziationen.html#grundlagen",
    "href": "statKons/StatKons1_Demo_assoziationen.html#grundlagen",
    "title": "StatKons1: Demo",
    "section": "Grundlagen",
    "text": "Grundlagen\n\n\n\n\n#lade Daten\n# mehr Info darüber: https://cran.r-project.org/web/packages/explore/vignettes/explore_mtcars.html\ncars <- mtcars\n\n#neue kategoriale variable\ncars <-  \n  as_tibble(cars) |> # da \"nur\" data frame kann glimplse nichts damit anfangen \n  mutate(vs_cat = if_else(vs == 0, \"normal\", \"v-type\")) |> \n  mutate(am_cat = if_else(am == 0, \"automatic\", \"manual\"))\n\n# betrachte die Daten\nsummary(cars)\n\n      mpg             cyl             disp             hp       \n Min.   :10.40   Min.   :4.000   Min.   : 71.1   Min.   : 52.0  \n 1st Qu.:15.43   1st Qu.:4.000   1st Qu.:120.8   1st Qu.: 96.5  \n Median :19.20   Median :6.000   Median :196.3   Median :123.0  \n Mean   :20.09   Mean   :6.188   Mean   :230.7   Mean   :146.7  \n 3rd Qu.:22.80   3rd Qu.:8.000   3rd Qu.:326.0   3rd Qu.:180.0  \n Max.   :33.90   Max.   :8.000   Max.   :472.0   Max.   :335.0  \n      drat             wt             qsec             vs        \n Min.   :2.760   Min.   :1.513   Min.   :14.50   Min.   :0.0000  \n 1st Qu.:3.080   1st Qu.:2.581   1st Qu.:16.89   1st Qu.:0.0000  \n Median :3.695   Median :3.325   Median :17.71   Median :0.0000  \n Mean   :3.597   Mean   :3.217   Mean   :17.85   Mean   :0.4375  \n 3rd Qu.:3.920   3rd Qu.:3.610   3rd Qu.:18.90   3rd Qu.:1.0000  \n Max.   :4.930   Max.   :5.424   Max.   :22.90   Max.   :1.0000  \n       am              gear            carb          vs_cat         \n Min.   :0.0000   Min.   :3.000   Min.   :1.000   Length:32         \n 1st Qu.:0.0000   1st Qu.:3.000   1st Qu.:2.000   Class :character  \n Median :0.0000   Median :4.000   Median :2.000   Mode  :character  \n Mean   :0.4062   Mean   :3.688   Mean   :2.812                     \n 3rd Qu.:1.0000   3rd Qu.:4.000   3rd Qu.:4.000                     \n Max.   :1.0000   Max.   :5.000   Max.   :8.000                     \n    am_cat         \n Length:32         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\nglimpse(cars)\n\nRows: 32\nColumns: 13\n$ mpg    <dbl> 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.…\n$ cyl    <dbl> 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, …\n$ disp   <dbl> 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, …\n$ hp     <dbl> 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 1…\n$ drat   <dbl> 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.9…\n$ wt     <dbl> 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, …\n$ qsec   <dbl> 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, …\n$ vs     <dbl> 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, …\n$ am     <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, …\n$ gear   <dbl> 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, …\n$ carb   <dbl> 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, …\n$ vs_cat <chr> \"normal\", \"normal\", \"v-type\", \"v-type\", \"normal\", \"v-type\", \"no…\n$ am_cat <chr> \"manual\", \"manual\", \"manual\", \"automatic\", \"automatic\", \"automa…\n\n#Assoziation zwischen Anzahl Zylinder und Motorentyp ()\ntable(cars$vs_cat, cars$am_cat) # Achtung: sieht aus, als gäbe es weniger V-Motoren bei den handgeschalteten Autos\n\n        \n         automatic manual\n  normal        12      6\n  v-type         7      7\n\n#lass und das überprüfen\n#achtung: bei chi-square test kommt es sehr auf das format drauf an (er erwartet entweder vektoren oder eine matrix!)\n\n#exkurs um in es in ein matrix form zu bringen\nchi_sq_matrix <- xtabs(~ vs_cat + am_cat, data = as.data.frame(cars)) # in diesem Spezialfall haben wir keine Kriteriumsvariable\n\n#1.version\nchi_sq <-chisq.test(chi_sq_matrix)\n\n#2. version\nchi_sq <- chisq.test(cars$am_cat, cars$vs_cat)\n\n#resp. fisher exacter test verwenden, da 2x2 table\nfisher.test(chi_sq_matrix)\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  chi_sq_matrix\np-value = 0.4727\nalternative hypothesis: true odds ratio is not equal to 1\n95 percent confidence interval:\n  0.3825342 10.5916087\nsample estimates:\nodds ratio \n  1.956055 \n\n#fisher exakter test\nfisher.test(cars$am_cat, cars$vs_cat)\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  cars$am_cat and cars$vs_cat\np-value = 0.4727\nalternative hypothesis: true odds ratio is not equal to 1\n95 percent confidence interval:\n  0.3825342 10.5916087\nsample estimates:\nodds ratio \n  1.956055 \n\n#visualisieren: kudos goes to https://mgimond.github.io/Stats-in-R/ChiSquare_test.html#3_two_factor_classification\nOP <- par(mfrow=c(1,2), \"mar\"=c(1,1,3,1))\nmosaicplot(chi_sq$observed, cex.axis =1 , main = \"Observed counts\")\nmosaicplot(chi_sq$expected, cex.axis =1 , main = \"Expected counts\\n(if class had no influence)\")\n\n\n\npar(OP)"
  },
  {
    "objectID": "statKons/StatKons1_Demo_assoziationen.html#möglicher-text-für-ergebnisse",
    "href": "statKons/StatKons1_Demo_assoziationen.html#möglicher-text-für-ergebnisse",
    "title": "StatKons1: Demo",
    "section": "Möglicher Text für Ergebnisse",
    "text": "Möglicher Text für Ergebnisse\nDer \\(\\chi^2\\)-Test sagt uns, dass das Art des Motors und Art des Fahrwerks statistisch nicht zusammenhängen. Es gibt keine signifikante Unterscheide zwischen den Variablen “VS” und “AM - Transmission” (p = .555). Der Fisher exacter Test bestätigt diesen Befund. Die Odds Ratio (OR) sagt uns hingegen - unter der Prämisse, dass “normale” Motoren eher mit automatischen und V-Motoren eher mit handgeschalteten Fahrwerken ausgestattet sind - dass die Chance doppelt so hoch ist, dass ein Auto mit “normalem” Motor automatisch geschaltet ist, als dies bei einem Auto mit V-Motor der Fall wäre\n\n#define dataset\ncars <- mtcars\n\n#neue kategoriale variable\ncars <- \n  as_tibble(cars) |> # da \"nur\" data frame kann glimplse nichts damit anfangen \n  mutate(vs_cat = if_else(vs == 0, \"normal\", \"v-type\")) |> \n  mutate(am_cat = if_else(am == 0, \"automatic\", \"manual\"))\n\n# bei t-Test immer zuerst visualisieren: in diesem Fall Boxplot mit Variablen Getriebe (v- vs. s-motor) und Anzahl Pferdestärke\nggplot2::ggplot(cars, aes(y = hp, x = vs_cat)) +\n  stat_boxplot(geom ='errorbar', width = .25) +\n  geom_boxplot() +\n  # geom_violin()+\n  labs(x = \"\\nBauform Motor\", y = \"Pferdestärke (PS)\\n\") +\n  mytheme\n\n\n\n#alternativ     \nboxplot(cars$hp ~ cars$vs_cat) # sieht ganz ok aus, jedoch weist die variable \"normale Motoren\" deutlich eine grössere Streuung aus -> siehe aov.1 und deren Modelgüte-Plots\n\n\n\n# Definiere Model: t-Test, wobei die AV metrisch (in unserem Fall eine Zählvariable) sein muss\nttest <- t.test(cars$hp ~ cars$vs_cat)\naov.1 <- aov(cars$hp ~ cars$vs_cat)\n\n#schaue Modellgüte an\npar(mfrow = c(2,2))\nplot(aov.1)\n\n\n\n#zeige resultate\nttest\n\n\n    Welch Two Sample t-test\n\ndata:  cars$hp by cars$vs_cat\nt = 6.2908, df = 23.561, p-value = 1.82e-06\nalternative hypothesis: true difference in means between group normal and group v-type is not equal to 0\n95 percent confidence interval:\n  66.06161 130.66854\nsample estimates:\nmean in group normal mean in group v-type \n           189.72222             91.35714 \n\nsummary.lm(aov.1)\n\n\nCall:\naov(formula = cars$hp ~ cars$vs_cat)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-98.72 -25.61  -4.04  22.55 145.28 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         189.72      11.35  16.720  < 2e-16 ***\ncars$vs_catv-type   -98.37      17.16  -5.734 2.94e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 48.14 on 30 degrees of freedom\nMultiple R-squared:  0.5229,    Adjusted R-squared:  0.507 \nF-statistic: 32.88 on 1 and 30 DF,  p-value: 2.941e-06\n\n#wie würdet ihr nun die Ergebnisse darstellen?\n\n\n# für mehr infos here: https://cran.r-project.org/web/packages/datasauRus/vignettes/Datasaurus.html\n\nlibrary(datasauRus)\nif(requireNamespace(\"dplyr\")){\n  suppressPackageStartupMessages(library(dplyr))\n  dt <- datasaurus_dozen |> \n    group_by(dataset) |> \n    summarize(\n      mean_x    = mean(x),\n      mean_y    = mean(y),\n      std_dev_x = sd(x),\n      std_dev_y = sd(y),\n      corr_x_y  = cor(x, y)\n    )\n}\n\n# check data structure\nglimpse(dt)\n\nRows: 13\nColumns: 6\n$ dataset   <chr> \"away\", \"bullseye\", \"circle\", \"dino\", \"dots\", \"h_lines\", \"hi…\n$ mean_x    <dbl> 54.26610, 54.26873, 54.26732, 54.26327, 54.26030, 54.26144, …\n$ mean_y    <dbl> 47.83472, 47.83082, 47.83772, 47.83225, 47.83983, 47.83025, …\n$ std_dev_x <dbl> 16.76982, 16.76924, 16.76001, 16.76514, 16.76774, 16.76590, …\n$ std_dev_y <dbl> 26.93974, 26.93573, 26.93004, 26.93540, 26.93019, 26.93988, …\n$ corr_x_y  <dbl> -0.06412835, -0.06858639, -0.06834336, -0.06447185, -0.06034…\n\n# plot two examples  \nif(requireNamespace(\"ggplot2\")){\n  library(ggplot2)\n  \n  dt = filter(datasaurus_dozen, dataset == \"dino\" | dataset == \"slant_up\")\n  \n  ggplot(dt, aes(x=x, y=y, colour=dataset))+\n    geom_point()+\n    theme_bw() +\n    theme(legend.position = \"none\") +\n    facet_wrap(~dataset) +\n    geom_smooth(method = \"lm\", se = FALSE)\n  \n}"
  },
  {
    "objectID": "statKons/StatKons1_Demo_open_datasets.html",
    "href": "statKons/StatKons1_Demo_open_datasets.html",
    "title": "StatKons1: Open Datasets",
    "section": "",
    "text": "In diesem Dokument findet ihr verschiedene Wege und Quellen, um an Datensätze zu gelangen."
  },
  {
    "objectID": "statKons/StatKons1_Demo_open_datasets.html#in-r",
    "href": "statKons/StatKons1_Demo_open_datasets.html#in-r",
    "title": "StatKons1: Open Datasets",
    "section": "in R",
    "text": "in R\nIn R gibt es vordefinierte Datensätze, welche gut abrufbar sind. Beispiele sind:\n\nsleep\nUSAccDeaths\nUSArrests\nTitanic\n\n\ndata() # erzeugt eine Liste mit den Datensätzen, welche in R verfügbaren sind\nhead(chickwts)\n\n  weight      feed\n1    179 horsebean\n2    160 horsebean\n3    136 horsebean\n4    227 horsebean\n5    217 horsebean\n6    168 horsebean\n\nstr(chickwts)\n\n'data.frame':   71 obs. of  2 variables:\n $ weight: num  179 160 136 227 217 168 108 124 143 140 ...\n $ feed  : Factor w/ 6 levels \"casein\",\"horsebean\",..: 2 2 2 2 2 2 2 2 2 2 ..."
  },
  {
    "objectID": "statKons/StatKons1_Demo_open_datasets.html#kaggle",
    "href": "statKons/StatKons1_Demo_open_datasets.html#kaggle",
    "title": "StatKons1: Open Datasets",
    "section": "Kaggle",
    "text": "Kaggle\nAuf Kaggle findet ihr öffentlich zugängliche Datensätze. Einzig was ihr tun müsst, ist euch registrieren. Beispiele sind:\n\n911\nfoodPreferences\nS.F. salaries\nTitanic\n…\n\n\n# Load packages and data\ndata_911 <- read_delim(\"datasets/statistik/911.csv\", delim = \",\")\nstr(data_911)\n\nspec_tbl_df [99,492 × 9] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ lat      : num [1:99492] 40.3 40.3 40.1 40.1 40.3 ...\n $ lng      : num [1:99492] -75.6 -75.3 -75.4 -75.3 -75.6 ...\n $ desc     : chr [1:99492] \"REINDEER CT & DEAD END;  NEW HANOVER; Station 332; 2015-12-10 @ 17:10:52;\" \"BRIAR PATH & WHITEMARSH LN;  HATFIELD TOWNSHIP; Station 345; 2015-12-10 @ 17:29:21;\" \"HAWS AVE; NORRISTOWN; 2015-12-10 @ 14:39:21-Station:STA27;\" \"AIRY ST & SWEDE ST;  NORRISTOWN; Station 308A; 2015-12-10 @ 16:47:36;\" ...\n $ zip      : num [1:99492] 19525 19446 19401 19401 NA ...\n $ title    : chr [1:99492] \"EMS: BACK PAINS/INJURY\" \"EMS: DIABETIC EMERGENCY\" \"Fire: GAS-ODOR/LEAK\" \"EMS: CARDIAC EMERGENCY\" ...\n $ timeStamp: POSIXct[1:99492], format: \"2015-12-10 17:40:00\" \"2015-12-10 17:40:00\" ...\n $ twp      : chr [1:99492] \"NEW HANOVER\" \"HATFIELD TOWNSHIP\" \"NORRISTOWN\" \"NORRISTOWN\" ...\n $ addr     : chr [1:99492] \"REINDEER CT & DEAD END\" \"BRIAR PATH & WHITEMARSH LN\" \"HAWS AVE\" \"AIRY ST & SWEDE ST\" ...\n $ e        : num [1:99492] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   lat = col_double(),\n  ..   lng = col_double(),\n  ..   desc = col_character(),\n  ..   zip = col_double(),\n  ..   title = col_character(),\n  ..   timeStamp = col_datetime(format = \"\"),\n  ..   twp = col_character(),\n  ..   addr = col_character(),\n  ..   e = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr>"
  },
  {
    "objectID": "statKons/StatKons1_Demo_open_datasets.html#tidytuesday",
    "href": "statKons/StatKons1_Demo_open_datasets.html#tidytuesday",
    "title": "StatKons1: Open Datasets",
    "section": "Tidytuesday",
    "text": "Tidytuesday\nTidytuesday ist eine Plattform, in der wöchentlich - jeden Dienstag - einen öffentlich zugänglichen Datensatz publiziert. Dieses Projekt ist aus der R4DS Online Learning Community und dem R for Data Science Lehrbuch hervorgegangen. Beispiele sind:\n\nWomen in the Workplace\nDairy production & Consumption\nStar Wars Survey\nGlobal Coffee Chains\nMalaria Deaths\n…\n\nDownload via Github - 1. Möglichkeit\n\nGeht zum File, welches ihr herunterladen wollt\nKlickt auf das File (.csv, .xlsx etc.), um den Inhalt innerhalb der GitHub Benutzeroberfläche anzuzeigen\n\n\n\nKlickt mit der rechten Maustaste auf den Knopf “raw”\n\n\n\n(Ziel) Speichern unter…\n\nDownload via Github - 2. Möglichkeit\n\n# Beachtet dabei, dass ihr die URL zum originalen (raw) Datensatz habt \nstar_wars <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2018/2018-05-14/week7_starwars.csv\", locale = readr::locale(encoding = \"latin1\")) #not working yet"
  },
  {
    "objectID": "statKons/StatKons1_Demo_open_datasets.html#opendata.swiss",
    "href": "statKons/StatKons1_Demo_open_datasets.html#opendata.swiss",
    "title": "StatKons1: Open Datasets",
    "section": "opendata.swiss",
    "text": "opendata.swiss\nAuf opendata.swiss sind offene, frei verfügbare Daten der Schweizerischen Behörden zu finden. opendata.swiss ist ein gemeinsames Projekt von Bund, Kantonen, Gemeinden und weiteren Organisationen mit einem staatlichen Auftrag. Beispiele sind:\n\nStatistik der Schweizer Städte\nBevölkerung nach Stadtquartier, Herkunft, Geschlecht und Alter\nAltpapiermengen\n…"
  },
  {
    "objectID": "statKons/StatKons1_Demo_open_datasets.html#open-data-katalog-stadt-zürich",
    "href": "statKons/StatKons1_Demo_open_datasets.html#open-data-katalog-stadt-zürich",
    "title": "StatKons1: Open Datasets",
    "section": "Open Data Katalog Stadt Zürich",
    "text": "Open Data Katalog Stadt Zürich\nAuf der Seite der Stadt Zürich Open Data findet ihr verschiedene Datensätze der Stadt Zürich. Spannend daran ist, dass die veröffentlichten Daten kostenlos und zur freien - auch kommerziellen - Weiterverwendung zur Verfügung. Beispiele sind:\n\nBevölkerung nach Bildungsstand, Jahr, Alter und Geschlecht seit 1970\nLuftqualitätsmessungen\nHäufigste Hauptsprachen\n…\n\n\n# lade die Datei \"Häufigste Sprachen\"\nurlfile = \"https://data.stadt-zuerich.ch/dataset/bfs_ste_bev_hauptsprachen_top50_od3011/download/BEV301OD3011.csv\"\n\ndat_lang <- read_delim(url(urlfile), delim = \",\", col_names = T)\nhead(dat_lang)\n\n# A tibble: 6 × 7\n  Sprache        AntBev AnzBev untAntBevKI obAntBevKI untAnzBevKI obAnzBevKI\n  <chr>           <dbl>  <dbl>       <dbl>      <dbl>       <dbl>      <dbl>\n1 Deutsch          74.9 259670        74.4       75.3      257970     261380\n2 Englisch         13.5  46970        13.2       13.9       45630      48320\n3 Italienisch       6.2  21390         5.9        6.4       20470      22310\n4 Französisch       4.9  17060         4.7        5.2       16230      17890\n5 Spanisch          4.3  14940         4.1        4.5       14140      15740\n6 Serbokroatisch    3.1  10900         2.9        3.3       10220      11590"
  },
  {
    "objectID": "statKons/StatKons2_Demo_PCA.html",
    "href": "statKons/StatKons2_Demo_PCA.html",
    "title": "StatKons2: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)"
  },
  {
    "objectID": "statKons/StatKons2_Demo_PCA.html#pca-mit-sveg",
    "href": "statKons/StatKons2_Demo_PCA.html#pca-mit-sveg",
    "title": "StatKons2: Demo",
    "section": "PCA mit sveg",
    "text": "PCA mit sveg\n\n#Mit Beispieldaten aus Wildi (2013, 2017)\nlibrary(labdsv)\nlibrary(dave) # lade package für Daten sveg\nhead(sveg)\nstr(sveg)\n#View(sveg)\n\n#PCA-----------\n#Deckungen Wurzeltransformiert, cor=T erzwingt Nutzung der Korrelationsmatrix\no.pca <- labdsv::pca(sveg^0.25,cor=T)\no.pca2 <- stats::prcomp(sveg^0.25)\n\n#Koordinaten im Ordinationsraum => Y\nhead(o.pca$scores)\nhead(o.pca2$x)\n\n#Korrelationen der Variablen mit den Ordinationsachsen\nhead(o.pca$loadings)\nhead(o.pca2$rotation)\n\n#Erklaerte Varianz der Achsen (sdev ist die Wurzel daraus)\n# früher gabs den Befehl summary()\n# jetzt von hand: standardabweichung im quadrat/totale varianz * 100 (um prozentwerte zu bekommen)\nE<-o.pca$sdev^2/o.pca$totdev*100\nE[1:5] # erste fünf PCA\n\n#package stats funktioniert summary()\nsummary(o.pca2)\n\n#PCA-Plot der Lage der Beobachtungen im Ordinationsraum\nplot(o.pca$scores[,1],o.pca$scores[,2], type=\"n\", asp=1, xlab=\"PC1\", ylab=\"PC2\")\npoints(o.pca$scores[,1],o.pca$scores[,2],pch=18)\n\nplot(o.pca$scores[,1],o.pca$scores[,3],type=\"n\", asp=1, xlab=\"PC1\", ylab=\"PC3\")\npoints(o.pca$scores[,1],o.pca$scores[,3],pch=18)\n\n#Subjektive Auswahl von Arten zur Darstellung\nsel.sp <- c(3,11,23,39,46,72,77,96, 101, 119)\nsnames <- names(sveg[ , sel.sp])\nsnames\n\n#PCA-Plot der Korrelationen der Variablen (hier Arten) mit den Achsen\n#(hier reduction der observationen)\nx <- o.pca$loadings[,1]\ny <- o.pca$loadings[,2]\nplot(x,y,type=\"n\",asp=1)\narrows(0,0,x[sel.sp],y[sel.sp],length=0.08)\ntext(x[sel.sp],y[sel.sp],snames,pos=1,cex=0.6)\n\n# hier gehts noch zu weiteren Beispielen zu PCA's:\n# https://stats.stackexchange.com/questions/102882/steps-done-in-factor-analysis-compared-to-steps-done-in-pca/102999#102999\n# https://stats.stackexchange.com/questions/222/what-are-principal-component-scores\n# https://stats.stackexchange.com/questions/102882/steps-done-in-factor-analysis-compared-to-steps-done-in-pca/102999#102999\n\n\n\n\nAbbildung 37.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.3: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons2_Demo_PCA.html#pca-mit-beispiel-aus-skript",
    "href": "statKons/StatKons2_Demo_PCA.html#pca-mit-beispiel-aus-skript",
    "title": "StatKons2: Demo",
    "section": "PCA mit Beispiel aus Skript",
    "text": "PCA mit Beispiel aus Skript\n\n#Idee von Ordinationen aus Wildi p. 73-74\n\n#Für Ordinationen benötigen wir Matrizen, nicht Data.frames\n#Generieren von Daten\nraw <- matrix(c(1,2,2.5,2.5,1,0.5,0,1,2,4,3,1), nrow=6)\ncolnames(raw) <- c(\"spec.1\", \"spec.2\")\nrownames(raw) <- c(\"r1\",\"r2\",\"r3\",\"r4\",\"r5\",\"r6\")\nraw\n\n#originale Daten im zweidimensionalen Raum\nx1 <- raw[,1]\ny1 <- raw[,2]\nz <- c(rep(1:6))\n\n#Plot Abhängigkeit der Arten vom Umweltgradienten\nplot(c(x1, y1)~c(z,z), type=\"n\", axes=T, bty=\"l\", las=1, xlim=c(1,6), ylim=c(0,5),\n     xlab=\"Umweltgradient\",ylab=\"Deckung der Arten\")\npoints(x1~z, pch=21, type=\"b\")\npoints(y1~z, pch=16, type=\"b\")\n\n#zentrierte Daten\ncent <- scale(raw, scale=F)\nx2 <- cent[,1]\ny2 <- cent[,2]\n\n#rotierte Daten\no.pca <- pca(raw)\nx3 <- o.pca$scores[,1]\ny3 <- o.pca$scores[,2]\n\n#Visualisierung der Schritte im Ordinationsraum\nplot(c(y1,y2,y3)~c(x1,x2,x3), type=\"n\", axes=T, bty=\"l\", las=1, xlim=c(-4,4), \n     ylim=c(-4,4), xlab=\"Art 1\", ylab=\"Art 2\")\npoints(y1~x1, pch=21, type=\"b\", col=\"green\", lwd=2)\npoints(y2~x2, pch=16, type=\"b\",col=\"red\", lwd=2)\npoints(y3~x3, pch=17, type=\"b\", col=\"blue\", lwd=2)\n\n#zusammengefasst:-------\n\n#Durchführung der PCA\npca <- pca(raw)\n\n#Koordinaten im Ordinationsraum\npca$scores\n\n#Korrelationen der Variablen mit den Ordinationsachsen\npca$loadings\n\n#Erklärte Varianz der Achsen in Prozent\nE <- pca$sdev^2/pca$totdev*100\nE\n\n### excurs für weitere r-packages####\n\n#mit prcomp, ein weiteres Package für Ordinationen\npca.2 <- stats::prcomp(raw, scale=F)\nsummary(pca.2)\nplot(pca.2)\nbiplot(pca.2)\n\n#mit vegan, ein anderes Package für Ordinationen\npca.3 <- vegan::rda(raw, scale=FALSE) #Die Funktion rda führt ein PCA aus an wenn nicht Umwelt- und Artdaten definiert werden\n#scores(pca.3,display=c(\"sites\"))\n#scores(pca.3,display=c(\"species\"))\nsummary(pca.3, axes=0)\nbiplot(pca.3, scaling=2)\nbiplot(pca.3, scaling=\"species\")#scaling=species macht das selbe wie scaling=2\n\n\n\n\nAbbildung 37.4: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.5: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.6: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.7: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.8: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons2_Demo_PCA.html#ca-mit-sveg",
    "href": "statKons/StatKons2_Demo_PCA.html#ca-mit-sveg",
    "title": "StatKons2: Demo",
    "section": "CA mit sveg",
    "text": "CA mit sveg\n\nlibrary(vegan)\nlibrary(dave) #for the dataset sveg\nlibrary(FactoMineR)# siehe Beispiel hier: https://www.youtube.com/watch?v=vP4korRby0Q\n\n# ebenfalls mit transformierten daten\no.ca<-cca(sveg^0.5) #package vegan\no.ca1 <- CA(sveg^0.5) #package FactoMineR\n\n#Arten (o) und Communities (+) plotten\nplot(o.ca)\nsummary(o.ca1)\n\n#Nur Arten plotten\nx<-o.ca$CA$u[,1]\ny<-o.ca$CA$u[,2]\nplot(x,y)\n\n#Anteilige Varianz, die durch die ersten beiden Achsen erklaert wird\no.ca$CA$eig[1:63]/sum(o.ca$CA$eig)\n\n\n\n\nAbbildung 37.9: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.10: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.11: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons2_Demo_PCA.html#nmds-mit-sveg",
    "href": "statKons/StatKons2_Demo_PCA.html#nmds-mit-sveg",
    "title": "StatKons2: Demo",
    "section": "NMDS mit sveg",
    "text": "NMDS mit sveg\n\n#NMDS----------\n\n#Distanzmatrix als Start erzeugen\nlibrary(MASS)\nlibrary(vegan)\n\nmde <-vegdist(sveg,method=\"euclidean\")\nmdm <-vegdist(sveg,method=\"manhattan\")\n\n#Zwei verschiedene NMDS-Methoden\nset.seed(1) #macht man, wenn man bei einer Wiederholung exakt die gleichen Ergebnisse will\no.imds<-isoMDS(mde, k=2) # mit K = Dimensionen\nset.seed(1)\no.mmds<-metaMDS(mde,k=3) # scheint nicht mit 2 Dimensionen zu konvergieren\n\nplot(o.imds$points)\nplot(o.mmds$points)\n\n#Stress =  Abweichung der zweidimensionalen NMDS-Loesung von der originalen Distanzmatrix\nstressplot(o.imds,mde)\nstressplot(o.mmds,mde)"
  },
  {
    "objectID": "statKons/StatKons2_Demo_PCA.html#pca-mit-mtcars",
    "href": "statKons/StatKons2_Demo_PCA.html#pca-mit-mtcars",
    "title": "StatKons2: Demo",
    "section": "PCA mit mtcars",
    "text": "PCA mit mtcars\n\n#Beispiel inspiriert von Luke Hayden: https://www.datacamp.com/community/tutorials/pca-analysis-r\n\n#Ausgangslage: viel zusammenhängende Variablen\n#Ziel: Reduktion der Variablenkomplexität\n#WICHTIG hier: Datenformat muss Wide sein! Damit die Matrixmultiplikation gemacht werden kann\n\n# lade Datei\ncars <- mtcars\n\n# Korrelationen\ncor<- cor(cars[,c(1:7,10,11)])\ncor[abs(cor)<.7] <- 0\ncor\n\n#definiere Datei für PCA\ncars <- mtcars[,c(1:7,10,11)]\n\n# pca\n# achtung unterschiedliche messeinheiten, wichtig es muss noch einheitlich transfomiert werden\nlibrary(FactoMineR) # siehe Beispiel hier: https://www.youtube.com/watch?v=vP4korRby0Q\no.pca <- PCA(cars, scale.unit = TRUE) # entweder korrelations oder covarianzmatrix\n\n# schaue output an\nsummary(o.pca) # generiert auch automatische plots"
  },
  {
    "objectID": "statKons/StatKons2_Demo_PCA.html#ca-mit-mtcars",
    "href": "statKons/StatKons2_Demo_PCA.html#ca-mit-mtcars",
    "title": "StatKons2: Demo",
    "section": "CA mit mtcars",
    "text": "CA mit mtcars\n\nlibrary(vegan)\n\n# ebenfalls mit transformierten daten\no.ca<-vegan::cca(cars)\no.ca1 <- FactoMineR::CA(cars) #blau: auots, rot: variablen\n\n# plotten (schwarz: autos, rot: variablen)\nplot(o.ca)\nsummary(o.ca)\nsummary(o.ca1)\n\n#Nur autos plotten; wieso?\nx<-o.ca$CA$u[,1]\ny<-o.ca$CA$u[,2]\nplot(x,y)\n\n#Anteilige Varianz, die durch die ersten beiden Achsen erklaert wird\no.ca$CA$eig[1:8]/sum(o.ca$CA$eig)\n\n\n\n\nAbbildung 37.12: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.13: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.14: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons2_Demo_PCA.html#nmds-mit-mtcars",
    "href": "statKons/StatKons2_Demo_PCA.html#nmds-mit-mtcars",
    "title": "StatKons2: Demo",
    "section": "NMDS mit mtcars",
    "text": "NMDS mit mtcars\n\n#Distanzmatrix als Start erzeugen\nlibrary(MASS)\n\nmde <-vegan::vegdist(cars,method=\"euclidean\")\nmdm <-vegan::vegdist(cars,method=\"manhattan\")\n\n#Zwei verschiedene NMDS-Methoden\nset.seed(1) #macht man, wenn man bei einer Wiederholung exakt die gleichen Ergebnisse will\no.mde.mass <- MASS::isoMDS(mde, k=2) # mit K = Dimensionen\no.mdm.mass <- MASS::isoMDS(mdm)\n\nset.seed(1)\no.mde.vegan <- vegan::metaMDS(mde,k=1) # scheint nicht mit 2 Dimensionen zu konvergieren\no.mdm.vegan <- vegan::metaMDS(mdm, k = 2)\n\n#plot euclidean distance\nplot(o.mde.mass$points)\nplot(o.mde.vegan$points)\n\n#plot manhattan distance\nplot(o.mdm.mass$points)\nplot(o.mdm.vegan$points)\n\n#Stress =  Abweichung der zweidimensionalen NMDS-Loesung von der originalen Distanzmatrix\nvegan::stressplot(o.mde.vegan, mde)\nvegan::stressplot(o.mde.mass, mde)\n\n\n\n\nAbbildung 37.15: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.16: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.17: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.18: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.19: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 37.20: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons3_Demo_LM.html",
    "href": "statKons/StatKons3_Demo_LM.html",
    "title": "StatKons3: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)"
  },
  {
    "objectID": "statKons/StatKons3_Demo_LM.html#einfaktorielle-anova",
    "href": "statKons/StatKons3_Demo_LM.html#einfaktorielle-anova",
    "title": "StatKons3: Demo",
    "section": "Einfaktorielle ANOVA",
    "text": "Einfaktorielle ANOVA\n\n# für mehr infos\n#https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html\n\ncars <- mtcars |> \n    mutate(cyl = as.factor(cyl)) |> \n    slice(-31) # lösch die 31ste Zeile\n\n#Alternativ ginge auch das\ncars[-31,]\n\n# schaue daten zuerst mal an\n#1. Responsevariable\nhist(cars$hp) # nur sinnvoll bei grossem n\nboxplot(cars$hp)\n\n\n#2. Responsevariable ~ Prediktorvariable\ntable(cars$cyl) # mögliches probel, da n's unterschiedlich gross\n\nboxplot(cars$hp ~ cars$cyl) # varianzheterogentität weniger das problem, \n# aber normalverteilung der residuen problematisch\n\n# definiere das modell für eine ein-faktorielle anova\naov.1 <- aov(log10(hp) ~ cyl, data = cars)\n\n#3. Schaue Modelgüte an\npar(mfrow = c(2,2))\nplot(aov.1)\n\n#4. Schaue output an und ordne es ein\nsummary.lm(aov.1)\n\n#5. bei meheren Kategorien wende einen post-hoc Vergleichstest an\nTukeyHSD(aov.1)\n\n#6. Ergebnisse passend darstellen\nlibrary(multcomp)\n\n#erstens die signifikanten Unterschiede mit Buchstaben versehen\nletters <- multcomp::cld(multcomp::glht(aov.1, linfct=multcomp::mcp(cyl=\"Tukey\"))) # Achtung die kategoriale\n#Variable (unsere unabhängige Variable \"cyl\") muss als Faktor\n#definiert sein z.B. as.factor()\n\n#einfachere Variante\nboxplot(hp ~ cyl, data = cars)\nmtext(letters$mcletters$Letters, at=1:3)\n\n#schönere Variante :)\nggplot(cars, aes(x = cyl, y = hp)) +\n    stat_boxplot(geom = \"errorbar\", width = .5) +\n  geom_boxplot(size = 1) +\n    annotate(\"text\", x = 1, y = 350, label = \"a\", size = 7)+\nannotate(\"text\", x = 2, y = 350, label = \"b\", size = 7)+\n  annotate(\"text\", x = 3, y = 350, label = \"c\", size = 7)\n  labs(x = \"\\nAnzahl Zylinder\", y = \"Pferdestärke\")  +\n  mytheme\n\n#Plot exportieren\nggsave(filename = \"statKons/distill-preview.png\",\n       device = \"png\") # hier kann man festlegen, was für ein Bildformat\n#exportiert werden möchte\n\n# Sind die Voraussetzungen für eine Anova verletzt, überprüfe alternative \n# nicht-parametische Tests z.B. oneway-Test mit Welch-korrektur für ungleiche\n# Varianzen (Achtung auch dieser Test hat Voraussetzungen -> siehe Skript XY)\nlibrary(rosetta)\nwelch1 <- oneway.test(hp ~ cyl, data = cars, var.equal = FALSE)\nrosetta::posthocTGH(cars$hp, cars$cyl, method = \"games-howell\")"
  },
  {
    "objectID": "statKons/StatKons3_Demo_LM.html#mehrfaktorielle-anova",
    "href": "statKons/StatKons3_Demo_LM.html#mehrfaktorielle-anova",
    "title": "StatKons3: Demo",
    "section": "Mehrfaktorielle ANOVA",
    "text": "Mehrfaktorielle ANOVA\n\n\n\nCall:\naov(formula = hp ~ cyl * am + wt, data = cars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-33.834 -14.280  -7.418   7.120  60.282 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   32.743     31.636   1.035 0.310980    \ncyl6          22.556     20.859   1.081 0.290274    \ncyl8          88.818     20.463   4.340 0.000222 ***\nam            13.002     19.952   0.652 0.520811    \nwt            17.691      9.409   1.880 0.072272 .  \ncyl6:am       14.626     27.392   0.534 0.598276    \ncyl8:am       73.356     33.194   2.210 0.036894 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 26.73 on 24 degrees of freedom\nMultiple R-squared:  0.8428,    Adjusted R-squared:  0.8035 \nF-statistic: 21.45 on 6 and 24 DF,  p-value: 1.511e-08\n\n\n\n\n\nAbbildung 38.1: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons3_Demo_LM.html#einfache-regression",
    "href": "statKons/StatKons3_Demo_LM.html#einfache-regression",
    "title": "StatKons3: Demo",
    "section": "Einfache Regression",
    "text": "Einfache Regression\n\n# inspiriert von Simon Jackson: http s://drsimonj.svbtle.com/visualising-residuals\ncars <- mtcars |> \n  #ändere die unabhängige Variable mpg in 100Km/L\n  mutate(kml = (235.214583/mpg)) # mehr Infos hier: https://www.asknumbers.com/mpg-to-L100km.aspx\n  # |>  # klone data set\n  # slice(-31) # # lösche Maserrati und schaue nochmals Modelfit an\n\n#############\n##1.Daten anschauen\n############\n\n# Zusammenhang mal anschauen\n# Achtung kml = 100km pro Liter \nplot(hp ~ kml, data = cars)\n\n# Responsevariable anschauen\nboxplot(cars$hp)\n\n# Korrelationen uv + av anschauen\n# Reihenfolge spielt hier keine Rolle, wieso?\ncor(cars$kml, cars$hp) # hängen stark zusammen\n\n[1] 0.7629477\n\n###################\n#2. Modell definieren: einfache regression\n##################\nmodel <- lm(hp ~ kml, data = cars)\nsummary.lm(model)\n\n\nCall:\nlm(formula = hp ~ kml, data = cars)\n\nResiduals:\n   Min     1Q Median     3Q    Max \n-75.22 -25.52 -13.31  30.92 148.69 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  -26.021     27.880  -0.933    0.358    \nkml           13.540      2.095   6.464 3.84e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 45.06 on 30 degrees of freedom\nMultiple R-squared:  0.5821,    Adjusted R-squared:  0.5682 \nF-statistic: 41.79 on 1 and 30 DF,  p-value: 3.839e-07\n\n###############\n#3.Modeldiagnostik und ggf. Anpassungen ans Modell oder ähnliches\n###############\n\n# semi schöne Ergebnisse\nlibrary(ggfortify)\nggplot2::autoplot(model) + mytheme # gitb einige Extremwerte => was tun? (Eingabe/Einlesen \n#überprüfen, Transformation, Extremwerte nur ausschliessen mit guter Begründung)\n\n# erzeuge vorhergesagte Werte und Residualwerte\ncars$predicted <- predict(model)   # bilde neue Variable mit geschätzten y-Werten\ncars$residuals <- residuals(model)\n\n# schaue es dir an, sieht man gut was die Residuen sind\nd <- cars |>  \n    dplyr::select(hp, kml, predicted, residuals)\n\n# schauen wir es uns an\nhead(d, 4)\n\n                hp      kml predicted residuals\nMazda RX4      110 11.20069  125.6411 -15.64107\nMazda RX4 Wag  110 11.20069  125.6411 -15.64107\nDatsun 710      93 10.31643  113.6678 -20.66776\nHornet 4 Drive 110 10.99134  122.8063 -12.80626\n\n#visualisiere residuen\nggplot(d, aes(x = kml, y = hp)) +\n  # verbinde beobachtete werte mit vorausgesagte werte\n  geom_segment(aes(xend = kml, yend = predicted)) + \n  geom_point() + # Plot the actual points\n  geom_point(aes(y = predicted), shape = 4) + # plot geschätzten y-Werten\n  # geom_line(aes(y = predicted), color = \"lightgrey\") # alternativ code\n  geom_smooth(method = \"lm\", se = FALSE, color = \"lightgrey\") +\n  # Farbe wird hier zu den redisuen gemapped, abs(residuals) wegen negativen zahlen  \n  geom_point(aes(color = abs(residuals))) + \n  # Colors to use here (für mehrere farben verwende color_gradient2)\n  scale_color_continuous(low = \"blue\", high = \"red\") +  \n  scale_x_continuous(limits = c(0, 40)) +\n  scale_y_continuous(limits = c(0, 300)) +\n  guides(color = \"none\") +  # Color legende entfernen\n  labs(x = \"\\nVerbraucht in Liter pro 100km\", y = \"Motorleistung in PS\\n\") +\n  mytheme\n\n##########\n#4. plotte Ergebnis\n##########\nggplot(d, aes(x = kml, y = hp)) +\n    geom_point(size = 4) +\n    # geom_point(aes(y = predicted), shape = 1, size = 4) +\n    # plot regression line\n    geom_smooth(method = \"lm\", se = FALSE, color = \"lightgrey\") +\n    #intercept\n    geom_line(aes(y = mean(hp)), color = \"blue\") +\n    mytheme\n\n\n\n\nAbbildung 38.2: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 38.3: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 38.4: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 38.5: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 38.6: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons3_Demo_LM.html#multiple-regression",
    "href": "statKons/StatKons3_Demo_LM.html#multiple-regression",
    "title": "StatKons3: Demo",
    "section": "Multiple Regression",
    "text": "Multiple Regression\n\n# Select data\ncars <- mtcars |> \n    slice(-31) |>\n    mutate(kml = (235.214583/mpg)) |> \n    dplyr::select(kml, hp, wt, disp)\n\n################\n# 1. Multikollinearitüt überprüfen\n# Korrelation zwischen Prädiktoren kleiner .7\ncor <- cor(cars[, -2])\ncor[abs(cor)<0.7] <- 0  \ncor # \n\n           kml        wt      disp\nkml  1.0000000 0.8912658 0.8786238\nwt   0.8912658 1.0000000 0.8878515\ndisp 0.8786238 0.8878515 1.0000000\n\n##### info zu Variablen\n#wt = gewicht\n#disp = hubraum\n\n###############\n#2. Responsevariable + Kriteriumsvariable anschauen\n##############\n# was würdet ihr tun?\n\n############\n#3. Definiere das Model\n############\nmodel1 <- lm(hp ~ kml + wt + disp, data = cars) \nmodel2 <- lm(hp ~ kml + wt, data = cars)\nmodel3 <- lm(log10(hp) ~ kml + wt, data = cars)\n\n#############\n#4. Modeldiagnostik\n############\n\nlibrary(ggfortify)\nggplot2::autoplot(model1)\nggplot2::autoplot(model2) # besser, immernoch nicht ok => transformation? vgl. model3\nggplot2::autoplot(model3)\n\n############\n#5. Modellfit vorhersagen: wie gut sagt mein Modell meine Daten vorher\n############\n\n#es gibt 3 Mögliche Wege\n\n# gebe dir predicted values aus für model2 (für vorzeigebeispiel einfacher :)\n# gibts unterschidliche varianten die predicted values zu berechnen\n# 1. default funktion predict(model) verwenden\ncars$predicted <- predict(model2)\n\n# 2. datensatz selber zusammenstellen (nicht empfohlen): wichtig, die \n# prädiktoren müssen denselben\n# namen haben wie im Model\n# besser mit Traindata von Beginn an mehr Infos hier: https://www.r-bloggers.com/using-linear-regression-to-predict-energy-output-of-a-power-plant/\n\nnew.data <- tibble(kml = sample(seq(6.9384, 22.61, .3), 31),\n                   wt = sample(seq(1.513, 5.424, 0.01), 31),\n                   disp = sample(seq(71.1, 472.0, .1), 31)) \ncars$predicted_own <- predict(model2, newdata = new.data)\n\n# 3. train_test_split durchführen (empfohlen) muss jedoch von beginn an bereits \n# gemacht werden - Logik findet ihr hier: https://towardsdatascience.com/train-test-split-and-cross-validation-in-python-80b61beca4b6 oder https://towardsdatascience.com/6-amateur-mistakes-ive-made-working-with-train-test-splits-916fabb421bb\n# beispiel hier: https://ijlyttle.github.io/model_cv_selection.html\ncars <- mtcars |> \n  mutate(id = row_number()) |>  # für das mergen der Datensätze\n  mutate(kml = (235.214583/mpg)) |> \n  dplyr::select(kml, hp, wt, disp, id)\n  \ntrain_data <- cars |> \n  dplyr::sample_frac(.75) # für das Modellfitting\n\ntest_data  <- dplyr::anti_join(cars, train_data, by = 'id') # für den Test mit predict\n\n# erstelle das Modell und \"trainiere\" es auf den train Datensatz\nmodel2_train <- lm(hp ~ kml + wt, data = train_data)\n\n# mit dem \"neuen\" Datensatz wird das Model überprüft ob guter Modelfit\ntrain_data$predicted_test <- predict(model2_train, newdata = test_data)\n\n# Residuen\ntrain_data$residuals <- residuals(model2_train)\nhead(train_data)\n\n                         kml  hp    wt  disp id predicted_test residuals\nMerc 280C           13.21430 123 3.440 167.6 11      197.79473 -24.76900\nDodge Challenger    15.17513 150 3.520 318.0 22       94.65513 -28.07375\nMazda RX4 Wag       11.20069 110 2.875 160.0  2      106.49124 -16.51249\nLincoln Continental 22.61679 215 5.424 460.0 16      148.06554 -45.39110\nMaserati Bora       15.68097 335 3.570 301.0 31      177.64086 149.70834\nFord Pantera L      14.88700 264 3.170 351.0 29      154.24348  83.46953\n\n#weiterführende Infos zu \"machine learning\" Idee hier: https://stat-ata-asu.github.io/MachineLearningToolbox/regression-models-fitting-them-and-evaluating-their-performance.html\n#wichtigstes Packet in dieser Hinsicht ist \"caret\": https://topepo.github.io/caret/\n#beste Philosophie ist tidymodels: https://www.tidymodels.org\n\n#----------------\n# Schnelle variante mit broom\nd <- lm(hp ~ kml + wt + disp, data = cars) |> \n    broom::augment()\n\nhead(d)\n\n# A tibble: 6 × 11\n  .rownames    hp   kml    wt  disp .fitted .resid   .hat .sigma .cooksd .std.…¹\n  <chr>     <dbl> <dbl> <dbl> <dbl>   <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl>\n1 Mazda RX4   110  11.2  2.62   160    123. -12.7  0.0478   41.4 1.29e-3  -0.320\n2 Mazda RX…   110  11.2  2.88   160    114.  -4.21 0.0456   41.4 1.34e-4  -0.106\n3 Datsun 7…    93  10.3  2.32   108    103.  -9.87 0.0758   41.4 1.31e-3  -0.252\n4 Hornet 4…   110  11.0  3.22   258    142. -31.6  0.0958   41.0 1.77e-2  -0.817\n5 Hornet S…   175  12.6  3.44   360    191. -16.3  0.210    41.3 1.35e-2  -0.451\n6 Valiant     105  13.0  3.46   225    138. -33.5  0.0445   40.9 8.22e-3  -0.841\n# … with abbreviated variable name ¹​.std.resid\n\nggplot(d, aes(x = kml, y = hp)) +\n    geom_segment(aes(xend = kml, yend = .fitted), alpha = .2) +\n    geom_point(aes(color = .resid)) +\n    scale_color_gradient2(low = \"blue\", mid = \"white\", high = \"red\") +\n    guides(color = \"none\") +\n    geom_point(aes(y = .fitted), shape = 4) +\n    scale_y_continuous(limits = c(0,350)) +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"lightgrey\") +\n    mytheme\n\n############\n# 6. Modellvereinfachung\n############\n\n# Varianzpartitionierung\nlibrary(hier.part)\ncars <- mtcars |> \n  mutate(kml = (235.214583/mpg)) |> \n  select(-mpg)\n\nnames(cars) # finde \"position\" deiner Responsevariable\n\n [1] \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" \"carb\"\n[11] \"kml\" \n\nX = cars[, -3] # definiere all die Prädiktorvariablen im Model (minus Responsevar)\n\n# dauert ein paar sekunden\nhier.part(cars$hp, X, gof = \"Rsqu\")\n\n500 regressions calculated: 523 to go...\n1000 regressions calculated: 23 to go...\n\n\n$gfs\n   [1] 0.00000000 0.69296876 0.62559967 0.20138474 0.43394878 0.50158037\n   [7] 0.52286889 0.05914831 0.01580156 0.56221874 0.58208914 0.70157840\n  [13] 0.72811946 0.69310853 0.76472964 0.69973299 0.74359881 0.79980295\n  [19] 0.82698425 0.71463110 0.65135711 0.63458742 0.78986030 0.67805901\n  [25] 0.70303368 0.76796282 0.85228877 0.64550208 0.43480718 0.65040165\n  [31] 0.54396026 0.21331941 0.27079847 0.70834337 0.58453013 0.79682873\n  [37] 0.61867036 0.52110134 0.53525623 0.70212836 0.58404878 0.58760284\n  [43] 0.67560899 0.58155670 0.64428779 0.78331171 0.53805532 0.52343441\n  [49] 0.69191341 0.67551298 0.07144882 0.64448408 0.62225549 0.68082647\n  [55] 0.65681652 0.74983258 0.74931259 0.70639896 0.79600184 0.70972432\n  [61] 0.77443849 0.83916007 0.85842295 0.71471071 0.73577619 0.76677218\n  [67] 0.72881813 0.74880327 0.79980419 0.82747926 0.76073032 0.80549436\n  [73] 0.70066373 0.76798297 0.81963721 0.82698589 0.73089012 0.77152979\n  [79] 0.76531898 0.80207405 0.83638196 0.80713597 0.74506651 0.80185437\n  [85] 0.82753527 0.72291301 0.80007453 0.83107368 0.78553239 0.83517997\n  [91] 0.83988461 0.83282477 0.65450206 0.79040652 0.69545535 0.70342648\n  [97] 0.76975533 0.85276296 0.67311870 0.80645505 0.67984470 0.70423023\n [103] 0.76800148 0.88633511 0.68161844 0.79458833 0.78995083 0.81733322\n [109] 0.87660075 0.80864047 0.71692886 0.78083420 0.85261741 0.69522623\n [115] 0.76847585 0.86213216 0.72724133 0.86062854 0.78538181 0.85578157\n [121] 0.79682882 0.62258483 0.53307390 0.55750492 0.72594325 0.58521928\n [127] 0.65908922 0.68707690 0.65041286 0.78158349 0.78577787 0.54467000\n [133] 0.57375200 0.74955132 0.67987210 0.27404880 0.70858640 0.62839108\n [139] 0.71547356 0.67510461 0.76238306 0.80258451 0.79683588 0.80465509\n [145] 0.82377636 0.80518231 0.64137188 0.67979455 0.75230630 0.67651288\n [151] 0.54772191 0.70242151 0.62860220 0.70740146 0.66147555 0.74983405\n [157] 0.68341227 0.60817564 0.69980065 0.78347917 0.68064593 0.78280726\n [163] 0.78738551 0.77225036 0.78702703 0.81727279 0.57643275 0.73385576\n [169] 0.69023966 0.73264901 0.72856575 0.77905576 0.68099695 0.65682800\n [175] 0.74986342 0.75030963 0.74939731 0.80048400 0.75005477 0.78224997\n [181] 0.83969940 0.86143703 0.76351250 0.80899531 0.71229793 0.77786952\n [187] 0.83948092 0.88822668 0.73686503 0.80606074 0.79904706 0.84407043\n [193] 0.87717914 0.81272272 0.77765300 0.84185630 0.85880837 0.72312144\n [199] 0.83946012 0.87138757 0.79122414 0.87517192 0.85049347 0.86111599\n [205] 0.80909657 0.73715485 0.77562212 0.82064219 0.82762494 0.76358599\n [211] 0.77346294 0.76694706 0.80221403 0.83684121 0.81053364 0.75037337\n [217] 0.80189505 0.82829718 0.76151537 0.80010938 0.83113283 0.79204699\n [223] 0.83538215 0.84028882 0.83500551 0.81865915 0.80894538 0.83692488\n [229] 0.84479937 0.81292299 0.77051366 0.82068764 0.82755459 0.73463898\n [235] 0.82185155 0.83374702 0.78585187 0.83906576 0.83988614 0.83842062\n [241] 0.77283425 0.80764242 0.84340919 0.81651659 0.80468638 0.83645252\n [247] 0.80953707 0.83806169 0.84553086 0.85051102 0.80185450 0.83445915\n [253] 0.78835469 0.83756422 0.84194292 0.83302726 0.83524642 0.84023880\n [259] 0.84267457 0.85185481 0.80776007 0.69560375 0.70465947 0.76992472\n [265] 0.88797469 0.69590025 0.79475437 0.79040653 0.81993093 0.87676292\n [271] 0.80951951 0.71817514 0.78220335 0.85309291 0.71427479 0.77093557\n [277] 0.86282428 0.72773282 0.86111881 0.78656188 0.85590592 0.81529801\n [283] 0.80751257 0.82987551 0.88679624 0.81227004 0.71850400 0.78101802\n [289] 0.88899561 0.71208613 0.76848755 0.88642012 0.73047097 0.88636212\n [295] 0.79295923 0.88732769 0.79464213 0.81911897 0.88487494 0.81441091\n [301] 0.82405506 0.87668384 0.80905209 0.87794489 0.83509981 0.87672526\n [307] 0.78105018 0.86235675 0.73858142 0.86081485 0.79713715 0.85584897\n [313] 0.86352513 0.78662956 0.86336685 0.86149172 0.80278704 0.79683898\n [319] 0.80755004 0.82899357 0.80520063 0.64156584 0.68582982 0.76190272\n [325] 0.67989363 0.57620483 0.73078262 0.63317753 0.72612205 0.67641277\n [331] 0.76496215 0.69059935 0.65990058 0.78269863 0.78662265 0.70081945\n [337] 0.80113308 0.78768414 0.79531362 0.79723923 0.82997438 0.59747082\n [343] 0.75193216 0.69033206 0.75207780 0.73659729 0.78496552 0.71720318\n [349] 0.67670416 0.76691030 0.76376253 0.80263436 0.80779564 0.82628524\n [355] 0.81041747 0.80926844 0.82748766 0.80518231 0.82441337 0.81520211\n [361] 0.83130358 0.68003202 0.75266080 0.69220997 0.75283569 0.73256860\n [367] 0.77905599 0.71082525 0.66274549 0.74986926 0.75046281 0.69338903\n [373] 0.78552251 0.78810331 0.77281408 0.78707052 0.81727991 0.79067323\n [379] 0.80392387 0.82893834 0.82087151 0.73760383 0.73261860 0.77931744\n [385] 0.77907645 0.75090888 0.81335565 0.75008101 0.78622129 0.84021003\n [391] 0.88874381 0.77064747 0.81050035 0.80211285 0.84410211 0.87718004\n [397] 0.81712113 0.78575072 0.84273585 0.86242466 0.76429972 0.83983431\n [403] 0.87143090 0.79881222 0.87523450 0.85124175 0.86304134 0.82212211\n [409] 0.81306778 0.84839637 0.88828036 0.81505250 0.78117989 0.84196298\n [415] 0.89416092 0.74003809 0.84021599 0.88826643 0.79143221 0.88934404\n [421] 0.85256750 0.88923203 0.81125300 0.85294282 0.88806408 0.82323184\n [427] 0.84467626 0.87777654 0.81619473 0.88100639 0.85683202 0.87731384\n [433] 0.84347569 0.87788010 0.79471151 0.87825770 0.85294815 0.86186269\n [439] 0.87703205 0.85126670 0.87185100 0.87517400 0.82220832 0.81115486\n [445] 0.83697572 0.84480380 0.81668240 0.77838416 0.82191676 0.82835138\n [451] 0.76397958 0.82234662 0.83375960 0.79269545 0.83907720 0.84031885\n [457] 0.83895729 0.77411887 0.80778796 0.84393058 0.81979543 0.80469861\n [463] 0.83685348 0.81180181 0.83893754 0.84553203 0.85051407 0.80189675\n [469] 0.83451815 0.79505514 0.83763992 0.84259487 0.83552708 0.83554704\n [475] 0.84048439 0.84274953 0.85187865 0.82494750 0.84800660 0.85495070\n [481] 0.82492519 0.83705985 0.84502260 0.81633367 0.84931483 0.84807391\n [487] 0.85073524 0.82470970 0.83748586 0.78874689 0.84083290 0.84196486\n [493] 0.83937773 0.84042228 0.84034197 0.84330667 0.85237763 0.80918158\n [499] 0.84342039 0.82062959 0.84473677 0.85346381 0.85908153 0.83871997\n [505] 0.84619696 0.85066660 0.85698636 0.83838604 0.84344726 0.84674879\n [511] 0.85412611 0.85249411 0.81583638 0.80814642 0.83101658 0.88835012\n [517] 0.81349924 0.71984178 0.78225902 0.89128573 0.72414022 0.77093574\n [523] 0.88800097 0.73091120 0.88842653 0.79522731 0.88887974 0.79475936\n [529] 0.82217601 0.88566925 0.81474431 0.82499929 0.87701266 0.80959947\n [535] 0.87887843 0.83694379 0.87692760 0.78222336 0.86322400 0.73988522\n [541] 0.86128928 0.79800659 0.85597973 0.86485586 0.78860298 0.86421716\n [547] 0.86202393 0.81635774 0.83431271 0.89223343 0.82018617 0.83286533\n [553] 0.88704414 0.81318690 0.88682147 0.83687230 0.88767504 0.78112400\n [559] 0.88899718 0.74075349 0.88900097 0.80126982 0.88998534 0.88654594\n [565] 0.79296307 0.88742913 0.88743462 0.82547907 0.88491353 0.81474148\n [571] 0.88516201 0.83758418 0.88496738 0.87811609 0.83981887 0.87679143\n [577] 0.87794755 0.86357824 0.79713720 0.86370655 0.86157233 0.86423977\n [583] 0.80278722 0.81117207 0.83265317 0.81051062 0.81077238 0.83025662\n [589] 0.80520620 0.82899672 0.81834862 0.83580922 0.68583999 0.76228795\n [595] 0.69223194 0.76205386 0.73840564 0.78622935 0.73281147 0.67981848\n [601] 0.76736840 0.76545206 0.70788698 0.80125314 0.78867524 0.79534978\n [607] 0.79732333 0.83093399 0.80295255 0.80793844 0.83330983 0.83000472\n [613] 0.75256542 0.73797608 0.78575249 0.78706983 0.76692166 0.81165979\n [619] 0.83002262 0.81043624 0.82751635 0.81759372 0.83352086 0.82754595\n [625] 0.82058838 0.83460603 0.83139455 0.75289702 0.73415534 0.77946294\n [631] 0.77907969 0.75091409 0.79108147 0.80394434 0.82928780 0.82120079\n [637] 0.82902597 0.77971944 0.82641981 0.81579640 0.84848813 0.88884932\n [643] 0.81941006 0.78984038 0.84297941 0.89444052 0.77083045 0.84069196\n [649] 0.88887897 0.79888878 0.89013075 0.85292360 0.88969019 0.81382048\n [655] 0.85297988 0.88806681 0.82758606 0.84476751 0.87781882 0.81908820\n [661] 0.88115422 0.85688939 0.87732010 0.84390434 0.87793232 0.80259137\n [667] 0.87847102 0.85406979 0.86430862 0.87704993 0.85170006 0.87186452\n [673] 0.87523955 0.82925562 0.85910108 0.89634683 0.82712803 0.84858068\n [679] 0.88829197 0.81895685 0.88934427 0.85683277 0.88924950 0.84427088\n [685] 0.89545024 0.79491085 0.89588417 0.85588787 0.89517205 0.88939702\n [691] 0.85265270 0.88926174 0.89084900 0.85300192 0.88978666 0.82904912\n [697] 0.89133564 0.86612213 0.88817211 0.88101024 0.85715147 0.87786381\n [703] 0.88106657 0.88319075 0.85550678 0.87841816 0.87825828 0.87703903\n [709] 0.82663055 0.84807892 0.85495072 0.82862026 0.83713957 0.84504803\n [715] 0.81867865 0.84944900 0.84810148 0.85073533 0.82526030 0.83750442\n [721] 0.79581587 0.84088250 0.84259493 0.84010082 0.84043919 0.84062577\n [727] 0.84332954 0.85237812 0.80921291 0.84401219 0.82242699 0.84564483\n [733] 0.85346520 0.85908639 0.83936578 0.84622423 0.85068659 0.85717095\n [739] 0.83867667 0.84372531 0.84683293 0.85423403 0.85249896 0.84811534\n [745] 0.85615939 0.83102995 0.85931200 0.85772302 0.86001659 0.84937581\n [751] 0.84835934 0.85097379 0.85744811 0.84396992 0.84359567 0.84729276\n [757] 0.85500794 0.85267553 0.84487316 0.85356865 0.85981845 0.86505202\n [763] 0.85724838 0.85631995 0.81647712 0.83577770 0.89464137 0.82071041\n [769] 0.83334132 0.88835112 0.81381193 0.88877867 0.83824412 0.88915899\n [775] 0.78226285 0.89161027 0.74194676 0.89152049 0.80289912 0.89217114\n [781] 0.88844443 0.79529126 0.88889472 0.88957157 0.82672488 0.88605596\n [787] 0.81488188 0.88659038 0.83986812 0.88584270 0.87891106 0.84050919\n [793] 0.87716028 0.87888322 0.86500667 0.79807493 0.86480843 0.86209170\n [799] 0.86560950 0.83654931 0.89245247 0.82111608 0.89229802 0.84048960\n [805] 0.89287849 0.88727578 0.84048569 0.88792432 0.88777324 0.88900097\n [811] 0.80199182 0.88998982 0.88999308 0.88774851 0.88517659 0.84190441\n [817] 0.88499616 0.88519038 0.87811672 0.86437433 0.81360270 0.83369901\n [823] 0.81051067 0.83270369 0.82116980 0.83905230 0.83063245 0.82217644\n [829] 0.83696755 0.83607536 0.76230183 0.73889549 0.78639725 0.78754388\n [835] 0.76736987 0.80295609 0.80796927 0.83447993 0.83109967 0.83401365\n [841] 0.78708304 0.83003285 0.82225575 0.83685418 0.83388387 0.83518594\n [847] 0.77981201 0.82930752 0.83140115 0.85921967 0.89681280 0.83142564\n [853] 0.84871760 0.88891309 0.82171752 0.89013550 0.85689115 0.88973981\n [859] 0.84481151 0.89606071 0.80266059 0.89640724 0.85647331 0.89540826\n [865] 0.89013600 0.85295445 0.88980008 0.89160423 0.85305640 0.88991347\n [871] 0.83144372 0.89148016 0.86618736 0.88818141 0.88117092 0.85726072\n [877] 0.87792190 0.88120016 0.88320145 0.85600093 0.87843497 0.87847144\n [883] 0.87705497 0.85916643 0.89679757 0.83393203 0.89739528 0.86634127\n [889] 0.89706337 0.88940374 0.85715611 0.88926561 0.89089032 0.89635868\n [895] 0.85687869 0.89639831 0.89752554 0.89098576 0.89179711 0.86612220\n [901] 0.88982737 0.89139211 0.88106983 0.88319078 0.84816501 0.85620654\n [907] 0.83284123 0.85940111 0.85776734 0.86002063 0.84948612 0.84842015\n [913] 0.85098107 0.85756825 0.84398054 0.84392263 0.84732395 0.85502103\n [919] 0.85269322 0.84568418 0.85357682 0.85988554 0.86523618 0.85736847\n [925] 0.85632240 0.85948271 0.85773876 0.86120122 0.86638495 0.85761273\n [931] 0.85646008 0.86505206 0.83732041 0.89465896 0.82124843 0.89473454\n [937] 0.84216516 0.89519471 0.88890183 0.84106104 0.88916095 0.88981388\n [943] 0.89167362 0.80321787 0.89245062 0.89258284 0.88964169 0.88662841\n [949] 0.84290505 0.88620774 0.88662831 0.87891425 0.86589491 0.89245260\n [955] 0.84332059 0.89309921 0.89289204 0.88837223 0.89001157 0.88520233\n [961] 0.83377073 0.82421766 0.84001726 0.83910920 0.83819573 0.78756523\n [967] 0.83484756 0.83704422 0.85926256 0.89747126 0.83612316 0.89806188\n [973] 0.86642260 0.89746929 0.89014701 0.85726387 0.88980804 0.89161831\n [979] 0.89708223 0.85723229 0.89693645 0.89801934 0.89165058 0.89205220\n [985] 0.86618979 0.88997287 0.89152300 0.88121501 0.88320147 0.89751694\n [991] 0.86634862 0.89752581 0.89860693 0.89099017 0.89782747 0.89184702\n [997] 0.85961682 0.85777650 0.86122268 0.86646544 0.85769519 0.85647113\n[1003] 0.86524104 0.86643678 0.89473457 0.84416912 0.89520888 0.89538743\n[1009] 0.89001534 0.89264873 0.88667278 0.89312374 0.84061700 0.89829167\n[1015] 0.86642458 0.89812779 0.89922426 0.89165227 0.89848053 0.89208457\n[1021] 0.89868135 0.86654088 0.89539606 0.89938408\n\n$IJ\n              I            J      Total\ncyl  0.12953142  0.563437342 0.69296876\ndisp 0.12238647  0.503213192 0.62559967\ndrat 0.03130215  0.170082597 0.20138474\nwt   0.07467278  0.359275997 0.43394878\nqsec 0.09906578  0.402514591 0.50158037\nvs   0.08053538  0.442333509 0.52286889\nam   0.01558583  0.043562484 0.05914831\ngear 0.01769881 -0.001897252 0.01580156\ncarb 0.11855511  0.443663630 0.56221874\nkml  0.10556266  0.476526480 0.58208914\n\n$I.perc\n     ind.exp.var\ncyl    16.295384\ndisp   15.396532\ndrat    3.937890\nwt      9.394027\nqsec   12.462728\nvs     10.131557\nam      1.960737\ngear    2.226556\ncarb   14.914536\nkml    13.280052\n\n$params\n$params$full.model\n[1] \"y ~ cyl + disp + drat + wt + qsec + vs + am + gear + carb + kml\"\n\n$params$family\n[1] \"gaussian\"\n\n$params$link\n[1] \"default\"\n\n$params$gof\n[1] \"Rsqu\"\n\n# alle Modelle miteinander vergleichen mit dredge Befehl: geht nur bis \n# maximal 15 Variablen\nmodel2 <- lm(hp ~ ., data = cars)\nlibrary(MuMIn)\noptions(na.action = \"na.fail\")\nallmodels <- dredge(model2)\nhead(allmodels)\n\nGlobal model call: lm(formula = hp ~ ., data = cars)\n---\nModel selection table \n    (Intrc)  carb   cyl   disp   drat   kml   qsec    vs     wt df   logLik\n523   53.17 23.58       0.5166                           -28.59  5 -145.394\n779   42.55 25.02       0.5653                     11.94 -31.67  6 -145.015\n527   38.82 22.53 4.368 0.4560                           -27.27  6 -145.126\n539   90.56 24.30       0.5030 -8.159                    -30.75  6 -145.162\n139  176.50 16.79       0.2999              -8.193               5 -146.709\n587   48.91 22.98       0.4979        1.462              -31.20  6 -145.254\n     AICc delta weight\n523 303.1  0.00  0.418\n779 305.4  2.29  0.133\n527 305.6  2.52  0.119\n539 305.7  2.59  0.115\n139 305.7  2.63  0.112\n587 305.9  2.77  0.104\nModels ranked by AICc(x) \n\n# Wichtigkeit der Prädiktoren\nMuMIn::importance(allmodels)\n\nfunction (x) \nUseMethod(\"sw\")\n<bytecode: 0x000001797b3b73c8>\n<environment: namespace:MuMIn>\n\n# mittleres Model\navgmodel<- MuMIn::model.avg(get.models(allmodels, subset=TRUE))\nsummary(avgmodel)\n\n\nCall:\nmodel.avg(object = get.models(allmodels, subset = TRUE))\n\nComponent model call: \nlm(formula = hp ~ <1024 unique rhs>, data = cars)\n\nComponent models: \n                     df  logLik   AICc delta weight\n2+4+10                5 -145.39 303.10  0.00   0.15\n2+4+9+10              6 -145.02 305.39  2.29   0.05\n2+3+4+10              6 -145.13 305.61  2.52   0.04\n2+4+5+10              6 -145.16 305.68  2.59   0.04\n2+4+8                 5 -146.71 305.73  2.63   0.04\n2+4+7+10              6 -145.25 305.87  2.77   0.04\n2+4+8+10              6 -145.33 306.02  2.92   0.04\n1+2+4+10              6 -145.38 306.12  3.03   0.03\n2+4+6+10              6 -145.39 306.14  3.04   0.03\n2+4+8+9               6 -145.60 306.56  3.46   0.03\n2+3+4+9+10            7 -144.25 307.17  4.08   0.02\n2+4+8+9+10            7 -144.54 307.75  4.65   0.01\n2+4+5+9+10            7 -144.68 308.03  4.93   0.01\n2+4+7+9+10            7 -144.87 308.41  5.31   0.01\n2+4+6+8               6 -146.53 308.43  5.33   0.01\n2+3+4+6+10            7 -144.96 308.60  5.50   0.01\n2+3+4+8               6 -146.63 308.63  5.53   0.01\n2+3+4+7+10            7 -144.98 308.63  5.53   0.01\n2+4                   4 -149.59 308.65  5.56   0.01\n2+4+6+9+10            7 -145.01 308.70  5.60   0.01\n1+2+4+9+10            7 -145.01 308.70  5.60   0.01\n2+4+5+7+10            7 -145.03 308.73  5.63   0.01\n2+4+5+8               6 -146.69 308.74  5.64   0.01\n2+4+7+8               6 -146.69 308.75  5.65   0.01\n1+2+4+8               6 -146.70 308.76  5.66   0.01\n2+3+4+5+10            7 -145.05 308.77  5.67   0.01\n2+4+5+6+10            7 -145.10 308.86  5.76   0.01\n2+4+5+8+10            7 -145.11 308.88  5.79   0.01\n2+3+4+8+10            7 -145.12 308.90  5.81   0.01\n1+2+3+4+10            7 -145.12 308.91  5.81   0.01\n2+3+4+8+9             7 -145.15 308.96  5.87   0.01\n1+2+4+5+10            7 -145.16 308.98  5.89   0.01\n2+4+7+8+10            7 -145.20 309.08  5.98   0.01\n2+4+6+7+10            7 -145.24 309.14  6.05   0.01\n1+2+4+7+10            7 -145.24 309.15  6.05   0.01\n2+3+4+6               6 -146.89 309.15  6.05   0.01\n1+2+4+8+10            7 -145.29 309.25  6.16   0.01\n1+2+4                 5 -148.48 309.27  6.18   0.01\n2+4+6+8+10            7 -145.33 309.32  6.22   0.01\n1+2+4+6+10            7 -145.36 309.40  6.30   0.01\n2+4+6                 5 -148.66 309.62  6.52   0.01\n2+4+5+8+9             7 -145.49 309.64  6.55   0.01\n2+4+6+8+9             7 -145.56 309.78  6.69   0.01\n2+4+7+8+9             7 -145.59 309.84  6.74   0.01\n1+2+4+8+9             7 -145.59 309.85  6.76   0.01\n2+3+4+8+9+10          8 -143.92 310.10  7.00   0.00\n1+2+3+4               6 -147.37 310.10  7.01   0.00\n2+3+4                 5 -148.91 310.12  7.03   0.00\n2+3+4+6+9+10          8 -143.99 310.24  7.15   0.00\n1+2+3+4+9+10          8 -144.06 310.37  7.28   0.00\n2+3+4+7+9+10          8 -144.10 310.46  7.36   0.00\n2+4+5+8+9+10          8 -144.18 310.62  7.52   0.00\n2+3+4+5+9+10          8 -144.21 310.68  7.59   0.00\n2+4+7                 5 -149.20 310.71  7.62   0.00\n2+3+4+6+8             7 -146.13 310.92  7.83   0.00\n2+4+7+8+9+10          8 -144.45 311.15  8.06   0.00\n1+2+4+8+9+10          8 -144.51 311.28  8.18   0.00\n2+4+6+8+9+10          8 -144.53 311.32  8.23   0.00\n2+4+5+7+9+10          8 -144.55 311.36  8.27   0.00\n2+4+5                 5 -149.53 311.38  8.28   0.00\n2+4+9                 5 -149.55 311.41  8.31   0.00\n2+4+5+6+8             7 -146.41 311.49  8.39   0.00\n1+2+4+5+9+10          8 -144.63 311.53  8.43   0.00\n2+4+5+6+9+10          8 -144.65 311.55  8.46   0.00\n2+3+4+6+8+9           8 -144.67 311.61  8.51   0.00\n2+3+4+6+9             7 -146.49 311.65  8.56   0.00\n1+2+4+6+8             7 -146.51 311.69  8.59   0.00\n2+4+6+7+8             7 -146.53 311.73  8.64   0.00\n1+2+3+4+9             7 -146.54 311.75  8.65   0.00\n2+3+4+6+7+10          8 -144.75 311.75  8.66   0.00\n1+2+3+4+8             7 -146.56 311.78  8.68   0.00\n2+3+4+7+8             7 -146.62 311.90  8.80   0.00\n2+3+4+5+8             7 -146.63 311.93  8.84   0.00\n2+3+4+5+6+10          8 -144.85 311.96  8.87   0.00\n1+2+3+4+6             7 -146.65 311.97  8.88   0.00\n1+2+4+5+8             7 -146.66 311.98  8.88   0.00\n2+4+5+7+8             7 -146.67 312.00  8.90   0.00\n1+2+4+6               6 -148.32 312.00  8.90   0.00\n2+4+6+7+9+10          8 -144.87 312.00  8.91   0.00\n1+2+4+7+9+10          8 -144.87 312.00  8.91   0.00\n1+2+4+7+8             7 -146.68 312.03  8.94   0.00\n1+2+4+7               6 -148.34 312.04  8.94   0.00\n1+2+3+4+8+9           8 -144.90 312.06  8.97   0.00\n2+3+4+5+7+10          8 -144.91 312.09  8.99   0.00\n2+4+5+6+7+10          8 -144.93 312.12  9.03   0.00\n1+2+4+5               6 -148.40 312.16  9.07   0.00\n1+2+3+4+6+10          8 -144.96 312.18  9.08   0.00\n2+3+4+6+8+10          8 -144.96 312.19  9.09   0.00\n1+2+3+4+7+10          8 -144.98 312.21  9.12   0.00\n2+3+4+7+8+10          8 -144.98 312.22  9.12   0.00\n2+4+5+7+8+10          8 -144.99 312.24  9.15   0.00\n1+2+4+9               6 -148.46 312.27  9.18   0.00\n1+2+4+6+9+10          8 -145.01 312.29  9.19   0.00\n1+2+4+5+7+10          8 -145.03 312.32  9.22   0.00\n1+2+3+4+5+10          8 -145.03 312.32  9.23   0.00\n2+3+4+5+8+10          8 -145.04 312.33  9.24   0.00\n2+4+5+6+8+10          8 -145.05 312.35  9.26   0.00\n2+3+4+5+6             7 -146.88 312.44  9.34   0.00\n1+2+4+5+6+10          8 -145.09 312.45  9.35   0.00\n2+3+4+6+7             7 -146.89 312.45  9.36   0.00\n2+4+6+7               6 -148.56 312.47  9.38   0.00\n1+2+4+5+8+10          8 -145.11 312.48  9.38   0.00\n2+3+4+5               6 -148.56 312.49  9.39   0.00\n1+2+3+4+8+10          8 -145.12 312.49  9.40   0.00\n2+3+4+7+8+9           8 -145.13 312.53  9.43   0.00\n2+3+4+5+8+9           8 -145.15 312.56  9.46   0.00\n2+4+5+6               6 -148.60 312.56  9.46   0.00\n2+3+4+7               6 -148.60 312.56  9.46   0.00\n1+2+4+7+8+10          8 -145.17 312.60  9.50   0.00\n2+4+6+9               6 -148.63 312.63  9.53   0.00\n2+4+6+7+8+10          8 -145.19 312.64  9.55   0.00\n1+2+4+6+7+10          8 -145.19 312.65  9.55   0.00\n1+2+4+6+8+10          8 -145.26 312.78  9.69   0.00\n2+4+5+6+8+9           8 -145.36 312.98  9.88   0.00\n2+3+4+9               6 -148.86 313.09  9.99   0.00\n1+2+4+5+8+9           8 -145.43 313.13 10.03   0.00\n2+4+5+7+8+9           8 -145.46 313.19 10.09   0.00\n1+2+3+4+7             7 -147.31 313.29 10.20   0.00\n2+4+6+7+8+9           8 -145.55 313.37 10.27   0.00\n1+2+4+6+8+9           8 -145.56 313.37 10.28   0.00\n1+2+3+4+5             7 -147.37 313.40 10.30   0.00\n1+2+4+7+8+9           8 -145.58 313.42 10.33   0.00\n2+3+4+6+7+9+10        9 -143.74 313.65 10.56   0.00\n2+3+4+6+8+9+10        9 -143.76 313.69 10.60   0.00\n2+3                   4 -152.12 313.71 10.62   0.00\n2+4+5+7               6 -149.19 313.74 10.64   0.00\n2+4+7+9               6 -149.20 313.75 10.66   0.00\n2+3+4+7+8+9+10        9 -143.81 313.80 10.70   0.00\n2+3+4+5+8+9+10        9 -143.85 313.88 10.78   0.00\n1+2+3+4+8+9+10        9 -143.85 313.88 10.78   0.00\n1+2+3+4+6+9           8 -145.83 313.92 10.83   0.00\n2+3+4+5+6+9+10        9 -143.91 314.00 10.90   0.00\n1+2+3+4+7+9+10        9 -143.91 314.00 10.91   0.00\n1+2+3+4+6+9+10        9 -143.92 314.02 10.92   0.00\n3+6+7                 5 -150.88 314.06 10.96   0.00\n1+2+3+4+5+9+10        9 -143.96 314.11 11.01   0.00\n3+4+6                 5 -150.95 314.20 11.11   0.00\n2+3+4+5+7+9+10        9 -144.06 314.31 11.21   0.00\n2+4+5+9               6 -149.50 314.36 11.26   0.00\n2+4+5+7+8+9+10        9 -144.10 314.37 11.28   0.00\n2+3+4+5+6+8           8 -146.11 314.48 11.38   0.00\n2+3+4+6+7+8           8 -146.12 314.50 11.40   0.00\n2+4+5+6+8+9+10        9 -144.17 314.51 11.42   0.00\n1+2+3+4+6+8           8 -146.13 314.51 11.42   0.00\n1+2+4+5+8+9+10        9 -144.18 314.54 11.44   0.00\n2+3+6+7               6 -149.63 314.63 11.53   0.00\n2+3+8                 5 -151.22 314.75 11.66   0.00\n2+3+7+8               6 -149.78 314.92 11.82   0.00\n3+4+6+7               6 -149.78 314.92 11.82   0.00\n2+3+6                 5 -151.34 314.99 11.89   0.00\n1+2+4+5+6             7 -148.16 314.99 11.90   0.00\n1+2+4+7+8+9+10        9 -144.41 315.01 11.91   0.00\n2+4+6+7+8+9+10        9 -144.44 315.07 11.97   0.00\n1+2+4+5+6+8           8 -146.41 315.07 11.98   0.00\n2+4+5+6+7+8           8 -146.41 315.08 11.99   0.00\n1+2+4+6+7             7 -148.24 315.14 12.04   0.00\n1+2+4+5+7             7 -148.24 315.14 12.05   0.00\n2+4+5+6+7+9+10        9 -144.49 315.16 12.07   0.00\n2+3+4+5+6+9           8 -146.46 315.19 12.09   0.00\n1+2+4+6+8+9+10        9 -144.51 315.20 12.10   0.00\n1+2+4+5+7+9+10        9 -144.51 315.20 12.10   0.00\n1+2+3+4+7+9           8 -146.47 315.20 12.11   0.00\n2+3+4+6+7+9           8 -146.49 315.25 12.15   0.00\n1+2+4+7+9             7 -148.30 315.26 12.17   0.00\n1+2+4+6+7+8           8 -146.51 315.28 12.19   0.00\n1+2+4+6+9             7 -148.31 315.29 12.20   0.00\n1+2+3+4+5+9           8 -146.54 315.33 12.24   0.00\n1+2+3+4+7+8           8 -146.54 315.35 12.25   0.00\n1+2+3+4+5+8           8 -146.55 315.36 12.27   0.00\n1+2+4+5+9             7 -148.36 315.38 12.28   0.00\n1+2+3+4+6+8+9         9 -144.61 315.39 12.30   0.00\n2+3+4+5+7             7 -148.38 315.42 12.32   0.00\n1+2+4+5+6+9+10        9 -144.62 315.43 12.33   0.00\n2+3+7                 5 -151.57 315.44 12.35   0.00\n2+3+4+5+6+7+10        9 -144.63 315.45 12.36   0.00\n2+3+4+5+6+8+9         9 -144.65 315.49 12.39   0.00\n2+3+4+5+7+8           8 -146.62 315.49 12.40   0.00\n2+3+4+6+7+8+9         9 -144.67 315.51 12.42   0.00\n1+2+4+5+7+8           8 -146.64 315.53 12.44   0.00\n1+2+3+4+5+6           8 -146.65 315.56 12.47   0.00\n2+3+4+5+9             7 -148.45 315.56 12.47   0.00\n1+2+3+4+6+7           8 -146.65 315.56 12.47   0.00\n1+2+3+4+6+7+10        9 -144.73 315.63 12.54   0.00\n2+4+5+6+7             7 -148.50 315.66 12.56   0.00\n2+3+4+6+7+8+10        9 -144.74 315.66 12.57   0.00\n2+3+4+7+9             7 -148.51 315.69 12.60   0.00\n2+4+6+7+9             7 -148.55 315.76 12.67   0.00\n1+2+3                 5 -151.73 315.77 12.68   0.00\n2+4+5+6+9             7 -148.58 315.83 12.73   0.00\n1+2+3+4+5+6+10        9 -144.85 315.88 12.79   0.00\n2+3+4+5+6+8+10        9 -144.85 315.88 12.79   0.00\n1+2+4+6+7+9+10        9 -144.87 315.92 12.82   0.00\n1+2+3+4+5+8+9         9 -144.88 315.95 12.85   0.00\n3+6+7+8               6 -150.30 315.96 12.87   0.00\n1+2+3+4+7+8+9         9 -144.89 315.97 12.88   0.00\n2+4+5+6+7+8+10        9 -144.90 315.98 12.88   0.00\n1+2+3+4+5+7+10        9 -144.90 315.98 12.88   0.00\n2+3+4+5+7+8+10        9 -144.91 316.00 12.90   0.00\n1+2+4+5+6+7+10        9 -144.92 316.03 12.93   0.00\n2+3+4+5+6+7           8 -146.88 316.03 12.93   0.00\n1+2+3+4+6+8+10        9 -144.96 316.09 13.00   0.00\n2+3+8+10              6 -150.38 316.12 13.02   0.00\n1+2+3+4+7+8+10        9 -144.98 316.13 13.04   0.00\n1+2+4+5+7+8+10        9 -144.99 316.16 13.07   0.00\n1+2+3+4+5+8+10        9 -145.03 316.24 13.14   0.00\n1+2+4+5+6+8+10        9 -145.03 316.24 13.14   0.00\n3+4+6+8               6 -150.45 316.26 13.17   0.00\n2+3+7+8+9             7 -148.83 316.33 13.24   0.00\n1+2+4+6+7+8+10        9 -145.10 316.39 13.30   0.00\n2+3+8+9               6 -150.52 316.40 13.30   0.00\n2+3+9                 5 -152.07 316.44 13.34   0.00\n2+3+4+5+7+8+9         9 -145.13 316.45 13.35   0.00\n2+3+5                 5 -152.07 316.45 13.35   0.00\n2+3+10                5 -152.12 316.54 13.44   0.00\n1+2+3+7               6 -150.60 316.55 13.45   0.00\n3+6+7+9               6 -150.67 316.70 13.60   0.00\n3+4+6+9               6 -150.68 316.72 13.62   0.00\n2+3+6+7+8             7 -149.07 316.80 13.71   0.00\n3+4+6+7+8             7 -149.09 316.84 13.74   0.00\n1+2+3+4+5+7           8 -147.31 316.88 13.79   0.00\n1+2+4+5+6+8+9         9 -145.35 316.89 13.79   0.00\n2+4+5+6+7+8+9         9 -145.35 316.89 13.79   0.00\n1+2+4+5+7+8+9         9 -145.41 317.01 13.91   0.00\n2+4+5+7+9             7 -149.18 317.03 13.93   0.00\n3+5+6+7               6 -150.84 317.03 13.94   0.00\n1+3+6+7               6 -150.84 317.04 13.95   0.00\n3+6+7+10              6 -150.88 317.11 14.02   0.00\n2+8+10                5 -152.41 317.13 14.03   0.00\n3+4+5+6               6 -150.89 317.15 14.05   0.00\n3+4+6+10              6 -150.92 317.19 14.10   0.00\n1+3+4+6               6 -150.92 317.20 14.10   0.00\n2+3+8+9+10            7 -149.30 317.26 14.16   0.00\n2+3+6+10              6 -150.96 317.28 14.18   0.00\n1+2+4+6+7+8+9         9 -145.55 317.29 14.19   0.00\n2+3+7+10              6 -151.02 317.40 14.31   0.00\n2+3+6+7+9             7 -149.39 317.44 14.34   0.00\n2+3+6+8               6 -151.06 317.47 14.38   0.00\n2+3+6+9               6 -151.11 317.57 14.48   0.00\n3+6+7+8+9             7 -149.46 317.58 14.49   0.00\n2+3+4+6+7+8+9+10     10 -143.57 317.61 14.51   0.00\n3+4+6+7+9             7 -149.51 317.70 14.60   0.00\n3+4+6+8+9             7 -149.52 317.70 14.60   0.00\n3+6+8+10              6 -151.17 317.70 14.60   0.00\n2+3+5+8               6 -151.18 317.72 14.62   0.00\n3+4+6+7+10            7 -149.56 317.78 14.68   0.00\n2+3+4+5+6+8+9+10     10 -143.65 317.78 14.68   0.00\n1+2+3+8               6 -151.22 317.79 14.70   0.00\n2+3+4+5+6+7+9+10     10 -143.66 317.79 14.70   0.00\n1+2+3+6+7             7 -149.56 317.79 14.70   0.00\n2+3+6+7+10            7 -149.58 317.82 14.72   0.00\n1+2+3+4+5+6+9         9 -145.83 317.84 14.74   0.00\n1+2+3+4+6+7+9         9 -145.83 317.84 14.75   0.00\n1+2+3+4+6+7+9+10     10 -143.69 317.85 14.76   0.00\n3+6+10                5 -152.78 317.87 14.77   0.00\n2+3+5+6+7             7 -149.63 317.93 14.83   0.00\n1+2+3+4+7+8+9+10     10 -143.74 317.95 14.85   0.00\n1+2+3+4+6+8+9+10     10 -143.74 317.95 14.85   0.00\n1+2+3+4+5+8+9+10     10 -143.74 317.96 14.87   0.00\n2+3+4+5+7+8+9+10     10 -143.74 317.97 14.87   0.00\n2+3+5+6               6 -151.32 318.00 14.90   0.00\n1+2+3+6               6 -151.33 318.03 14.93   0.00\n4+6+7+8               6 -151.35 318.05 14.96   0.00\n1+3+4+6+7             7 -149.70 318.06 14.96   0.00\n3+4+5+6+7             7 -149.70 318.06 14.97   0.00\n2+3+5+7               6 -151.36 318.07 14.98   0.00\n1+2+3+4+5+6+9+10     10 -143.80 318.09 14.99   0.00\n1+2+3+4+5+7+9+10     10 -143.83 318.13 15.04   0.00\n2+3+7+8+10            7 -149.75 318.17 15.08   0.00\n1+2+3+9               6 -151.41 318.18 15.08   0.00\n1+2+3+7+8             7 -149.76 318.19 15.09   0.00\n2+3+5+7+8             7 -149.78 318.22 15.13   0.00\n4+6+8                 5 -152.98 318.28 15.18   0.00\n3+4+6+7+8+9           8 -148.01 318.29 15.19   0.00\n2+7+8                 5 -152.99 318.29 15.19   0.00\n1+2+3+10              6 -151.48 318.32 15.22   0.00\n3+6                   4 -154.45 318.38 15.29   0.00\n2+3+4+5+6+7+8         9 -146.10 318.38 15.29   0.00\n1+2+3+4+5+6+8         9 -146.10 318.39 15.30   0.00\n1+2+4+5+6+7           8 -148.07 318.41 15.31   0.00\n1+2+3+4+6+7+8         9 -146.12 318.42 15.32   0.00\n2+3+7+9               6 -151.55 318.45 15.36   0.00\n2+3+6+8+10            7 -149.91 318.48 15.38   0.00\n2+3+6+7+8+9           8 -148.14 318.54 15.45   0.00\n1+2+4+5+6+9           8 -148.15 318.55 15.46   0.00\n1+2+4+5+7+9           8 -148.17 318.60 15.50   0.00\n2+4+5+6+7+8+9+10     10 -144.07 318.61 15.51   0.00\n1+2+4+5+7+8+9+10     10 -144.09 318.66 15.57   0.00\n3+4+6+8+10            7 -150.00 318.67 15.58   0.00\n1+2+4+6+7+9           8 -148.22 318.70 15.61   0.00\n2+3+4+5+7+9           8 -148.23 318.72 15.62   0.00\n3+6+7+8+10            7 -150.04 318.74 15.64   0.00\n3+6+8+9+10            7 -150.04 318.75 15.66   0.00\n2+7+8+10              6 -151.71 318.78 15.69   0.00\n1+2+4+5+6+8+9+10     10 -144.17 318.81 15.71   0.00\n1+2+3+5               6 -151.73 318.82 15.72   0.00\n8+10                  4 -154.69 318.86 15.76   0.00\n1+2+4+5+6+7+8         9 -146.41 318.99 15.90   0.00\n1+2+3+7+9             7 -150.18 319.02 15.92   0.00\n2+5+7+8               6 -151.84 319.03 15.94   0.00\n4+6+8+10              6 -151.85 319.05 15.96   0.00\n2+3+4+5+6+7+9         9 -146.46 319.11 16.01   0.00\n1+2+3+4+5+7+9         9 -146.47 319.12 16.02   0.00\n1+3+6+7+8             7 -150.23 319.13 16.04   0.00\n2+5+8+10              6 -151.93 319.22 16.12   0.00\n1+2+7+8               6 -151.93 319.23 16.13   0.00\n2+4+5+6+7+9           8 -148.49 319.24 16.14   0.00\n1+2+3+4+5+7+8         9 -146.54 319.25 16.16   0.00\n3+5+6+7+8             7 -150.30 319.27 16.17   0.00\n1+2+4+6+7+8+9+10     10 -144.41 319.29 16.20   0.00\n2+3+5+9               6 -151.99 319.35 16.25   0.00\n1+2+3+8+10            7 -150.35 319.38 16.28   0.00\n2+3+5+8+10            7 -150.38 319.42 16.32   0.00\n2+3+6+8+9             7 -150.38 319.43 16.34   0.00\n1+2+4+5+6+7+9+10     10 -144.48 319.44 16.34   0.00\n1+3+4+6+8             7 -150.39 319.45 16.35   0.00\n2+3+5+10              6 -152.06 319.47 16.38   0.00\n1+2+3+4+5+6+7         9 -146.65 319.48 16.39   0.00\n2+3+9+10              6 -152.06 319.49 16.39   0.00\n1+2+8+10              6 -152.07 319.50 16.40   0.00\n3+4+5+6+8             7 -150.45 319.57 16.47   0.00\n2+3+5+8+9             7 -150.47 319.60 16.50   0.00\n1+2+3+4+5+6+8+9      10 -144.57 319.61 16.52   0.00\n1+2+3+4+6+7+8+9      10 -144.60 319.67 16.58   0.00\n1+3+4+6+9             7 -150.51 319.69 16.60   0.00\n1+3+6+7+9             7 -150.52 319.70 16.60   0.00\n1+2+3+8+9             7 -150.52 319.70 16.61   0.00\n2+3+7+8+9+10          8 -148.73 319.71 16.62   0.00\n2+8+9+10              6 -152.18 319.72 16.63   0.00\n1+2+3+7+10            7 -150.53 319.73 16.63   0.00\n1+2+3+4+5+6+7+10     10 -144.63 319.73 16.64   0.00\n2+3+4+5+6+7+8+10     10 -144.63 319.74 16.65   0.00\n1+2+3+7+8+9           8 -148.75 319.76 16.66   0.00\n4+7+8                 5 -153.73 319.76 16.67   0.00\n2+3+4+5+6+7+8+9      10 -144.65 319.77 16.67   0.00\n1+2+3+5+7             7 -150.59 319.84 16.75   0.00\n3+4+5+6+9             7 -150.59 319.84 16.75   0.00\n3+5+6+7+9             7 -150.60 319.87 16.78   0.00\n2+3+6+8+9+10          8 -148.81 319.87 16.78   0.00\n3+4+6+8+9+10          8 -148.83 319.92 16.83   0.00\n2+3+5+7+8+9           8 -148.83 319.93 16.83   0.00\n1+2+3+4+6+7+8+10     10 -144.73 319.93 16.83   0.00\n4+8                   4 -155.23 319.93 16.84   0.00\n3+6+7+9+10            7 -150.67 320.00 16.90   0.00\n3+4+6+9+10            7 -150.67 320.00 16.91   0.00\n3+7+8                 5 -153.85 320.02 16.92   0.00\n2+6+8+10              6 -152.35 320.06 16.97   0.00\n4+8+10                5 -153.91 320.13 17.03   0.00\n1+4+6+8               6 -152.38 320.13 17.03   0.00\n1+2+3+4+5+6+8+10     10 -144.85 320.17 17.08   0.00\n1+2+4+5+6+7+8+10     10 -144.87 320.21 17.12   0.00\n1+2+3+4+5+7+8+9      10 -144.87 320.22 17.13   0.00\n2+3+6+9+10            7 -150.78 320.23 17.13   0.00\n3+6+7+8+9+10          8 -148.99 320.23 17.14   0.00\n1+2+3+4+5+7+8+10     10 -144.90 320.27 17.18   0.00\n3+8+10                5 -153.99 320.29 17.19   0.00\n2+3+6+7+8+10          8 -149.02 320.30 17.20   0.00\n1+3+5+6+7             7 -150.82 320.30 17.20   0.00\n1+2+3+6+10            7 -150.82 320.31 17.22   0.00\n1+3+6+7+10            7 -150.83 320.33 17.23   0.00\n3+5+6+7+10            7 -150.83 320.33 17.24   0.00\n7+8+10                5 -154.02 320.34 17.24   0.00\n1+2+3+6+7+8           8 -149.04 320.34 17.24   0.00\n1+3+4+6+10            7 -150.84 320.35 17.26   0.00\n3+4+5+6+10            7 -150.84 320.35 17.26   0.00\n2+3+5+6+7+8           8 -149.05 320.36 17.26   0.00\n1+3+4+6+7+8           8 -149.05 320.36 17.27   0.00\n3+4+5+6+7+8           8 -149.08 320.42 17.32   0.00\n6+8+10                5 -154.06 320.42 17.33   0.00\n1+3+4+5+6             7 -150.88 320.43 17.33   0.00\n1+4+6+7+8             7 -150.88 320.43 17.34   0.00\n3+4+6+7+8+10          8 -149.09 320.43 17.34   0.00\n2+3+7+9+10            7 -150.93 320.52 17.42   0.00\n1+3+6+10              6 -152.58 320.53 17.43   0.00\n1+2+3+6+7+9           8 -149.14 320.55 17.45   0.00\n2+3+5+6+10            7 -150.96 320.58 17.48   0.00\n1+2+3+8+9+10          8 -149.16 320.58 17.49   0.00\n2+3+5+7+10            7 -150.97 320.60 17.51   0.00\n2+3+5+6+8             7 -150.97 320.61 17.51   0.00\n3+4+6+7+9+10          8 -149.19 320.64 17.55   0.00\n1+2+3+6+8             7 -150.99 320.65 17.56   0.00\n2+6+7+8               6 -152.67 320.70 17.61   0.00\n1+2+3+6+9             7 -151.03 320.72 17.62   0.00\n1+3+4+6+7+9           8 -149.23 320.73 17.63   0.00\n3+6+9+10              6 -152.69 320.74 17.64   0.00\n3+5+6+10              6 -152.69 320.74 17.65   0.00\n8+9+10                5 -154.23 320.76 17.67   0.00\n2+3+6+7+9+10          8 -149.29 320.84 17.74   0.00\n3+6+8                 5 -154.27 320.84 17.75   0.00\n2+3+5+8+9+10          8 -149.30 320.85 17.76   0.00\n2+3+5+6+9             7 -151.10 320.86 17.77   0.00\n4+5+6+8               6 -152.76 320.87 17.78   0.00\n4+6+7+8+9             7 -151.10 320.88 17.78   0.00\n3+6+9                 5 -154.29 320.88 17.78   0.00\n1+2+3+9+10            7 -151.11 320.90 17.80   0.00\n7+8                   4 -155.72 320.92 17.82   0.00\n1+3+6+8+10            7 -151.16 320.98 17.88   0.00\n3+5+6+8+10            7 -151.16 321.00 17.90   0.00\n4+5+6+7+8             7 -151.17 321.00 17.91   0.00\n2+3+5+6+7+9           8 -149.37 321.01 17.91   0.00\n4+6+8+9               6 -152.83 321.01 17.92   0.00\n4+6+7+8+10            7 -151.17 321.02 17.92   0.00\n1+2+3+5+8             7 -151.18 321.02 17.92   0.00\n3+4+5+6+7+9           8 -149.39 321.04 17.95   0.00\n3+8+9+10              6 -152.87 321.10 18.00   0.00\n1+3+6+7+8+9           8 -149.45 321.15 18.06   0.00\n1+3+6                 5 -154.43 321.17 18.07   0.00\n1+2+4+5+6+7+8+9      10 -145.35 321.17 18.07   0.00\n3+5+6+7+8+9           8 -149.46 321.18 18.08   0.00\n3+5+6                 5 -154.45 321.21 18.11   0.00\n2+5+7+8+10            7 -151.28 321.22 18.13   0.00\n1+2+3+5+6             7 -151.30 321.27 18.18   0.00\n1+3+4+6+8+9           8 -149.51 321.28 18.18   0.00\n2+3+5+7+9             7 -151.31 321.28 18.18   0.00\n3+4+5+6+8+9           8 -149.51 321.28 18.19   0.00\n3+4+5+6+7+10          8 -149.52 321.30 18.20   0.00\n2+7+8+9               6 -152.99 321.34 18.24   0.00\n1+2+3+6+7+10          8 -149.54 321.35 18.25   0.00\n1+3+4+6+7+10          8 -149.55 321.35 18.26   0.00\n1+2+3+5+6+7           8 -149.56 321.39 18.29   0.00\n2+3+5+6+7+10          8 -149.58 321.41 18.32   0.00\n1+2+7+8+10            7 -151.40 321.46 18.36   0.00\n3+7+8+9               6 -153.06 321.47 18.38   0.00\n1+2+3+5+9             7 -151.40 321.47 18.38   0.00\n4+6+8+9+10            7 -151.42 321.51 18.42   0.00\n1+3+4+5+6+7           8 -149.65 321.56 18.46   0.00\n1+2+3+5+10            7 -151.48 321.62 18.52   0.00\n2+7+8+9+10            7 -151.50 321.67 18.57   0.00\n1+8+10                5 -154.69 321.68 18.58   0.00\n5+8+10                5 -154.69 321.68 18.59   0.00\n4+8+9+10              6 -153.16 321.68 18.59   0.00\n6+7+8+10              6 -153.17 321.70 18.60   0.00\n1+2+5+7+8             7 -151.52 321.71 18.61   0.00\n1+2+3+7+8+10          8 -149.73 321.72 18.62   0.00\n2+3+5+7+8+10          8 -149.75 321.77 18.67   0.00\n1+2+3+5+7+8           8 -149.76 321.78 18.68   0.00\n1+4+6+8+10            7 -151.56 321.79 18.70   0.00\n3+4+8                 5 -154.75 321.81 18.72   0.00\n2+5+8+9+10            7 -151.58 321.83 18.74   0.00\n4+7+8+9               6 -153.24 321.84 18.74   0.00\n4+8+9                 5 -154.86 322.03 18.94   0.00\n2+3+5+6+8+10          8 -149.89 322.04 18.95   0.00\n1+2+3+6+8+10          8 -149.90 322.06 18.96   0.00\n2+6+7+8+10            7 -151.70 322.07 18.98   0.00\n3+7+8+10              6 -153.37 322.09 19.00   0.00\n3+4+7+8               6 -153.38 322.13 19.03   0.00\n1+2+3+4+5+6+7+9      10 -145.83 322.13 19.04   0.00\n2+3+4+5+6+7+8+9+10   11 -143.47 322.14 19.04   0.00\n4+5+6+8+10            7 -151.74 322.14 19.05   0.00\n2+3+6+7+8+9+10        9 -147.98 322.14 19.05   0.00\n3+4+6+7+8+9+10        9 -147.99 322.16 19.06   0.00\n2+5+7+8+9             7 -151.75 322.16 19.06   0.00\n3+4+5+6+7+8+9         9 -148.01 322.19 19.10   0.00\n4+7+8+10              6 -153.42 322.20 19.11   0.00\n1+3+4+6+7+8+9         9 -148.01 322.21 19.11   0.00\n1+3+4+6+8+10          8 -149.98 322.23 19.13   0.00\n3+4+5+6+8+10          8 -149.99 322.25 19.15   0.00\n1+2+4+5+6+7+9         9 -148.04 322.26 19.17   0.00\n1+3+6+7+8+10          8 -150.01 322.27 19.18   0.00\n1+2+5+8+10            7 -151.81 322.29 19.19   0.00\n1+2+3+4+6+7+8+9+10   11 -143.55 322.31 19.21   0.00\n1+3+6+8+9+10          8 -150.03 322.32 19.23   0.00\n3+5+6+7+8+10          8 -150.03 322.33 19.23   0.00\n1+2+8+9+10            7 -151.83 322.33 19.24   0.00\n3+5+6+8+9+10          8 -150.04 322.33 19.24   0.00\n2+5+6+7+8             7 -151.83 322.34 19.24   0.00\n1+2+3+4+5+6+7+9+10   11 -143.59 322.37 19.28   0.00\n2+3+5+6+7+8+9         9 -148.12 322.42 19.32   0.00\n1+2+3+4+5+6+8+9+10   11 -143.62 322.43 19.34   0.00\n1+2+3+6+7+8+9         9 -148.14 322.46 19.37   0.00\n1+2+7+8+9             7 -151.90 322.47 19.37   0.00\n1+2+3+4+5+7+8+9+10   11 -143.64 322.48 19.39   0.00\n1+2+3+7+9+10          8 -150.12 322.50 19.40   0.00\n3+5+7+8               6 -153.57 322.50 19.40   0.00\n7+8+9+10              6 -153.58 322.52 19.42   0.00\n1+2+6+7+8             7 -151.93 322.52 19.42   0.00\n2+5+6+8+10            7 -151.93 322.52 19.43   0.00\n1+2+3+5+7+9           8 -150.17 322.59 19.50   0.00\n2+3+5+9+10            7 -151.99 322.65 19.55   0.00\n1+3+7+8               6 -153.65 322.67 19.57   0.00\n4+5+7+8               6 -153.65 322.67 19.57   0.00\n1+2+3+4+5+6+7+8      10 -146.10 322.67 19.58   0.00\n4+5+8                 5 -155.18 322.68 19.58   0.00\n1+6+8+10              6 -153.68 322.71 19.62   0.00\n1+3+5+6+7+8           8 -150.23 322.72 19.62   0.00\n3+5+8+10              6 -153.69 322.74 19.64   0.00\n1+4+8                 5 -155.22 322.75 19.65   0.00\n1+4+7+8               6 -153.69 322.75 19.65   0.00\n3+4+8+10              6 -153.70 322.76 19.66   0.00\n1+3+8+10              6 -153.70 322.77 19.67   0.00\n1+2+6+8+10            7 -152.06 322.79 19.70   0.00\n2+6+8+9+10            7 -152.07 322.80 19.70   0.00\n2+3+5+6+8+9           8 -150.29 322.84 19.75   0.00\n6+8+9+10              6 -153.80 322.96 19.86   0.00\n4+5+8+10              6 -153.80 322.96 19.87   0.00\n1+2+3+5+8+10          8 -150.35 322.96 19.87   0.00\n3+6+8+9               6 -153.81 322.98 19.89   0.00\n5+6+8+10              6 -153.82 323.00 19.90   0.00\n1+2+3+6+8+9           8 -150.37 323.00 19.90   0.00\n1+4+8+10              6 -153.82 323.00 19.91   0.00\n1+3+4+5+6+8           8 -150.38 323.02 19.93   0.00\n4+6                   4 -156.81 323.11 20.01   0.00\n1+3+4+6+9+10          8 -150.43 323.12 20.03   0.00\n1+7+8                 5 -155.41 323.14 20.04   0.00\n1+4+6+8+9             7 -152.25 323.18 20.08   0.00\n1+2+3+5+8+9           8 -150.46 323.18 20.08   0.00\n1+2+3+6+9+10          8 -150.46 323.19 20.09   0.00\n6+7+8                 5 -155.44 323.19 20.09   0.00\n1+3+4+5+6+9           8 -150.47 323.20 20.10   0.00\n1+3+5+6+7+9           8 -150.49 323.24 20.14   0.00\n3+4+8+9               6 -153.94 323.25 20.15   0.00\n1+3+6+7+9+10          8 -150.50 323.26 20.17   0.00\n1+4+5+6+8             7 -152.30 323.26 20.17   0.00\n1+3+8+9+10            7 -152.30 323.27 20.18   0.00\n3+7+8+9+10            7 -152.31 323.28 20.18   0.00\n1+3+6+9+10            7 -152.33 323.32 20.22   0.00\n1+2+3+5+7+10          8 -150.53 323.32 20.22   0.00\n1+2+4+5+6+7+8+9+10   11 -144.06 323.33 20.23   0.00\n1+2+3+7+8+9+10        9 -148.59 323.36 20.27   0.00\n5+7+8                 5 -155.53 323.38 20.28   0.00\n5+7+8+10              6 -154.01 323.39 20.29   0.00\n3+4+5+6+9+10          8 -150.56 323.39 20.29   0.00\n1+7+8+10              6 -154.02 323.39 20.29   0.00\n1+3+7                 5 -155.55 323.41 20.32   0.00\n4+6+7                 5 -155.56 323.44 20.34   0.00\n3+5+6+7+9+10          8 -150.60 323.47 20.37   0.00\n1+3+6+8               6 -154.06 323.47 20.38   0.00\n3+8                   4 -157.03 323.55 20.45   0.00\n3+4+7+8+9             7 -152.46 323.59 20.49   0.00\n1+6+7+8               6 -154.12 323.60 20.50   0.00\n1+4+6+7+8+9           8 -150.67 323.61 20.51   0.00\n2+3+5+7+8+9+10        9 -148.73 323.63 20.54   0.00\n1+2+3+5+7+8+9         9 -148.74 323.66 20.57   0.00\n7+8+9                 5 -155.70 323.72 20.62   0.00\n1+3+5+6+10            7 -152.54 323.75 20.65   0.00\n1+2+3+6+8+9+10        9 -148.79 323.76 20.66   0.00\n3+5+8+9+10            7 -152.55 323.77 20.67   0.00\n2+3+5+6+8+9+10        9 -148.80 323.77 20.68   0.00\n4+5+6+8+9             7 -152.55 323.78 20.68   0.00\n5+8+9+10              6 -154.21 323.78 20.69   0.00\n3+4+8+9+10            7 -152.56 323.79 20.69   0.00\n1+8+9+10              6 -154.22 323.81 20.71   0.00\n2+3+5+6+9+10          8 -150.78 323.81 20.72   0.00\n3+4+5+6+8+9+10        9 -148.82 323.82 20.72   0.00\n1+2+8                 5 -155.75 323.82 20.72   0.00\n3+5+6+9+10            7 -152.58 323.82 20.73   0.00\n1+3+4+6+8+9+10        9 -148.82 323.83 20.73   0.00\n1+3+4+5+6+10          8 -150.80 323.85 20.76   0.00\n1+3+5+6+7+10          8 -150.80 323.87 20.77   0.00\n3+5+6+8               6 -154.26 323.87 20.78   0.00\n1+4+5+6+7+8           8 -150.81 323.89 20.79   0.00\n4+6+7+8+9+10          8 -150.82 323.89 20.80   0.00\n1+4+6+7+8+10          8 -150.82 323.89 20.80   0.00\n1+2+3+5+6+10          8 -150.82 323.90 20.81   0.00\n3+5+6+9               6 -154.28 323.93 20.83   0.00\n1+3+6+9               6 -154.29 323.93 20.84   0.00\n2+6+7+8+9             7 -152.64 323.95 20.86   0.00\n2+3+5+7+9+10          8 -150.85 323.97 20.87   0.00\n2+5+8                 5 -155.84 324.00 20.90   0.00\n4+5+6+7+8+9           8 -150.88 324.02 20.92   0.00\n1+2+5+8               6 -154.34 324.05 20.95   0.00\n1+3+7+8+9             7 -152.69 324.05 20.96   0.00\n1+6+7+8+10            7 -152.70 324.06 20.96   0.00\n4+6+9                 5 -155.90 324.11 21.01   0.00\n1+2+3+5+6+8           8 -150.93 324.12 21.02   0.00\n4+7+8+9+10            7 -152.73 324.13 21.04   0.00\n3+5+6+7+8+9+10        9 -148.98 324.14 21.05   0.00\n1+3+6+7+8+9+10        9 -148.98 324.15 21.06   0.00\n3+4+5+8               6 -154.40 324.15 21.06   0.00\n2+5+7+8+9+10          8 -150.96 324.18 21.08   0.00\n1+2+3+6+7+8+10        9 -149.00 324.18 21.08   0.00\n2+3+5+6+7+8+10        9 -149.00 324.19 21.09   0.00\n3+5+7+8+9             7 -152.77 324.20 21.11   0.00\n1+3+5+6               6 -154.43 324.21 21.12   0.00\n1+2+3+5+6+7+8         9 -149.03 324.23 21.14   0.00\n1+2+3+5+6+9           8 -151.00 324.25 21.16   0.00\n1+3+4+5+6+7+8         9 -149.04 324.26 21.16   0.00\n1+3+4+6+7+8+10        9 -149.05 324.28 21.19   0.00\n1+2+3+4+5+6+7+8+9    11 -144.56 324.33 21.23   0.00\n4+5+6+7+8+10          8 -151.04 324.34 21.24   0.00\n3+4+5+6+7+8+10        9 -149.08 324.34 21.25   0.00\n1+3+4+6+7+9+10        9 -149.08 324.34 21.25   0.00\n2+7+9                 5 -156.03 324.36 21.27   0.00\n1+3+4+8               6 -154.51 324.38 21.29   0.00\n3+4+5+6+7+9+10        9 -149.13 324.43 21.34   0.00\n1+2+3+6+7+9+10        9 -149.13 324.44 21.34   0.00\n1+2+3+4+5+6+7+8+10   11 -144.63 324.46 21.36   0.00\n5+6+7+8+10            7 -152.90 324.46 21.36   0.00\n1+2+3+5+6+7+9         9 -149.14 324.47 21.37   0.00\n1+2+3+5+9+10          8 -151.11 324.49 21.39   0.00\n1+2+3+5+8+9+10        9 -149.16 324.49 21.40   0.00\n1+3+4+5+6+7+9         9 -149.18 324.54 21.44   0.00\n1+3+5+6+8+10          8 -151.15 324.56 21.46   0.00\n6+7+8+9+10            7 -152.96 324.59 21.49   0.00\n1+2+5+7+8+10          8 -151.17 324.59 21.50   0.00\n1+2+7+8+9+10          8 -151.18 324.61 21.52   0.00\n5+6+7+8               6 -154.65 324.67 21.57   0.00\n3+4+5+7+8             7 -153.00 324.67 21.58   0.00\n1+4+6+8+9+10          8 -151.21 324.67 21.58   0.00\n4+6+7+9               6 -154.66 324.68 21.59   0.00\n1+5+8+10              6 -154.69 324.73 21.64   0.00\n3+5+7+8+10            7 -153.04 324.75 21.65   0.00\n2+3+5+6+7+9+10        9 -149.29 324.76 21.66   0.00\n2+5+6+7+8+10          8 -151.25 324.77 21.67   0.00\n1+4+8+9+10            7 -153.07 324.81 21.71   0.00\n1+3+7+8+10            7 -153.07 324.81 21.71   0.00\n4+5+6+8+9+10          8 -151.28 324.82 21.73   0.00\n1+3+4+7+8             7 -153.08 324.83 21.74   0.00\n4+5+8+9+10            7 -153.12 324.90 21.80   0.00\n1+2+6+7+8+10          8 -151.34 324.94 21.84   0.00\n2+5+6+8               6 -154.81 324.97 21.88   0.00\n1+3+4                 5 -156.36 325.03 21.93   0.00\n3+4+7+8+10            7 -153.18 325.03 21.94   0.00\n4+5+8+9               6 -154.85 325.06 21.96   0.00\n1+3+5+6+7+8+9         9 -149.45 325.07 21.98   0.00\n1+2+5+7+8+9           8 -151.41 325.08 21.98   0.00\n1+4+8+9               6 -154.86 325.08 21.98   0.00\n4+5+7+8+9             7 -153.21 325.09 21.99   0.00\n1+4+7+8+9             7 -153.21 325.09 21.99   0.00\n1+2+5+6+7+8           8 -151.45 325.17 22.07   0.00\n1+3+4+5+6+8+9         9 -149.50 325.19 22.09   0.00\n2+6+7+8+9+10          8 -151.46 325.19 22.10   0.00\n1+3+4+5+6+7+10        9 -149.51 325.21 22.11   0.00\n1+2+5+8+9+10          8 -151.48 325.23 22.13   0.00\n1+2+3+5+6+7+10        9 -149.54 325.27 22.17   0.00\n1+4+5+6+8+10          8 -151.52 325.30 22.20   0.00\n4+5+7+8+10            7 -153.32 325.30 22.20   0.00\n3+4+5+8+10            7 -153.33 325.33 22.23   0.00\n2+6+8                 5 -156.51 325.34 22.24   0.00\n4+6+7+10              6 -154.99 325.34 22.24   0.00\n1+4+7+8+10            7 -153.34 325.35 22.26   0.00\n1+3+4+8+10            7 -153.35 325.37 22.28   0.00\n2+5+6+8+9+10          8 -151.58 325.42 22.32   0.00\n3+8+9                 5 -156.56 325.44 22.34   0.00\n1+3+5+7               6 -155.06 325.48 22.38   0.00\n2+7                   4 -158.02 325.51 22.42   0.00\n1+3+5+7+8             7 -153.46 325.59 22.49   0.00\n1+3+4+7               6 -155.12 325.60 22.51   0.00\n1+6+8+9+10            7 -153.47 325.61 22.52   0.00\n1+2+3+5+7+8+10        9 -149.73 325.64 22.54   0.00\n1+3+4+8+9             7 -153.51 325.68 22.59   0.00\n4+5+6                 5 -156.69 325.68 22.59   0.00\n1+2+6+8               6 -155.16 325.69 22.59   0.00\n5+6+8+9+10            7 -153.52 325.70 22.60   0.00\n1+3+5+8+10            7 -153.52 325.70 22.60   0.00\n2+5+6+7+8+9           8 -151.73 325.72 22.63   0.00\n1+4+5+8               6 -155.18 325.73 22.63   0.00\n1+3+7+8+9+10          8 -151.74 325.74 22.64   0.00\n1+5+6+8+10            7 -153.55 325.77 22.67   0.00\n5+7+8+9+10            7 -153.57 325.81 22.71   0.00\n3+4+5+8+9             7 -153.57 325.81 22.72   0.00\n1+2+5+6+8+10          8 -151.78 325.81 22.72   0.00\n1+7+8+9+10            7 -153.58 325.82 22.73   0.00\n1+4+6                 5 -156.78 325.86 22.77   0.00\n1+2+6+8+9+10          8 -151.83 325.92 22.83   0.00\n4+6+10                5 -156.81 325.93 22.83   0.00\n1+3+10                5 -156.81 325.93 22.83   0.00\n1+2+3+5+6+8+10        9 -149.89 325.96 22.86   0.00\n1+4+5+7+8             7 -153.65 325.96 22.87   0.00\n1+3+6+8+9             7 -153.68 326.03 22.94   0.00\n1+3+7+9               6 -155.34 326.04 22.95   0.00\n1+2+6+7+8+9           8 -151.90 326.06 22.96   0.00\n1+3+4+8+9+10          8 -151.90 326.07 22.97   0.00\n1+7+8+9               6 -155.36 326.08 22.98   0.00\n3+5+8                 5 -156.89 326.10 23.00   0.00\n1+3+4+7+8+9           8 -151.92 326.11 23.01   0.00\n1+3+4+5+6+8+10        9 -149.97 326.12 23.02   0.00\n1+5+7+8               6 -155.39 326.14 23.05   0.00\n1+3+5+6+7+8+10        9 -150.00 326.18 23.09   0.00\n3+5+7+8+9+10          8 -151.96 326.19 23.09   0.00\n1+4+5+8+10            7 -153.77 326.21 23.11   0.00\n6+7+8+9               6 -155.44 326.23 23.14   0.00\n1+3+5+6+8+9+10        9 -150.03 326.24 23.14   0.00\n1+5+6+7+8             7 -153.79 326.24 23.14   0.00\n3+5+6+8+9             7 -153.80 326.27 23.17   0.00\n1+3+8                 5 -156.99 326.29 23.20   0.00\n1+4+6+7               6 -155.47 326.30 23.21   0.00\n1+3                   4 -158.41 326.30 23.21   0.00\n5+7+8+9               6 -155.47 326.30 23.21   0.00\n4+5+6+7               6 -155.48 326.31 23.22   0.00\n3+4+5+7+8+9           8 -152.06 326.38 23.29   0.00\n1+2+3+5+7+9+10        9 -150.12 326.41 23.32   0.00\n1+3+7+10              6 -155.53 326.42 23.32   0.00\n2+3+5+6+7+8+9+10     10 -147.97 326.42 23.32   0.00\n1+2+3+6+7+8+9+10     10 -147.98 326.43 23.33   0.00\n3+4+5+6+7+8+9+10     10 -147.98 326.43 23.33   0.00\n1+3+4+6+7+8+9+10     10 -147.99 326.45 23.35   0.00\n3+4+7+8+9+10          8 -152.10 326.47 23.37   0.00\n1+2+8+9               6 -155.55 326.47 23.37   0.00\n1+3+4+5+6+7+8+9      10 -148.00 326.49 23.39   0.00\n1+4+5+6+8+9           8 -152.14 326.54 23.45   0.00\n2+5+7+9               6 -155.59 326.55 23.45   0.00\n1+3+5+8+9+10          8 -152.15 326.56 23.46   0.00\n3+4+5+8+9+10          8 -152.17 326.60 23.50   0.00\n1+5+7+8+10            7 -154.01 326.69 23.60   0.00\n2+5+7                 5 -157.19 326.69 23.60   0.00\n1+2+3+5+6+7+8+9      10 -148.12 326.71 23.62   0.00\n1+2+3+5+6+8+9         9 -150.29 326.75 23.66   0.00\n1+3+5+6+8             7 -154.05 326.78 23.68   0.00\n1+3+5+6+9+10          8 -152.27 326.81 23.71   0.00\n2+5+8+9               6 -155.76 326.89 23.79   0.00\n1+6+7+8+9             7 -154.12 326.90 23.80   0.00\n3+5+7                 5 -157.30 326.91 23.82   0.00\n1+3+4+5+6+9+10        9 -150.38 326.93 23.84   0.00\n1+3+4+5               6 -155.80 326.95 23.86   0.00\n4+5+6+9               6 -155.80 326.96 23.86   0.00\n1+2+5+6+8             7 -154.20 327.06 23.97   0.00\n1+5+8+9+10            7 -154.21 327.09 23.99   0.00\n1+2+3+5+6+9+10        9 -150.46 327.11 24.01   0.00\n1+3+5+6+7+9+10        9 -150.47 327.12 24.02   0.00\n1+4+6+9               6 -155.88 327.13 24.03   0.00\n4+6+9+10              6 -155.89 327.13 24.04   0.00\n1+3+4+5+8             7 -154.27 327.20 24.10   0.00\n1+3+5+6+9             7 -154.28 327.23 24.14   0.00\n1+4+6+7+8+9+10        9 -150.53 327.24 24.14   0.00\n1+2+3+4+5+6+7+8+9+10 12 -143.44 327.31 24.21   0.00\n1+4+5+6+7+8+9         9 -150.57 327.33 24.23   0.00\n1+3+5+7+8+9           8 -152.53 327.33 24.23   0.00\n4+6+7+9+10            7 -154.33 327.33 24.24   0.00\n1+2+5+8+9             7 -154.33 327.34 24.24   0.00\n1+6+7+8+9+10          8 -152.55 327.36 24.26   0.00\n1+5+6+7+8+10          8 -152.55 327.37 24.27   0.00\n1+2+7+9               6 -156.01 327.38 24.28   0.00\n2+6+7+9               6 -156.03 327.41 24.32   0.00\n2+7+9+10              6 -156.03 327.42 24.32   0.00\n4+5+6+7+8+9+10        9 -150.65 327.48 24.38   0.00\n5+6+7+8+9+10          8 -152.64 327.55 24.46   0.00\n1+4+7+8+9+10          8 -152.65 327.56 24.46   0.00\n1+3+4+10              6 -156.11 327.59 24.49   0.00\n1+3+4+9               6 -156.13 327.62 24.52   0.00\n4+5+7+8+9+10          8 -152.69 327.63 24.54   0.00\n1+2+3+5+7+8+9+10     10 -148.59 327.65 24.56   0.00\n1+4+5+6+7+8+10        9 -150.76 327.70 24.60   0.00\n1+3+4+5+7             7 -154.53 327.73 24.63   0.00\n4+5+6+7+9             7 -154.59 327.85 24.76   0.00\n3+4+5+7+8+10          8 -152.80 327.86 24.77   0.00\n1+2+5+7+8+9+10        9 -150.86 327.91 24.81   0.00\n1+3+5+10              6 -156.28 327.91 24.81   0.00\n1+3+4+5+7+8           8 -152.83 327.92 24.83   0.00\n1+3+4+7+8+10          8 -152.84 327.94 24.85   0.00\n5+6+7+8+9             7 -154.65 327.96 24.87   0.00\n1+4+6+7+9             7 -154.66 327.99 24.90   0.00\n1+3+5+7+8+10          8 -152.87 327.99 24.90   0.00\n1+2+3+5+6+8+9+10     10 -148.77 328.02 24.92   0.00\n2+9+10                5 -157.86 328.02 24.93   0.00\n2+5+6+7+8+9+10        9 -150.95 328.09 24.99   0.00\n1+3+4+5+6+8+9+10     10 -148.81 328.10 25.01   0.00\n3+5                   4 -159.35 328.18 25.08   0.00\n3+5+8+9               6 -156.43 328.22 25.12   0.00\n1+2+5+6+7+8+10        9 -151.04 328.27 25.17   0.00\n2+5+6+8+9             7 -154.80 328.27 25.18   0.00\n2+6+7                 5 -157.99 328.28 25.18   0.00\n4+5+6+7+10            7 -154.81 328.29 25.20   0.00\n1+3+8+9               6 -156.47 328.31 25.21   0.00\n2+6+8+9               6 -156.47 328.31 25.21   0.00\n1+3+5+7+9             7 -154.83 328.32 25.22   0.00\n1+2+7                 5 -158.01 328.34 25.24   0.00\n2+7+10                5 -158.02 328.34 25.24   0.00\n1+4+5+8+9             7 -154.85 328.36 25.27   0.00\n1+3+4+7+9             7 -154.85 328.37 25.28   0.00\n2+5+9                 5 -158.03 328.38 25.28   0.00\n1+4+5+8+9+10          8 -153.06 328.38 25.28   0.00\n3+4+5                 5 -158.05 328.41 25.31   0.00\n1+3+5+6+7+8+9+10     10 -148.98 328.44 25.34   0.00\n1+4+5+6+8+9+10        9 -151.13 328.44 25.35   0.00\n1+2+3+5+6+7+8+10     10 -148.99 328.46 25.36   0.00\n1+3+5                 5 -158.08 328.47 25.38   0.00\n1+2+6+7+8+9+10        9 -151.16 328.50 25.40   0.00\n1+3+4+5+8+10          8 -153.12 328.50 25.40   0.00\n1+3+4+5+6+7+8+10     10 -149.04 328.55 25.46   0.00\n1+3+4+5+6+7+9+10     10 -149.04 328.56 25.46   0.00\n1+4+5+6               6 -156.61 328.57 25.48   0.00\n1+3+9+10              6 -156.64 328.63 25.54   0.00\n1+4+6+7+10            7 -154.99 328.64 25.55   0.00\n1+4+5+7+8+9           8 -153.20 328.66 25.56   0.00\n1+3+5+7+10            7 -155.01 328.68 25.59   0.00\n4+5+6+10              6 -156.68 328.71 25.62   0.00\n1+2+3+5+6+7+9+10     10 -149.13 328.73 25.63   0.00\n1+3+4+5+8+9           8 -153.29 328.84 25.74   0.00\n1+4+5+7+8+10          8 -153.29 328.84 25.75   0.00\n1+5+6+8+9+10          8 -153.31 328.88 25.78   0.00\n1+3+4+7+10            7 -155.11 328.88 25.78   0.00\n1+4+6+10              6 -156.78 328.91 25.82   0.00\n1+2+5+6+7+8+9         9 -151.37 328.93 25.83   0.00\n1+2+6+8+9             7 -155.13 328.93 25.84   0.00\n1+3+9                 5 -158.32 328.94 25.85   0.00\n1+3+4+7+8+9+10        9 -151.46 329.10 26.01   0.00\n1+3+5+8               6 -156.88 329.12 26.03   0.00\n1+2+5+7               6 -156.88 329.13 26.03   0.00\n1+2+5+6+8+9+10        9 -151.48 329.13 26.04   0.00\n1+3+7+9+10            7 -155.31 329.29 26.19   0.00\n1+5+7+8+9             7 -155.32 329.30 26.20   0.00\n1+4+5+6+7             7 -155.32 329.31 26.21   0.00\n1+3+5+7+8+9+10        9 -151.57 329.31 26.22   0.00\n2+5+7+10              6 -157.02 329.40 26.30   0.00\n1+5+7+8+9+10          8 -153.57 329.40 26.31   0.00\n3                     3 -161.29 329.44 26.35   0.00\n2+5+6+7+9             7 -155.44 329.54 26.45   0.00\n2+5+6+7               6 -157.10 329.56 26.46   0.00\n1+3+4+5+7+8+9         9 -151.70 329.58 26.48   0.00\n3+4+5+7+8+9+10        9 -151.70 329.58 26.49   0.00\n3+5+7+10              6 -157.11 329.58 26.49   0.00\n1+3+4+5+8+9+10        9 -151.70 329.59 26.49   0.00\n3+4+5+7               6 -157.12 329.59 26.50   0.00\n1+3+5+6+8+9           8 -153.68 329.62 26.53   0.00\n2+5+7+9+10            7 -155.50 329.67 26.57   0.00\n1+3+4+5+10            7 -155.50 329.67 26.57   0.00\n3+7                   4 -160.12 329.73 26.63   0.00\n1+2+5+7+9             7 -155.54 329.74 26.64   0.00\n1+3+4+5+9             7 -155.54 329.74 26.64   0.00\n2+5+9+10              6 -157.22 329.81 26.71   0.00\n1+5+6+7+8+9           8 -153.78 329.83 26.73   0.00\n3+5+7+9               6 -157.25 329.86 26.77   0.00\n3+5+10                5 -158.89 330.09 26.99   0.00\n4+5+6+9+10            7 -155.79 330.26 27.16   0.00\n1+4+5+6+9             7 -155.80 330.26 27.17   0.00\n1+2+9                 5 -159.01 330.32 27.23   0.00\n1+3+4+9+10            7 -155.87 330.41 27.32   0.00\n1+4+6+9+10            7 -155.88 330.42 27.33   0.00\n2+5                   4 -160.47 330.42 27.33   0.00\n2+6+9                 5 -159.08 330.47 27.37   0.00\n1+2+6+7+9             7 -155.98 330.63 27.53   0.00\n1+2+5+6+8+9           8 -154.20 330.65 27.56   0.00\n4+5+6+7+9+10          8 -154.20 330.66 27.57   0.00\n1+2+7+9+10            7 -156.00 330.66 27.57   0.00\n3+7+10                5 -159.18 330.68 27.58   0.00\n1+3+4+5+7+9           8 -154.23 330.71 27.62   0.00\n2+6+7+9+10            7 -156.03 330.72 27.62   0.00\n1+4+6+7+9+10          8 -154.27 330.81 27.71   0.00\n1+3+5+9+10            7 -156.08 330.82 27.73   0.00\n3+5+9                 5 -159.31 330.92 27.83   0.00\n1+5+6+7+8+9+10        9 -152.37 330.92 27.83   0.00\n6+7+9                 5 -159.32 330.95 27.85   0.00\n1+4                   4 -160.76 331.00 27.91   0.00\n2+6+9+10              6 -157.82 331.01 27.91   0.00\n1+2+9+10              6 -157.83 331.03 27.93   0.00\n2+10                  4 -160.81 331.10 28.00   0.00\n2+5+6+9               6 -157.87 331.10 28.01   0.00\n1+4+7                 5 -159.40 331.11 28.01   0.00\n1+2+5+9               6 -157.88 331.12 28.03   0.00\n1+2+3+5+6+7+8+9+10   11 -147.96 331.13 28.03   0.00\n1+3+4+5+6+7+8+9+10   11 -147.98 331.15 28.06   0.00\n3+4                   4 -160.84 331.16 28.06   0.00\n1+2+6+7               6 -157.95 331.25 28.16   0.00\n2+5+10                5 -159.48 331.26 28.16   0.00\n1+3+4+5+7+10          8 -154.52 331.31 28.21   0.00\n2+6+7+10              6 -157.98 331.31 28.22   0.00\n1+3+5+9               6 -157.98 331.32 28.23   0.00\n3+9                   4 -160.94 331.35 28.26   0.00\n1+4+5+6+7+8+9+10     10 -150.44 331.36 28.27   0.00\n3+4+5+9               6 -158.00 331.36 28.27   0.00\n1+3+4+5+7+8+10        9 -152.60 331.37 28.28   0.00\n1+2+7+10              6 -158.01 331.39 28.29   0.00\n1+3+5+8+9             7 -156.38 331.43 28.34   0.00\n1+4+5+6+7+9           8 -154.59 331.44 28.34   0.00\n3+4+5+10              6 -158.04 331.45 28.35   0.00\n1+4+5+7+8+9+10        9 -152.64 331.46 28.36   0.00\n3+7+9                 5 -159.65 331.61 28.51   0.00\n1+3+5+7+9+10          8 -154.77 331.79 28.70   0.00\n1+4+5+6+7+10          8 -154.81 331.88 28.78   0.00\n1+4+5+6+10            7 -156.61 331.88 28.78   0.00\n3+4+5+7+10            7 -156.63 331.92 28.82   0.00\n1+3+4+7+9+10          8 -154.84 331.94 28.84   0.00\n3+10                  4 -161.29 332.05 28.96   0.00\n1+2+5+6+7+8+9+10     10 -150.80 332.08 28.99   0.00\n2+9                   4 -161.35 332.18 29.08   0.00\n1+4+9                 5 -159.99 332.29 29.20   0.00\n1+2+5+7+10            7 -156.85 332.37 29.28   0.00\n1+2+5+6+7             7 -156.88 332.43 29.34   0.00\n2+5+6                 5 -160.08 332.46 29.36   0.00\n3+4+7                 5 -160.12 332.54 29.45   0.00\n2+5+6+7+10            7 -156.98 332.64 29.54   0.00\n1+3+4+5+9+10          8 -155.23 332.72 29.62   0.00\n3+4+5+7+9             7 -157.06 332.79 29.70   0.00\n1+4+7+9               6 -158.72 332.80 29.70   0.00\n3+5+7+9+10            7 -157.08 332.84 29.74   0.00\n1+2+6+9               6 -158.78 332.92 29.82   0.00\n1+3+4+5+7+8+9+10     10 -151.25 332.97 29.88   0.00\n3+5+9+10              6 -158.81 332.97 29.88   0.00\n3+4+7+10              6 -158.82 333.01 29.91   0.00\n5+6+7+9               6 -158.84 333.04 29.95   0.00\n2+5+6+7+9+10          8 -155.40 333.06 29.97   0.00\n1+2+5+9+10            7 -157.20 333.06 29.97   0.00\n2+5+6+9+10            7 -157.21 333.10 30.00   0.00\n3+4+9                 5 -160.40 333.10 30.00   0.00\n1+2+5+6+7+9           8 -155.44 333.13 30.04   0.00\n1+2+5                 5 -160.46 333.22 30.13   0.00\n1+2+5+7+9+10          8 -155.49 333.24 30.14   0.00\n3+7+9+10              6 -158.96 333.28 30.18   0.00\n2+6                   4 -161.91 333.31 30.21   0.00\n2+6+10                5 -160.52 333.35 30.26   0.00\n3+4+10                5 -160.58 333.46 30.37   0.00\n1+6+7+9               6 -159.08 333.52 30.43   0.00\n6+7+9+10              6 -159.08 333.53 30.43   0.00\n4+9                   4 -162.05 333.59 30.49   0.00\n1+4+10                5 -160.70 333.70 30.60   0.00\n1+2+5+10              6 -159.19 333.74 30.64   0.00\n1+4+7+10              6 -159.21 333.78 30.68   0.00\n1+4+5                 5 -160.74 333.79 30.69   0.00\n1+8                   4 -162.17 333.83 30.73   0.00\n7+9                   4 -162.18 333.84 30.74   0.00\n1+4+5+6+9+10          8 -155.79 333.85 30.75   0.00\n1+2+10                5 -160.79 333.89 30.80   0.00\n3+9+10                5 -160.89 334.08 30.99   0.00\n1+4+5+7               6 -159.37 334.10 31.01   0.00\n2+8+9                 5 -160.93 334.17 31.08   0.00\n1+2+6+7+9+10          8 -155.97 334.21 31.11   0.00\n2+5+6+10              6 -159.46 334.29 31.19   0.00\n1+2+6+9+10            7 -157.82 334.30 31.21   0.00\n1+2+5+6+9             7 -157.84 334.35 31.25   0.00\n1+4+5+6+7+9+10        9 -154.18 334.53 31.44   0.00\n1+2+6+7+10            7 -157.95 334.56 31.46   0.00\n1+3+4+5+7+9+10        9 -154.22 334.62 31.53   0.00\n4+5+9                 5 -161.16 334.63 31.54   0.00\n3+4+7+9               6 -159.64 334.64 31.54   0.00\n4+7+9                 5 -161.18 334.66 31.56   0.00\n3+4+5+9+10            7 -158.00 334.67 31.57   0.00\n1+4+9+10              6 -159.90 335.17 32.07   0.00\n1+7+9                 5 -161.43 335.18 32.08   0.00\n1+4+5+9               6 -159.92 335.21 32.11   0.00\n1+2+5+6               6 -159.98 335.32 32.22   0.00\n3+4+5+7+9+10          8 -156.61 335.49 32.39   0.00\n1+5+8                 5 -161.60 335.50 32.41   0.00\n6+7                   4 -163.07 335.63 32.53   0.00\n4+5+7+9               6 -160.14 335.64 32.55   0.00\n4                     3 -164.47 335.79 32.70   0.00\n1+4+7+9+10            7 -158.59 335.84 32.74   0.00\n3+4+9+10              6 -160.25 335.87 32.77   0.00\n1+8+9                 5 -161.78 335.87 32.78   0.00\n4+7+9+10              6 -160.26 335.89 32.79   0.00\n3+4+7+9+10            7 -158.63 335.93 32.83   0.00\n1+4+5+7+9             7 -158.64 335.95 32.85   0.00\n1+2+5+6+7+10          8 -156.85 335.97 32.87   0.00\n1+2+6+10              6 -160.33 336.03 32.93   0.00\n4+7+10                5 -161.87 336.06 32.96   0.00\n1+2+6                 5 -161.91 336.12 33.02   0.00\n5+6+7+9+10            7 -158.73 336.13 33.03   0.00\n4+5                   4 -163.33 336.14 33.04   0.00\n1+6+8                 5 -161.92 336.15 33.06   0.00\n1+5+6+7+9             7 -158.76 336.18 33.08   0.00\n5+8                   4 -163.37 336.22 33.13   0.00\n5+7+9                 5 -161.96 336.23 33.13   0.00\n4+9+10                5 -161.96 336.23 33.14   0.00\n6+9+10                5 -161.97 336.24 33.14   0.00\n7+9+10                5 -162.13 336.56 33.47   0.00\n1+6+7+9+10            7 -158.99 336.64 33.55   0.00\n1+2+5+6+9+10          8 -157.20 336.66 33.56   0.00\n4+7                   4 -163.59 336.67 33.57   0.00\n5+6+7                 5 -162.20 336.70 33.61   0.00\n1+4+5+10              6 -160.67 336.70 33.61   0.00\n1+2                   4 -163.64 336.76 33.66   0.00\n2+8                   4 -163.65 336.78 33.68   0.00\n1+2+5+6+10            7 -159.07 336.81 33.71   0.00\n4+5+7                 5 -162.30 336.90 33.80   0.00\n1+2+5+6+7+9+10        9 -155.40 336.98 33.89   0.00\n1+4+5+7+10            7 -159.18 337.03 33.94   0.00\n1+5+6+8               6 -160.88 337.12 34.02   0.00\n4+10                  4 -164.08 337.64 34.54   0.00\n4+5+7+10              6 -161.14 337.64 34.54   0.00\n4+5+9+10              6 -161.16 337.67 34.57   0.00\n4+5+7+9+10            7 -159.58 337.83 34.73   0.00\n1+6+8+9               6 -161.27 337.90 34.81   0.00\n6+7+10                5 -162.86 338.02 34.92   0.00\n1+7+9+10              6 -161.33 338.03 34.93   0.00\n1+5+8+9               6 -161.42 338.19 35.10   0.00\n1+5+7+9               6 -161.43 338.22 35.12   0.00\n5+8+9                 5 -162.97 338.24 35.15   0.00\n1+4+5+9+10            7 -159.83 338.32 35.23   0.00\n1+6+7                 5 -163.07 338.46 35.36   0.00\n4+5+10                5 -163.18 338.67 35.58   0.00\n5+6+9+10              6 -161.66 338.68 35.59   0.00\n1+7                   4 -164.61 338.70 35.60   0.00\n9+10                  4 -164.76 339.00 35.91   0.00\n5+6+8                 5 -163.37 339.05 35.95   0.00\n1+6+9+10              6 -161.95 339.27 36.17   0.00\n5+7+9+10              6 -161.96 339.28 36.19   0.00\n1+4+5+7+9+10          8 -158.51 339.29 36.19   0.00\n7                     3 -166.23 339.31 36.21   0.00\n1+5+6+7               6 -162.12 339.60 36.50   0.00\n5+6+7+10              6 -162.13 339.63 36.53   0.00\n1+5+6+8+9             7 -160.50 339.66 36.56   0.00\n1+5+6+7+9+10          8 -158.70 339.66 36.57   0.00\n1+9+10                5 -163.78 339.86 36.77   0.00\n2                     3 -166.97 340.80 37.70   0.00\n1+6+7+10              6 -162.80 340.95 37.85   0.00\n1+7+10                5 -164.34 340.98 37.89   0.00\n1+5+7                 5 -164.35 341.00 37.91   0.00\n5+6+8+9               6 -162.93 341.22 38.12   0.00\n1+5+7+9+10            7 -161.33 341.33 38.23   0.00\n5+9+10                5 -164.60 341.50 38.40   0.00\n8+9                   4 -166.01 341.51 38.41   0.00\n5+7                   4 -166.13 341.75 38.65   0.00\n7+10                  4 -166.15 341.78 38.69   0.00\n6+8                   4 -166.25 341.97 38.88   0.00\n1+5+6+9+10            7 -161.66 341.99 38.89   0.00\n1+5+6+7+10            7 -161.96 342.60 39.50   0.00\n6+8+9                 5 -165.20 342.70 39.60   0.00\n1+5+9+10              6 -163.77 342.90 39.80   0.00\n9                     3 -168.35 343.55 40.45   0.00\n1+5+7+10              6 -164.14 343.64 40.54   0.00\n5+7+10                5 -166.11 344.52 41.42   0.00\n5+9                   4 -167.62 344.73 41.63   0.00\n8                     3 -169.05 344.95 41.85   0.00\n1+9                   4 -167.83 345.14 42.04   0.00\n1+6+9                 5 -166.44 345.19 42.09   0.00\n6+10                  4 -167.93 345.33 42.24   0.00\n5+6+9                 5 -166.54 345.39 42.30   0.00\n6+9                   4 -168.33 346.14 43.04   0.00\n1+10                  4 -168.41 346.29 43.20   0.00\n5+6+10                5 -167.14 346.59 43.49   0.00\n1+5+6+9               6 -165.63 346.61 43.52   0.00\n1+6+10                5 -167.49 347.29 44.19   0.00\n1+5+9                 5 -167.60 347.50 44.41   0.00\n1+5+6+10              6 -166.45 348.26 45.16   0.00\n1+5+10                5 -168.00 348.31 45.21   0.00\n10                    3 -171.08 349.02 45.92   0.00\n5+10                  4 -171.06 351.59 48.50   0.00\n5+6                   4 -175.13 359.75 56.65   0.00\n5                     3 -176.59 360.03 56.94   0.00\n1+5                   4 -176.35 362.18 59.08   0.00\n1+5+6                 5 -175.06 362.43 59.34   0.00\n(Null)                2 -180.19 364.79 61.69   0.00\n1                     3 -179.21 365.28 62.18   0.00\n6                     3 -179.93 366.72 63.62   0.00\n1+6                   4 -179.00 367.48 64.39   0.00\n\nTerm codes: \n  am carb  cyl disp drat gear  kml qsec   vs   wt \n   1    2    3    4    5    6    7    8    9   10 \n\nModel-averaged coefficients:  \n(full average) \n            Estimate Std. Error Adjusted SE z value Pr(>|z|)    \n(Intercept)  70.8539    98.1389    100.4683   0.705 0.480663    \ncarb         21.4717     5.4456      5.5937   3.839 0.000124 ***\ndisp          0.4453     0.1401      0.1432   3.109 0.001875 ** \nwt          -20.6451    16.9931     17.3080   1.193 0.232944    \nvs            4.9071    12.3728     12.6790   0.387 0.698736    \ncyl           1.8423     5.4948      5.6138   0.328 0.742784    \ndrat         -1.2146     6.7301      6.9936   0.174 0.862127    \nqsec         -2.1062     4.6592      4.7408   0.444 0.656841    \nkml           0.1869     1.4603      1.5156   0.123 0.901832    \nam            0.5697     7.5870      7.8770   0.072 0.942342    \ngear          1.3335     6.8393      7.0322   0.190 0.849599    \n \n(conditional average) \n            Estimate Std. Error Adjusted SE z value Pr(>|z|)    \n(Intercept)  70.8539    98.1389    100.4683   0.705 0.480663    \ncarb         21.6289     5.1451      5.3027   4.079 4.53e-05 ***\ndisp          0.4508     0.1318      0.1352   3.334 0.000855 ***\nwt          -28.6308    13.1083     13.6677   2.095 0.036190 *  \nvs           17.9458    18.0517     18.8126   0.954 0.340123    \ncyl           7.5820     8.9855      9.2835   0.817 0.414090    \ndrat         -6.5756    14.4903     15.1510   0.434 0.664283    \nqsec         -6.5823     6.1951      6.3856   1.031 0.302633    \nkml           1.0361     3.3075      3.4425   0.301 0.763436    \nam            3.2174    17.7921     18.4899   0.174 0.861860    \ngear          6.9068    14.2750     14.7525   0.468 0.639659    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n# adäquatest model gemäss multimodel inference\nmodel_ad <- lm(hp ~ carb + disp + wt, data = mtcars)\nsummary(model_ad)\n\n\nCall:\nlm(formula = hp ~ carb + disp + wt, data = mtcars)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-45.225 -14.235   3.879  20.621  39.785 \n\nCoefficients:\n             Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  53.16715   18.16036   2.928  0.00671 ** \ncarb         23.57691    2.99391   7.875 1.41e-08 ***\ndisp          0.51663    0.07669   6.736 2.59e-07 ***\nwt          -28.59214    9.87292  -2.896  0.00725 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 24.32 on 28 degrees of freedom\nMultiple R-squared:  0.8863,    Adjusted R-squared:  0.8742 \nF-statistic: 72.78 on 3 and 28 DF,  p-value: 2.462e-13\n\n\n\n\n\nAbbildung 38.7: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 38.8: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 38.9: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 38.10: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 38.11: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons4_Demo_GLM.html",
    "href": "statKons/StatKons4_Demo_GLM.html",
    "title": "StatKons4: Demo",
    "section": "",
    "text": "Download dieses Demoscript via “</>Code” (oben rechts)"
  },
  {
    "objectID": "statKons/StatKons4_Demo_GLM.html#poisson-regression",
    "href": "statKons/StatKons4_Demo_GLM.html#poisson-regression",
    "title": "StatKons4: Demo",
    "section": "Poisson Regression",
    "text": "Poisson Regression\n\n############\n# quasipoisson regression\n############\n\ncars <- mtcars %>% \n   mutate(kml = (235.214583/mpg))\n\nglm.poisson <- glm(hp ~ kml, data = cars, family = \"poisson\")\n\nsummary(glm.poisson) # klare overdisperion\n\n\nCall:\nglm(formula = hp ~ kml, family = \"poisson\", data = cars)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-6.438  -2.238  -1.159   2.457  10.576  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)    \n(Intercept) 3.894293   0.050262   77.48   <2e-16 ***\nkml         0.081666   0.003414   23.92   <2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 958.27  on 31  degrees of freedom\nResidual deviance: 426.59  on 30  degrees of freedom\nAIC: 645.67\n\nNumber of Fisher Scoring iterations: 4\n\n# deshalb quasipoisson\nglm.quasipoisson <- glm(hp ~ kml, data = cars, family = quasipoisson(link = log))\n\nsummary(glm.quasipoisson)\n\n\nCall:\nglm(formula = hp ~ kml, family = quasipoisson(link = log), data = cars)\n\nDeviance Residuals: \n   Min      1Q  Median      3Q     Max  \n-6.438  -2.238  -1.159   2.457  10.576  \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  3.89429    0.19508  19.963  < 2e-16 ***\nkml          0.08167    0.01325   6.164 8.82e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for quasipoisson family taken to be 15.06438)\n\n    Null deviance: 958.27  on 31  degrees of freedom\nResidual deviance: 426.59  on 30  degrees of freedom\nAIC: NA\n\nNumber of Fisher Scoring iterations: 4\n\n# visualisiere\nggplot2::ggplot(cars, aes(x = kml, y = hp)) + \n    geom_point(size = 8) + \n    geom_smooth(method = \"glm\", method.args = list(family = \"poisson\"), se = F,\n                color = \"green\", size = 2) + \n    scale_x_continuous(limits = c(0,35)) + \n    scale_y_continuous(limits = c(0,400)) + \n    theme_classic()\n\n#Rücktransformation meines Outputs für ein besseres Verständnis\nglm.quasi.back <- exp(coef(glm.quasipoisson))\n\n#für ein schönes ergebnis\nglm.quasi.back %>%\n  broom::tidy() %>% \n  knitr::kable(digits = 3)\n\n\n\n\n\nnames\nx\n\n\n\n\n(Intercept)\n49.121\n\n\nkml\n1.085\n\n\n\nAbbildung 39.1: Generierter Plot\n\n\n#for more infos, also for posthoc tests\n#here: https://rcompanion.org/handbook/J_01.html\n\n\n\n\nAbbildung 39.2: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons4_Demo_GLM.html#logistische-regression",
    "href": "statKons/StatKons4_Demo_GLM.html#logistische-regression",
    "title": "StatKons4: Demo",
    "section": "logistische Regression",
    "text": "logistische Regression\n\n############\n# logistische regression\n############\ncars <- mtcars\n\n# erstelle das modell\nglm.binar <- glm(vs ~ hp, data = cars, family = binomial(link = logit)) \n\n#achtung Model gibt Koeffizienten als logit() zurück\nsummary(glm.binar)\n\n\nCall:\nglm(formula = vs ~ hp, family = binomial(link = logit), data = cars)\n\nDeviance Residuals: \n     Min        1Q    Median        3Q       Max  \n-2.12148  -0.20302  -0.01598   0.51173   1.20083  \n\nCoefficients:\n            Estimate Std. Error z value Pr(>|z|)   \n(Intercept)  8.37802    3.21593   2.605  0.00918 **\nhp          -0.06856    0.02740  -2.502  0.01234 * \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for binomial family taken to be 1)\n\n    Null deviance: 43.860  on 31  degrees of freedom\nResidual deviance: 16.838  on 30  degrees of freedom\nAIC: 20.838\n\nNumber of Fisher Scoring iterations: 7\n\n# überprüfe das modell\ncars$predicted <- predict(glm.binar, type = \"response\")\n\n# visualisiere\nggplot(cars, aes(x = hp, y = vs)) +    \n    geom_point(size = 8) +\n    geom_point(aes(y = predicted), shape  = 1, size = 6) +\n    guides(color = \"none\") +\n    geom_smooth(method = \"glm\", method.args = list(family = 'binomial'), \n                se = FALSE,\n                size = 2) +\n    # geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n    mytheme\n\n#Modeldiagnostik (wenn nicht signifikant, dann OK)\n1 - pchisq(glm.binar$deviance,glm.binar$df.resid)  \n\n[1] 0.9744718\n\n#Modellgüte (pseudo-R²)\n1 - (glm.binar$dev / glm.binar$null)  \n\n[1] 0.6161072\n\n#Steilheit der Beziehung (relative Änderung der odds von x + 1 vs. x)\nexp(glm.binar$coefficients[2])\n\n       hp \n0.9337368 \n\n#LD50 (wieso negativ: weil zweiter koeffizient negative steigung hat)\nabs(glm.binar$coefficients[1]/glm.binar$coefficients[2])\n\n(Intercept) \n   122.1986 \n\n# kreuztabelle (confusion matrix): fasse die ergebnisse aus predict und \n# \"gegebenheiten, realität\" zusammen\ntab1 <- table(cars$predicted>.5, cars$vs)\ndimnames(tab1) <- list(c(\"M:S-type\",\"M:V-type\"), c(\"T:S-type\", \"T:V-type\"))\ntab1 \n\n         T:S-type T:V-type\nM:S-type       15        2\nM:V-type        3       12\n\nprop.table(tab1, 2) \n\n          T:S-type  T:V-type\nM:S-type 0.8333333 0.1428571\nM:V-type 0.1666667 0.8571429\n\n#was könnt ihr daraus ablesen? Ist unser Modell genau?\n\n# Funktion die die logits in Wahrscheinlichkeiten transformiert\n# mehr infos hier: https://sebastiansauer.github.io/convert_logit2prob/\n# dies ist interessant, falls ihr mal ein kategorialer Prädiktor habt\nlogit2prob <- function(logit){\n  odds <- exp(logit)\n  prob <- odds / (1 + odds)\n  return(prob)\n}\n\n\n\n\nAbbildung 39.3: Generierter Plot"
  },
  {
    "objectID": "statKons/StatKons4_Demo_GLM.html#gams",
    "href": "statKons/StatKons4_Demo_GLM.html#gams",
    "title": "StatKons4: Demo",
    "section": "GAM’s",
    "text": "GAM’s\n\n###########\n# LOESS & GAM\n###########\n\nggplot2::ggplot(mtcars, aes(x = mpg, y = hp)) + \n  geom_point(size = 8) + \n  geom_smooth(method = \"gam\", se = F, color = \"green\", size = 2, formula = y ~ s(x, bs = \"cs\")) + \n  geom_smooth(method = \"loess\", se = F, color = \"red\", size = 2) + \n  geom_smooth(method = \"glm\", size = 2, color = \"blue\", se = F) + \n  scale_x_continuous(limits = c(0,35)) + \n    scale_y_continuous(limits = c(0,400)) + \n    mytheme\n\nggplot2::ggplot(mtcars, aes(x = mpg, y = hp)) + \n  geom_point(size = 8) + \n  geom_smooth(method = \"gam\", se = F, color = \"green\", size = 2, formula = y ~ s(x, bs = \"cs\")) + \n    # geom_smooth(method = \"loess\", se = F, color = \"red\", size = 2) + \n  geom_smooth(method = \"glm\", size = 2, color = \"grey\", se = F) + \n  scale_x_continuous(limits = c(0,35)) + \n  scale_y_continuous(limits = c(0,400)) + \n  mytheme\n\n\n\n\nAbbildung 39.4: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 39.5: Generierter Plot"
  },
  {
    "objectID": "RaumAn.html",
    "href": "RaumAn.html",
    "title": "Räumliche Analysen",
    "section": "",
    "text": "Die erste Übung zur Raumanalyse illustriert das einfache Laden und Anzeigen von Geodaten im Vektor- und Raster-Datenformat. Zusätzlich veranschaulicht die Übung den Umgang mit Koordinatensystemen sowie die Vektor-Raster-Konvertierung. Einfach erste Analysen umfassen den Spatial Join (Annotieren von Punkten mit Attributen von die Punkte einbettenden Vektordaten) sowie Puffer-Operationen. Zum Abschluss thematisiert die Übung die Aggregationsabhängigkeit räumlicher Daten durch die Illustration des Modifiable Areal Unit Problem (MAUP). Inhaltlich orientiert sich die Übung an Bodeneigenschaften für den Untersuchungsraum Schweiz."
  },
  {
    "objectID": "RaumAn.html#teil-2",
    "href": "RaumAn.html#teil-2",
    "title": "Räumliche Analysen",
    "section": "Teil 2",
    "text": "Teil 2\nIn dieser zweiten Übung wirst Du wiederum Geodatensätze verarbeiten und darstellen. Wir starten mit einem Punktdatensatz zu einem Messnetz zur Erhebung der Luftqualität in der Schweiz (Stickstoffdioxid NO2 um genau zu sein). Im Gegensatz zum Punktdatensatz zur Wasserverfügbarkeit aus der vorherigen Übung, sind die Messstellen des Messnetzes zur Luftqualität sehr unregelmässig im Raum verteilt. Trotzdem möchten wir versuchen ein kontinuierliches Raster von Luftqualitätswerten für die ganze Schweiz zu interpolieren. Wir starten mit der einfachen Interpolations-Methode Inverse Distance Weighting IDW. Danach wollen wir für den gleichen Datensatz nach dem Ansatz der nächsten Nachbarn die Thiessen Polygone konstruieren. Im zweiten Teil der Übung wollen wir Dichteverteilung untersuchen. Dabei untersuchen wir einen Datensatz mit Bewegungsdaten eines Rotmilans in der Schweiz. Mittels einer Kernel Density Estimation (KDE) berechnen wir eine kontinuierliche Dichteverteilung, über die wir eine Annäherung an das Habitat des untersuchten Greifvogels berechnen können. Bevor wir aber starten, schauen wir uns die Punktdatensätze genauer an indem wir die G-Function berechnen und plotten."
  },
  {
    "objectID": "RaumAn.html#teil-3",
    "href": "RaumAn.html#teil-3",
    "title": "Räumliche Analysen",
    "section": "Teil 3",
    "text": "Teil 3\nZum Abschluss des Themenblockes Spatial Data Science berechnen wir mit dem Moran’s I einen Index zur Berechnung der räumlichen Autokorrelation einer Choroplethenkarte. Wir verwenden nochmals die aggregierten Choroplethenkarten zur Wasserverfügbarkeit aus der ersten Übung und schauen uns an, wie stark die Werte für die Kantone und die Bezirke autokorreliert sind. Anstatt einfach eine Funktion zur Berechnung von Moran’s I aufzurufen und diese dann wie eine Black Box anzuwenden, wollen wir Formel für die Berechnung des Index in Ihre Bausteine zerlegen und diese Schritt für Schritt selber nachrechnen. So seht Ihr, wie Moran’s I wirklich funktioniert und könnte dabei erst noch die zuvor gelernten Data Science Techniken repetieren.\nAusserdem zeigen wir Euch ganz einfache Verfahren, um die bereits erstellten Karten interaktiv zu machen.\nAuf geht’s!"
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html",
    "href": "rauman/Rauman1_Uebung_A.html",
    "title": "Rauman 1: Übung A",
    "section": "",
    "text": "Es gibt bereits eine Vielzahl von Packages um in R mit räumlichen Daten zu arbeiten, die ihrerseits wiederum auf weiteren Packages basieren (Stichwort dependencies). Für Vektordaten dominierte lange das Package sp, welches nun durch sf abgelöst wurde. Wir werden wenn immer möglich mit sf arbeiten und nur in Ausnahmefällen auf andere Packages zurück greifen.\nFür die kommenden Übungen könnt ihr folgende Packages installieren bzw. laden:"
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-1-vektor-daten-runterladen-und-importieren",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-1-vektor-daten-runterladen-und-importieren",
    "title": "Rauman 1: Übung A",
    "section": "Aufgabe 1: Vektor Daten runterladen und importieren",
    "text": "Aufgabe 1: Vektor Daten runterladen und importieren\nLade zunächst die Datensätze unter folgenden Links herunter:\n\nkantone.gpkg\ngemeinden.gpkg\n\nEs handelt sich um Geodatensätze im Format Geopackage (“*.gpkg”), eine alternatives Datenformat zum bekannteren Format “Shapefiles”. Importiere die Datensätze wie folgt:\n\nkantone <- read_sf(\"datasets/rauman/kantone.gpkg\")\ngemeinden <- read_sf(\"datasets/rauman/gemeinden.gpkg\") \n\nSchau Dir die importierten Datensätze an. Am meisten Informationen zu sf Objekten bekommst du, wenn du dir den Datensatz in der Konsole anschaust (in dem du den Variabel-Name in der Konsole eintippst). Mit dem RStudio Viewer werden sf Objekte nur sehr langsam geladen und die Metadaten werden nicht angezeigt."
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-2-daten-visualisieren",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-2-daten-visualisieren",
    "title": "Rauman 1: Übung A",
    "section": "Aufgabe 2: Daten Visualisieren",
    "text": "Aufgabe 2: Daten Visualisieren\nVektordaten (sf Objekte) lassen sich teilweise sehr schön in die bekannten Tidyverse workflows integrieren. Das merkt man schnell, wenn man die Daten visualisieren möchte. In InfoVis 1 & 2 haben wir intensiv mit ggplot2 gearbeitet und dort die Layers geom_point() und geom_line() kennen gelernt. Zusätzlich beinhaltet ggplot die Möglichkeit, mit geom_sf() Vektordaten direkt und sehr einfach zu plotten. Die nachfolgende Aufgabe werden wir aber mit plot abbilden (Warum wird gleich erläutert). Führe die angegebenen R-Befehle aus und studiere die entstehenden Plots. Welche Unterschiede findest Du? Wie erklärst Du diese Unterschiede?\n\nplot(gemeinden, max.plot = 1)\n\nplot(kantone, max.plot = 1)\n\n\n\n\nAbbildung 40.1: Generierter Plot\n\n\n\n\n\n\n\nAbbildung 40.2: Generierter Plot"
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#input-koodinatensysteme",
    "href": "rauman/Rauman1_Uebung_A.html#input-koodinatensysteme",
    "title": "Rauman 1: Übung A",
    "section": "Input: Koodinatensysteme",
    "text": "Input: Koodinatensysteme\nIn der obigen visualierung fällt folgendes auf:\n\ndie X/Y Achsen weisen zwei ganz unterschiedlichen Zahlenbereiche auf (vergleiche die Achsenbeschriftungen)\nder Umriss der Schweiz sieht in den beiden Datensätzen unterschiedlich aus (kantone ist gegenüber gemeinden gestaucht)\n\nDies hat natürlich damit zu tun, dass die beiden Datensätze in unterschiedlichen Koordinatensystemen erfasst wurden. Koordinatensysteme werden mit CRS (Coordinate Reference System) abgekürzt. Mit st_crs() können die zugewiesenen Koordinatensysteme abgefragt werden.\n\nst_crs(kantone)\n\nCoordinate Reference System:\n  User input: Undefined Cartesian SRS \n  wkt:\nENGCRS[\"Undefined Cartesian SRS\",\n    EDATUM[\"\"],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"Meter\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"Meter\",1]]]\n\nst_crs(gemeinden)\n\nCoordinate Reference System:\n  User input: Undefined Cartesian SRS \n  wkt:\nENGCRS[\"Undefined Cartesian SRS\",\n    EDATUM[\"\"],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"Meter\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"Meter\",1]]]\n\n\nLeider sind in unserem Fall keine Koordinatensysteme zugewiesen. Mit etwas Erfahrung kann man das Koordinatensystem aber erraten, so viele kommen nämlich gar nicht in Frage. Am häufigsten trifft man hierzulande eines der drei folgenden Koordinatensysteme an:\n\nCH1903 LV03: das alte Koordinatensystem der Schweiz\nCH1903+ LV95: das neue Koordinatensystem der Schweiz\nWGS84: ein häufig genutztes weltumspannendes geodätisches Koordinatensystem, sprich die Koordinaten werden in Länge und Breite angegeben (Lat/Lon).\n\nNun gilt es, anhand der Koordinaten die in der Spalte geometry ersichtlich sind das korrekte Koordinatensystem festzustellen. Wenn man sich auf epsg.io/map die Schweiz anschaut, kann man die Koordinaten in verschiedenen Koordinatensystem betrachten.\nBedienungshinweise:\n \n\nKoordinanten (des Fadenkreuzes) werden im ausgewählten Koordinatensystem dargestellt\n\n\n \n\nDas Koordinatensystem, in welchem die Koordinaten dargestellt werden sollen, kann mit “Change” angepasst werden\n\n\n \n\nFür Enthusiasten: Schau Dir die Schweiz in verschiedenen Koordinatensystemen an, in dem Du auf “Reproject Map” klickst\n\n\nWenn man diese Koordinaten mit den Koordinaten unserer Datensätze vergleicht, dann ist schnell klar, dass es sich beim Datensatz kantone um das Koordinatensystem WGS84 handelt und bei gemeinden das Koordinatensystem CH1903+ LV95. Diese Koordinatensyteme weisen wir nun mit st_set_crs() und dem entsprechenden EPSG-Code (siehe die jeweiligen Links) zu.\n\nkantone <- st_set_crs(kantone, 4326)\ngemeinden <- st_set_crs(gemeinden, 2056)\n\n# zuweisen mit st_set_crs(), abfragen mit st_crs()\nst_crs(kantone)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n\n\nAuch wenn das CRS der Datensätze bekannt ist, nutzt ggplot immer noch EPSG 4326 um die Achsen zu beschriften. Wenn das stört, kann man coord_sf(datum = 2056) in einem weiteren Layer spezifizieren. Oder aber man blendet die Achsenbeschriftung mit theme_void() komplett aus. Versuche beide Varianten.\n\nggplot() + \n  geom_sf(data = kantone) +\n  coord_sf(datum = 2056)\n\n\n\n\nAbbildung 40.3: Generierter Plot"
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-3-koordinatensyteme-transformieren",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-3-koordinatensyteme-transformieren",
    "title": "Rauman 1: Übung A",
    "section": "Aufgabe 3: Koordinatensyteme transformieren",
    "text": "Aufgabe 3: Koordinatensyteme transformieren\nIn der vorherigen Übung haben wir das bestehende Koordinatensystem zugewiesen. Dabei haben wir die bestehenden Koordinaten (in der Spalte geom) nicht manipuliert. Ganz anders ist eine Transformation der Daten von einem Koordinatensystem in das andere. Bei einer Transformation werden die Koordinaten in das neue Koordinatensystem umgerechnet und somit manipuliert. Aus praktischen Gründen wollen  wir all unsere Daten ins neue Schweizer Koordinatensystem CH1903+ LV95 transfomieren. Transformiere den Datensatz kantone mit st_transform()in CH1903+ LV95, nutze dafür den korrekten EPSG-Code.\nVor der Transformation (betrachte die Attribute Bounding box sowie Geodetic CRS):\n\nkantone\n\nSimple feature collection with 51 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 5.955902 ymin: 45.81796 xmax: 10.49217 ymax: 47.80845\nGeodetic CRS:  WGS 84\n# A tibble: 51 × 7\n   NAME       KANTON…¹ SEE_F…² KANTO…³ KT_TEIL EINWO…⁴                      geom\n * <chr>         <int>   <dbl>   <dbl> <chr>     <int>             <POLYGON [°]>\n 1 Graubünden       18      NA  710530 0        197888 ((8.877053 46.81291, 8.8…\n 2 Bern              2   11897  595952 1       1031126 ((7.153522 46.98628, 7.1…\n 3 Valais           23    1060  522463 0        341463 ((8.477625 46.52762, 8.4…\n 4 Vaud             22   39097  321201 1        793129 ((6.779825 46.85296, 6.7…\n 5 Ticino           21    7147  281216 0        353709 ((8.477625 46.52762, 8.4…\n 6 St. Gallen       17    7720  202820 1        504686 ((8.808609 47.22009, 8.7…\n 7 Zürich            1    6811  172894 0       1504346 ((8.410084 47.24837, 8.4…\n 8 Fribourg         10    7818  167142 1        315074 ((7.040344 46.97952, 7.0…\n 9 Luzern            3    6438  149352 0        406506 ((8.468167 46.99652, 8.4…\n10 Aargau           19     870  140380 1        670988 ((8.410084 47.24837, 8.4…\n# … with 41 more rows, and abbreviated variable names ¹​KANTONSNUM, ²​SEE_FLAECH,\n#   ³​KANTONSFLA, ⁴​EINWOHNERZ\n\n\n\nkantone <- st_transform(kantone, 2056)\n\nNach der Transformation (betrachte die Attribute Bounding box sowie Projected CRS):\n\nkantone\n\nSimple feature collection with 51 features and 6 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 5.955902 ymin: 45.81796 xmax: 10.49217 ymax: 47.80845\nGeodetic CRS:  WGS 84\n# A tibble: 51 × 7\n   NAME       KANTON…¹ SEE_F…² KANTO…³ KT_TEIL EINWO…⁴                      geom\n * <chr>         <int>   <dbl>   <dbl> <chr>     <int>             <POLYGON [°]>\n 1 Graubünden       18      NA  710530 0        197888 ((8.877053 46.81291, 8.8…\n 2 Bern              2   11897  595952 1       1031126 ((7.153522 46.98628, 7.1…\n 3 Valais           23    1060  522463 0        341463 ((8.477625 46.52762, 8.4…\n 4 Vaud             22   39097  321201 1        793129 ((6.779825 46.85296, 6.7…\n 5 Ticino           21    7147  281216 0        353709 ((8.477625 46.52762, 8.4…\n 6 St. Gallen       17    7720  202820 1        504686 ((8.808609 47.22009, 8.7…\n 7 Zürich            1    6811  172894 0       1504346 ((8.410084 47.24837, 8.4…\n 8 Fribourg         10    7818  167142 1        315074 ((7.040344 46.97952, 7.0…\n 9 Luzern            3    6438  149352 0        406506 ((8.468167 46.99652, 8.4…\n10 Aargau           19     870  140380 1        670988 ((8.410084 47.24837, 8.4…\n# … with 41 more rows, and abbreviated variable names ¹​KANTONSNUM, ²​SEE_FLAECH,\n#   ³​KANTONSFLA, ⁴​EINWOHNERZ"
  },
  {
    "objectID": "rauman/Rauman1_Uebung_A.html#aufgabe-4-chloroplethen-karte",
    "href": "rauman/Rauman1_Uebung_A.html#aufgabe-4-chloroplethen-karte",
    "title": "Rauman 1: Übung A",
    "section": "Aufgabe 4: Chloroplethen Karte",
    "text": "Aufgabe 4: Chloroplethen Karte\nNun wollen wir die Gemeinden respektive die Kantone nach ihrer Einwohnerzahl einfärben. Dafür verwenden wir wie gewohnt die Methode aes(fill = ...) von ggplot.\nTips:\n\num die scientific notation (z.B. 3e+03) zu verhindern, könnt ihr den Befehl options(scipen = 999) ausführen\num die Darstellung der Gemeinde- (bzw. Kantons-) Grenzen zu verhindern, könnt ihr im entsprechenden Layer color = NA setzen. Alternativ könnt ihr die Linienbreite mit size = verändern.\n\n\nggplot(kantone, aes(fill = EINWOHNERZ/1e6)) +\n  geom_sf(color= \"white\",size = .05) +\n  labs(title = \"Anzahl Einwohner pro Kanton\",\n       subtitle = \"in Millionen\") +\n  theme(legend.position = \"bottom\",\n        legend.title = element_blank(),\n        legend.key.width = unit(0.15, 'npc'),\n        legend.key.height = unit(0.02, 'npc'),\n        legend.text = element_text(angle = 90,hjust = 0.5),\n        legend.text.align = 1)\n\nggplot(gemeinden,aes(fill = EINWOHNERZ/1e6)) +\n  geom_sf(color= \"white\",size = .05) +\n  scale_fill_continuous(\"Einwohner (in Mio)\") +\n  labs(title = \"Anzahl Einwohner pro Gemeinde\",\n       subtitle = \"in Millionen\") +\n  theme(legend.position = \"bottom\",\n        legend.title = element_blank(),\n        legend.key.width = unit(0.15, 'npc'),\n        legend.key.height = unit(0.02, 'npc'),\n        legend.text = element_text(angle = 90,hjust = 0.5),\n        legend.text.align = 1)\n\n\n\n\nAbbildung 40.4: Der Vergleich dieser beiden Darstellungen veranschaulicht die MAUP Problematik sehr deutlich\n\n\n\n\n\n\n\nAbbildung 40.5: Der Vergleich dieser beiden Darstellungen veranschaulicht die MAUP Problematik sehr deutlich"
  },
  {
    "objectID": "rauman/Rauman1_Uebung_B.html",
    "href": "rauman/Rauman1_Uebung_B.html",
    "title": "Rauman 1: Übung B",
    "section": "",
    "text": "Für die kommende Übung arbeiten wir mit nachstehendem Datensatz. Lade diesen Herunter und importiere ihn in R.\nZudem brauchen wir die folgenden libraries:\n\nlibrary(dplyr)\nlibrary(sf)\nlibrary(ggplot2)\n\n\nAufgabe 1: Geopackage “Layers”\nAllenfalls ist euch beim Importieren des Geopackage gruental.pgkg folgende Warnmeldung aufgefallen:\nWarning message:\nIn evalq((function (..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,  :\n  automatically selected the first layer in a data source containing more than one.\nDiese Warnmeldung weist darauf hin, dass das Geopackage gruental.gpkg mehrere Layers (rep. Datensätze) enthält und nur der erste Layer importiert wurde. Bringe mit dem Befehl st_layers die Layer Namen in Erfahrung und nutze diese im Anschluss in st_read (als Argument layer =) um die layers einzeln zu importieren und in variablen zu speichern (zB in als Variable wiesen und baeume).\n\n\nAufgabe 2: Datensätze erkunden\nNimm dir etwas Zeit und erkunde die beiden Datensätze. Nutze dafür auch die Visualisierungsmöglichkeiten von ggplot (insbesondere geom_sf).\n\n\n\n\n\nAbbildung 41.1: Beispielsweise kannst du die Daten in dieser Weise visualisieren.\n\n\n\n\n\n\nAufgabe 3: Spatial Join mit Punkten\nWir wollen nun für jeden Baum wissen, ob er sich in einer Wiese befindet oder nicht. Dazu nutzen wir die GIS-Technik Spatial Join, die in der Vorlesung beschrieben wurde. In sf können wir Spatial Joins mit der Funktion st_join durchführen, dabei gibt es nur left sowie inner-Joins (vgl. PrePro 1 & 2). So müssen die Punkte “Links”, also an erste Stelle aufgeführt werden, da wir ja Attribute an die Punkte anheften wollen.\nBeachte, dass der Output eine neue Spalte flaechen_typ aufweist. Diese ist leer (NA) wenn sich der entsprechende Baum nicht in einer Wiese befindet. Wie viele Bäume befinden sich in einer Wiese, wie viele nicht?\n\n\n\n\n\nAufgabe 4: Spatial Join mit Flächen\nAnalog der Vorlesung wollen wir nun in Erfahrung bringen, wie hoch der Wiesen-Anteil im Umkreis von 20m um jeden Baum ist. Dazu sind folgende Schritte nötig:\n\nAls erster Schritt müssen wir jeden Baum mit einem 20m Puffer verstehen. Nutze dazu st_buffer um speichere den Output als baeume_20m. Schau dir baeume_20m nun genau an. Um welchen Geometrietyp handelt es sich dabei nun?\nBerechnen nun die Schnittmenge aus baeume_20m und wiesen mit der Funktion st_intersection und speichere den Output als baeume_wiesen. Exploriere nun baeume_wiesen, auch mit ggplot(). Was ist passiert? Überprüfe die Anzahl Zeilen pro Datensatz. Haben die sich verändert? Wenn ja, warum?\nBerechnen nun die Flächengrösse pro Geometrie mit der Funktion st_area(). Speichere den Output in einer neuen Spalte von baeume_wiesen (z.B. mit dem Namen wiesen_flaeche). Tipp: Konvertiere den Output aus st_area einen nummerischen Vektor mit as.numeric().\nBerechne nun aus wiesen_flaeche den wiesen_anteil. Tipp: 100% ist die Kreisfläche aus \\(r^2\\times \\pi\\), wobei in unserem Fall \\(r = 20\\) entspricht.\n\nUm die berechneten Werte in den Datensatz baeume zu überführen braucht es noch folgende Schritte:\n\nKonvertiere baeume_wiesen in eine data.frame mit st_drop_geometry und speichere diese als baeume_wiesen_df\nNutze die Spalte baum_id in baeume_wiesen_df um den berechneten wiesen_anteil in den Datenatz baeume zu überführen. Tipp: Nutze dafür einen left_join\nErsetze alle NA Werte in der Spalte wiesen_anteil mit 0.\n\n\n\n\n\n\n\n\n\n\nAbbildung 41.2: Nach dieser Übung kannst du das Resultat optional in dieser Weise visualisieren."
  },
  {
    "objectID": "rauman/Rauman2_Uebung_A.html#aufgabe-1",
    "href": "rauman/Rauman2_Uebung_A.html#aufgabe-1",
    "title": "Rauman 2: Übung A",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\nFür die heutige Übung benötigen wir nachstehende Datensätze. Lade diese herunter und importiere sie in R. Prüfe, ob das CRS korrekt gesetzt wurde, setze es wenn nötig. Mache dich mit den Daten vertraut (visualieren, durchscrollen usw).\n\n\n\n\nDer Datensatz rotmilan.gpkg stammt aus einem grösseren Forschungsprojekt der Vogelwarte Sempach Mechanismen der Populationsdynamik beim Rotmilan. Der Datensatz wurde über die Plattform movebank zur Verfügung gestellt. Es handelt sich dabei um ein einzelnes Individuum, welches seit 2017 mit einem Sender versehen ist und über ganz Mitteleuropa zieht. Wir arbeiten in dieser Übung nur mit denjenigen Datenpunkten, die in der Schweiz erfasst wurden. Wer den ganzen Datensatz analysieren möchte, kann sich diesen über den Movebank-Link runterladen.\nDer Datensatz luftqualitaet.gpkg beinhaltet Messungen von Stickstoffdioxid \\(NO_2\\) aus dem Jahr 2015 für 97 Messstellen in der Schweiz. Stickstoffdioxid entstehen beim Verbrennen von Brenn- und Treibstoffen, insbesondere bei hohen Verbrennungstemperaturen, wobei der Strassenverkehr als Hauptquelle gilt. Mehr Informationen dazu findet ihr hier.\nEbenfalls benötigt ihr den Datensatz schweiz.gpkg\n\n\n\n\n\n\n\n\n\nAbbildung 42.1: Eine solche Visualisierung zeigt dir beispielsweise die räumliche Ausdehnung der Datenpunkte"
  },
  {
    "objectID": "rauman/Rauman2_Uebung_A.html#aufgabe-2",
    "href": "rauman/Rauman2_Uebung_A.html#aufgabe-2",
    "title": "Rauman 2: Übung A",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nAls erstes berechnen wir die G-Function für die Rotmilanpositionen:\n\nSchritt 1\nMit st_distance() können Distanzen zwischen zwei sf Datensätze berechnet werden. Wird nur ein Datensatz angegeben, wird eine Kreuzmatrix erstellt wo die Distanzen zwischen allen Features zu allen anderen Features dargestellt werden. Wir nützen diese Funktion zur Berechnung der nächsten Nachbarn.\n\nrotmilan_distanzmatrix <- st_distance(rotmilan)\n\nnrow(rotmilan_distanzmatrix)\n\n[1] 2305\n\nncol(rotmilan_distanzmatrix)\n\n[1] 2305\n\n# zeige die ersten 6 Zeilen und Spalten der Matrix\n# jeder Wert ist 2x vorhanden (vergleiche Wert [2,1] mit [1,2])\n# die Diagonale ist die Distanz zu sich selber (gleich 0)\nrotmilan_distanzmatrix[1:6,1:6] \n\nUnits: [m]\n         1         2         3        4        5        6\n1     0.00 14362.044 20272.492 35596.07 52519.10 64156.67\n2 14362.04     0.000  8149.486 29752.74 44809.10 53775.25\n3 20272.49  8149.486     0.000 22580.04 36848.93 45662.55\n4 35596.07 29752.737 22580.037     0.00 17223.26 31439.57\n5 52519.10 44809.096 36848.926 17223.26     0.00 16499.19\n6 64156.67 53775.250 45662.554 31439.57 16499.19     0.00\n\n\n\n\nSchritt 2\nNun wollen wir wissen, wie gross die kürzeste Distanz von jedem Punkt zu seinem nächsten Nachbarn beträgt, also die kürzeste Distanz pro Zeile. Bevor wir diese ermitteln müssen wir die diagonalen Werte noch entfernen, denn diese stellen ja jeweils die Distanz zu sich selber dar und sind immer 0. Danach kann mit apply() eine Funktion (FUN = min) über die Zeilen (MARGIN = 1) einer Matrix (X = rotmilan_distanzmatrix) gerechnet werden. Zusätzlich müssen wir noch na.rm = TRUE setzen, damit NA Werte von der Berechnung ausgeschlossen werden. Das Resultat ist ein Vektor mit gleich vielen Werten wie Zeilen in der Matrix.\n\ndiag(rotmilan_distanzmatrix) <- NA # entfernt alle diagonalen Werte\n\nrotmilan_distanzmatrix[1:6,1:6] \n\nUnits: [m]\n         1         2         3        4        5        6\n1       NA 14362.044 20272.492 35596.07 52519.10 64156.67\n2 14362.04        NA  8149.486 29752.74 44809.10 53775.25\n3 20272.49  8149.486        NA 22580.04 36848.93 45662.55\n4 35596.07 29752.737 22580.037       NA 17223.26 31439.57\n5 52519.10 44809.096 36848.926 17223.26       NA 16499.19\n6 64156.67 53775.250 45662.554 31439.57 16499.19       NA\n\nrotmilan_mindist <- apply(rotmilan_distanzmatrix,1,min, na.rm = TRUE)\n\n\n\nSchritt 3\nNun müssen wir die Distanzen nach ihrer Grösse sortieren\n\nrotmilan_mindist <- sort(rotmilan_mindist) \n\n\n\nSchritt 4\nJetzt berechnen wir die kummulierte Häufigkeit von jeder Distanz berechnen. Die kummulierte Häufikgeit vom ersten Wert ist 1 (der Index des ersten Wertes) dividiert durch die Anzahl Werte insgesamt. Mit seq_along erhalten wir die Indizes aller Werte, mit lenth die Anzahl Werte insgesamt.\n\nkumm_haeufgikeit <- seq_along(rotmilan_mindist) / length(rotmilan_mindist)\n\n\n\nSchritt 5\nNun wollen wir die kumulierte Häufigkeit der Werte in einer Verteilungsfunktion (engl: Empirical Cumulative Distribution Function, ECDF) darstellen. Dafür müssen wir die beiden Vektoren zuerst noch in einen Dataframe packen, damit ggplot damit klar kommt.\n\nrotmilan_mindist_df <- data.frame(distanzen = rotmilan_mindist,\n                                  kumm_haeufgikeit = kumm_haeufgikeit)\n\np <- ggplot() + \n  geom_line(data = rotmilan_mindist_df, aes(distanzen, kumm_haeufgikeit)) +\n  labs(x = \"Distanz (Meter)\", y = \"Häufigkeit (kummuliert)\")\n\np\n\n\n\n\nAbbildung 42.2: Generierter Plot\n\n\n\n\nLesehilfe:\n\n\n\n\n\nAbbildung 42.3: Generierter Plot"
  },
  {
    "objectID": "rauman/Rauman2_Uebung_A.html#aufgabe-3",
    "href": "rauman/Rauman2_Uebung_A.html#aufgabe-3",
    "title": "Rauman 2: Übung A",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nFühre nun die gleichen Schritte mit luftqualitaet durch und vergleiche die ECDF-Plots.\n\n\n\n\n\nAbbildung 42.4: Generierter Plot"
  },
  {
    "objectID": "rauman/Rauman2_Uebung_B.html",
    "href": "rauman/Rauman2_Uebung_B.html",
    "title": "Rauman 2: Übung B",
    "section": "",
    "text": "In dieser Übung geht es darum, zwei verschiedene Interpolationsverfahren in R umzusetzen. Im ersten Interpolationsverfahren verwenden wir die inverse distance weighted interpolation, später verwenden wir die nearest neighbour methode. Dazu braucht ihr die folgenden Packages:\n\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nlibrary(gstat) # <- ggf. installieren!\n\nWeiter benötigt ihr die nachstehenden Datensätze:\nluftqualitaet <- read_sf(\"datasets/rauman/luftqualitaet.gpkg\")\nschweiz <- read_sf(\"datasets/rauman/schweiz.gpkg\") \nDie Library gstat bietet verschiedene Möglichkeiten, Datenpunkte zu interpolieren, unter anderem auch die inverse distance weighted Methode. Leider ist das Package noch nicht so benutzerfreundlich wie sf: Das Package wird aber aktuell überarbeitet und in mittlerer Zukunft sollte es ebenso einfach zugänglich sein. Damit Ihr Euch nicht mit den Eigenheiten dieser Library umschlagen müsst, haben wir eine Function vorbereitet, die Euch die Verwendung der IDW-Interpolation erleichtern soll.\nWir nehmen Euch damit etwas Komplexität weg und liefern Euch ein pfannenfertiges Werkzeug. Das hat auch Nachteile und wir ermutigen alle, die dafür Kapazität haben, unsere Function eingehend zu studieren und allenfalls ganz auf die Function zu verzichten und stattdessen direkt gstat zu verwenden. Wenn ihr mit unserer Function arbeiten möchtet, müsst ihr den unten stehenden Code in euer Skript kopieren und ausführen.\n\nmy_idw <- function(groundtruth,column,cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){\n  library(gstat)\n  library(sf)\n  \n  if(is.null(extent)){\n    extent <- groundtruth\n  }\n  \n  samples <- st_make_grid(extent,cellsize,what = \"centers\")\n  my_formula <- formula(paste(column,\"~1\"))\n  idw_sf <- gstat::idw(formula = my_formula,groundtruth, newdata = samples, nmin = 1, nmax = nmax, maxdist = maxdist, idp = idp)\n  \n  idw_matrix <- cbind(as.data.frame(st_coordinates(idw_sf)),pred = st_drop_geometry(idw_sf)[,1])\n  idw_matrix\n}\n\nNun könnt Ihr mit my_idw() den Datensatz luftqualitaet folgendermassen interpolieren.\n\nmy_idw(groundtruth = luftqualitaet,column = \"value\",cellsize = 10000, extent = schweiz)\n\nFolgende Parameter stehen Euch zur Verfügung:\n\nNotwendige Parameter:\n\ngroundtruth: Punktdatensatz mit den Messwerten (sf-Objekt)\ncolumn: Name der Spalte mit den Messwerten (in Anführungs- und Schlusszeichen)\ncellsize: Zellgrösse des output Rasters\n\nOptionale Parameter\n\nnmax: Maximale Anzahl Punkte, die für die Interpolation berücksichtigt werden sollen. Default: Inf (alle Werte im gegebenen Suchradius)\nmaxdist: Suchradius, welcher für die Interpolation verwendet werden soll. Default Inf (alle Werte bis nmax)\nidp: Inverse Distance Power: die Potenz, mit der der Nenner gesteigert werden soll. Default: 2. Werte werden im Kehrwert des Quadrates gewichtet: \\(\\frac{1}{dist^{idp}}\\).\nextent: Gebiet, für welches die Interpolation durchgeführt werden soll. Wenn nichts angegeben wird (Default NULL), wird die Ausdehnung von groundtruth verwendet.\n\nOuput\n\nder Output der Funktion ist eine data.frame mit 3 Spalten:\n\nX, Y Koordinaten der interpolierten Werte\npred: der Interpolierte Wert\n\n\n\nBeim Output handelt sich hier um einen Raster-ähnlichen Datentyp (siehe Vorlesung Spatial DataScience 1). Diesen können wir mit geom_raster mit ggplot visualisieren. Dafür müsst ihr in aes die X und Y Koordinaten angeben, und der interpolierte Wert mit fill einfärben.\n\nAufgabe 1: Raeumliche Interpolation mit IDW\nRechnet so den IDW für die Luftqualitätsmessungen mit verschiedenen Parametern und visualisiert jeweils die Resultate. Experimentiert mit nmax sowie maxdist. Was stellt ihr fest?\nTips: - Was für Distanzen bei maxdist Sinn machen, könnt ihr dem Output aus der G-Funktion (vorherige Übung) entnehmen - Wählt am Anfang eine etwas Konvervative (grosse) cellsize und verringert diesen nur wenn euer Rechner damit gut klar kommt - Da der Output aus der Interpolation im gleichen Koordinatenbezugssystem sind wie schweiz.gpkg kann man diese beiden Datensätze im gleichen ggplot darstellen. Dafür müsst ihr die aesthetics (aes()) für jeden Layer einzeln setzen, und nicht auf der Ebene von ggplot().\n\n\n\n[inverse distance weighted interpolation]\n[inverse distance weighted interpolation]\n[inverse distance weighted interpolation]\n[inverse distance weighted interpolation]\n\n\n\n\n\nAbbildung 43.1: Stickstoffdioxid (NO2) in μg/m3, Interpoliert über die ganze Schweiz mit der Inverse Distance Weighted Methode. Die verschiedenen Plots zeigen die Veränderung der Interpolation bei steigendem IDP-Wert\n\n\n\n\n\n\n\nAufgabe 2: Interpolation mit Nearest Neighbour\nEine weitere einfache Möglichkeit zur Interpolation bietet die Erstellung eines Voronoi-Diagrammes, auch als Thiessen-Polygone oder Dirichlet-Zerlegung bekannt. sf liefert dazu die Funktion st_voronoi(), die einen Punktdatensatz annimmt und eben um die Punkte die Thiessenpolygone konstruiert. Dazu braucht es lediglich einen kleinen Vorverarbeitungsschritt: sf möchte für jedes Feature, also für jede Zeile in unserem Datensatz, ein Voronoidiagramm. Das macht bei uns wenig Sinn, weil jede Zeile nur aus einem Punkt besteht. Deshalb müssen wir vorher luftqualitaet mit st_union() von einem POINT in ein MULTIPOINT Objekt konvertieren, in welchem alle Punkte in einer Zeile zusammengefasst sind.\n\nluftqualitaet_union <- st_union(luftqualitaet)\n\nthiessenpolygone <- st_voronoi(luftqualitaet_union)\n\n\n\n\n\n\nAbbildung 43.2: Generierter Plot\n\n\n\n\nst_voronoi hat die Thiessenpolygone etwas weiter gezogen als wir sie wollen. Dies ist allerdings eine schöne Illustration der Randeffekte von Thiessenpolygonen, die zum Rand hin (wo es immer weniger Punkte hat) sehr gross werden können. Wir können die Polygone auf die Ausdehnung der Schweiz mit st_intersection() clippen. Auch hier braucht es zwei kleine Vorverarbeitungsschritte:\n\nwie vorher müssen wir die einzelnen Kantons-Polygone miteinander verschmelzen. Dies erreichen wir mit st_union(). Wir speichern den Output als schweiz, was als Resultat ein einzelnes Polygon der Schweizergrenze retourniert.\nfür die Thiessen-Polygone machen wir genau das Umgekehrte: st_voronoi() liefert ein einzelnes Feature mit allen Polygonen, welches sich nicht gerne clippen lässt. Mit st_cast() wird die GEOMETRYCOLLECTION in Einzelpolygone aufgeteilt.\n\n\nthiessenpolygone <- st_cast(thiessenpolygone)\n\nthiessenpolygone_clip <- st_intersection(thiessenpolygone,schweiz)\n\n\n\n\n\n\nAbbildung 43.3: Generierter Plot\n\n\n\n\nJetzt müssen wir nur noch den jeweiligen Wert für jedes Polygon ermitteln. Dies erreichen wir wieder durch st_join. Auch hier ist noch ein kleiner Vorverarbeitungsschritt nötig: Wir konvertieren das sfc Objekt (nur Geometrien) in ein sf Objekt (Geometrien mit Attributtabelle).\n\nthiessenpolygone_clip <- st_as_sf(thiessenpolygone_clip)\nthiessenpolygone_clip <- st_join(thiessenpolygone_clip,luftqualitaet)\n\n\nggplot() + \n  geom_sf(data = schweiz) +\n  geom_sf(data = thiessenpolygone_clip, aes(fill = value)) +\n  geom_sf(data = luftqualitaet) +\n  scale_fill_gradientn(colours = rev(RColorBrewer::brewer.pal(11,\"RdYlBu\"))) +\n  theme_void() +\n  theme(legend.position = \"bottom\", legend.title = element_blank(),\n      legend.key.width = unit(0.10, 'npc'),\n      legend.key.height = unit(0.02, 'npc'))\n\n\n\n\nAbbildung 43.4: Stickstoffdioxid (NO2) in μg/m3, Interpoliert über die ganze Schweiz nach der Nearest Neighbour Methode."
  },
  {
    "objectID": "rauman/Rauman2_Uebung_C.html",
    "href": "rauman/Rauman2_Uebung_C.html",
    "title": "Rauman 2: Übung C",
    "section": "",
    "text": "Nun wollen wir für die bereits verwendeten Datensätze luftqualitaet.gpkg und rotmilan.gpkg Dichteschätzungen durchführen. Ladet dafür die notwendigen Package und ladet bei Bedarf die Datensätze herunter."
  },
  {
    "objectID": "rauman/Rauman2_Uebung_C.html#aufgabe-1-rotmilan-bewegungsdaten-visualisieren",
    "href": "rauman/Rauman2_Uebung_C.html#aufgabe-1-rotmilan-bewegungsdaten-visualisieren",
    "title": "Rauman 2: Übung C",
    "section": "Aufgabe 1: Rotmilan Bewegungsdaten visualisieren",
    "text": "Aufgabe 1: Rotmilan Bewegungsdaten visualisieren\nDie erste Frage, die bei solchen Bewegungsstudien typischerweise gestellt wird, lautet: Wo hält sich das Tier hauptsächlich auf? Um diese Frage zu beantworten, kann man als erstes einfach die Datenpunkte in einer einfachen Karte visualisieren. Erstellt zur Beantwortung dieser Frage nachstehende Karte.\n\n\n\n\n\nAbbildung 44.1: Generierter Plot"
  },
  {
    "objectID": "rauman/Rauman2_Uebung_C.html#aufgabe-2-kernel-density-estimation-berechnen",
    "href": "rauman/Rauman2_Uebung_C.html#aufgabe-2-kernel-density-estimation-berechnen",
    "title": "Rauman 2: Übung C",
    "section": "Aufgabe 2: Kernel Density Estimation berechnen",
    "text": "Aufgabe 2: Kernel Density Estimation berechnen\nIn einer ersten Annäherung funktioniert dies, doch wir sehen hier ein klassisches Problem des “Overplotting”. Das heisst, dass wir durch die Überlagerung vieler Punkte in den dichten Regionen nicht abschätzen können, wie viele Punkte dort effektiv liegen und ggf. übereinander liegen. Es gibt hier verschiedene Möglichkeiten, die Punktdichte klarer zu visualisieren. Eine unter Biologen sehr beliebte Methode ist die Dichteverteilung mit einer Kernel Density Estimation (KDE). Dies v.a. darum, weil mit KDE das Habitat (Streifgebiet) eines Tieres abgeschätzt werden kann. Homeranges werden oft mit KDE95 und Core Areas mit KDE50 definiert (Fleming C., Calabrese J., 2016).\nÄhnlich wie beim IDW sind auch die verfügbaren KDE-Funktionen in R etwas kompliziert in der Handhabung. Damit wir dieses Verfahren aber dennoch auf unsere Rotmilan-Daten anwenden können, haben wir eine eigene KDE-Funktion erstellt, die wir Euch zur Verfügung stellen.\nHier gilt das gleiche wie schon bei der Funktion my_idw(): Wir ermutigen alle, die dafür Kapazität haben, unsere Function eingehend zu studieren und allenfalls ganz auf die Funktion zu verzichten und stattdessen direkt MASS zu verwenden. Wenn ihr mit unserer Funktion arbeiten möchtet, müsst ihr den unten stehenden Code in euer Skript kopieren und ausführen.\n\nmy_kde <- function(points,cellsize, bandwith, extent = NULL){\n  library(MASS)\n  library(sf)\n  library(tidyr)\n  if(is.null(extent)){\n    extent_vec <- st_bbox(points)[c(1,3,2,4)]\n  } else{\n    extent_vec <- st_bbox(extent)[c(1,3,2,4)]\n  }\n  \n  n_y <- ceiling((extent_vec[4]-extent_vec[3])/cellsize)\n  n_x <- ceiling((extent_vec[2]-extent_vec[1])/cellsize)\n  \n  extent_vec[2] <- extent_vec[1]+(n_x*cellsize)-cellsize\n  extent_vec[4] <- extent_vec[3]+(n_y*cellsize)-cellsize\n\n  coords <- st_coordinates(points)\n  mat <- kde2d(coords[,1],coords[,2],h = bandwith,n = c(n_x,n_y),lims = extent_vec)\n\n  mydf <- as.data.frame(mat[[3]])\n  \n  colnames(mydf) <- mat[[2]]\n  mydf$X <- mat[[1]]\n  \n  pivot_longer(mydf, -X,names_to = \"Y\",names_transform = list(Y = as.numeric))\n}\n\nDie Parameter der Funktion sollten relativ klar sein:\n\npoints: Ein Punktdatensatz aus der Class sf\ncellsize: Die Zellgrösse des output-Rasters\nbandwith: Der Suchradius für die Dichteberechnung\nextent (optional): Der Perimeter, in dem die Dichteverteilung berechnet werden soll. Wenn kein Perimeter angegeben wird, wird die “bounding box” von points genutzt.\n\nWenn wir nun mit my_kde() die Dichteverteilung berechnen, erhalten wir ein data.frame mit X und Y Koordinaten sowie eine Spalte value zurück. Nutzt diese drei Spalten mit geom_raster() um eure Daten mit ggplot zu visualisieren (aes(x = X, y = Y, fill = value).\n\nrotmilan_kde <- my_kde(points = rotmilan,cellsize = 1000, bandwith = 10000, extent = schweiz)\n\nrotmilan_kde\n\n# A tibble: 77,129 × 3\n          X        Y value\n      <dbl>    <dbl> <dbl>\n 1 2485410. 1075268.     0\n 2 2485410. 1076268.     0\n 3 2485410. 1077268.     0\n 4 2485410. 1078268.     0\n 5 2485410. 1079268.     0\n 6 2485410. 1080268.     0\n 7 2485410. 1081268.     0\n 8 2485410. 1082268.     0\n 9 2485410. 1083268.     0\n10 2485410. 1084268.     0\n# … with 77,119 more rows\n\n\n\n\n\n\n\nAbbildung 44.2: Generierter Plot\n\n\n\n\nDie Kernel Density Estimation ist nun sehr stark von den tiefen Werten dominiert, da die Dichte in den meisten Zellen unseres Untersuchungsgebiets nahe bei Null liegt. Wie erwähnt sind Wissenschaftler häufig nur an den höchsten 95% der Werte interessiert. Folge folgende Schritte um das Resultat etwas besser zu verantschaulichen:\n\nBerechne die 95. Perzentile aller Werte mit der Funktion quantile und benne diesen q25\nErstelle eine neue Spalte in rotmilan_kde, wo alle Werte tiefer als q25 NA entsprechen\n(Optional): Transformiere die Werte mit log10, um einen differenzierteren Farbverlauf zu erhalten\n\nWir können die tiefen Werte ausblenden, indem wir nur die höchsten 5% der Werte darstellen. Dafür berechnen wir mit raster::quantile die 95. Perzentile aller Werte und nutzen diesen Wert als “Grenzwert” für die Darstellung.\nZusätzlich hilft eine logarithmische Transformation der Werte, die Farbskala etwas sichtbarer zu machen.\n\n\n\n\n\nAbbildung 44.3: Generierter Plot"
  },
  {
    "objectID": "rauman/Rauman2_Uebung_C.html#aufgabe-3-dichteverteilung-mit-thiessen-polygonen",
    "href": "rauman/Rauman2_Uebung_C.html#aufgabe-3-dichteverteilung-mit-thiessen-polygonen",
    "title": "Rauman 2: Übung C",
    "section": "Aufgabe 3: Dichteverteilung mit Thiessen Polygonen",
    "text": "Aufgabe 3: Dichteverteilung mit Thiessen Polygonen\nThiessen Polygone bieten eine spannende Alternative um Unterschiede in der Dichteverteilung von Punktdatensätzen zu visualisieren. Wir wollen dies nun ausprobieren und konstruieren zum Schluss die Thiessenpolygone für die Rotmilan-Daten für das Untersuchungsgebiet Schweiz. Nutze die Anleitung für das Erstellen von Thiessenpolygonen aus der Übung B um Thiessenpolygone für die Rotmilanpositionen zu erstellen.\n\n\n\n\n\n\n\n\nAbbildung 44.4: Wenn wir jetzt die Thiessenpolygone (ohne Punkte) darstellen, wird deutlicher, wie die Dichteverteilung im Innern des Clusters aussieht."
  },
  {
    "objectID": "rauman/Rauman3_Uebung_A.html",
    "href": "rauman/Rauman3_Uebung_A.html",
    "title": "Rauman 3: Übung",
    "section": "",
    "text": "Für die Berechnung von Morans \\(I\\) benutzen wir kein externes Package, sondern erarbeiten uns alles selber, basierend auf der Formel von Moran’s \\(I\\):\n\\[I = \\frac{n}{\\sum_{i=1}^n (y_i - \\bar{y})^2} \\times \\frac{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}(y_i - \\bar{y})(y_j - \\bar{y})}{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}}\\]\nDiese sieht sehr beeindruckend aus, aber wenn wir die Formel in ihre Einzelbestandteile aufteilen, sehen wir, dass diese in sich gar nicht so komplex sind.\nAls erster Schritt müssen wir die notwendigen Libraries und Geodaten laden:"
  },
  {
    "objectID": "rauman/Rauman3_Uebung_A.html#aufgabe-1-herleitung-der-formel",
    "href": "rauman/Rauman3_Uebung_A.html#aufgabe-1-herleitung-der-formel",
    "title": "Rauman 3: Übung",
    "section": "Aufgabe 1: Herleitung der Formel",
    "text": "Aufgabe 1: Herleitung der Formel\nIn der ersten Übung wollen wir Moran’s \\(I\\) für eine gegebene Choroplethenkarte nachrechnen. Dazu nehmen wir die Formel für Moran’s \\(I\\) und zerlegen sie in Einzelteile, die wir dann Schritt für Schritt für unsere Daten berechnen. So teilen wir ein vermeintlich komplexes Problem in überschaubare Einzelteile. Dieses Vorgehen illustriert ausserdem sehr schön ein generelles Data Science Prinzip. Divide and Conquer - Teile und Herrsche: Teile ein komplexes Problem in kleinere, beherrschbare Unterprobleme. Wir beginnen mit dem ersten Bruch und berechnen dabei zuerst den Zähler, dann dem Nenner. So können wir den Bruch auflösen und uns danach dem zweiten Bruch zuwenden:\n\\[I = \\frac{n}{\\sum_{i=1}^n (y_i - \\bar{y})^2} \\times \\frac{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}(y_i - \\bar{y})(y_j - \\bar{y})}{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}}\\]\n\nBruch 1\nWidmen wir uns dem ersten Bruch:\n\\[\\frac{n}{\\sum_{i=1}^n (y_i - \\bar{y})^2}\\]\n\nZähler (von Bruch 1)\nBeginnen wir mit dem Zähler, \\(n\\). Dies ist lediglich die Anzahl Messwerte in unserem Datensatz, also die Anzahl Kantone.\n\nn <- nrow(zweitwohnung_kanton)\nn\n## [1] 26\n\n\n\nNenner (von Bruch 1)\nDer Nenner des ersten Bruches (\\({\\sum_{i=1}^n (y_i - \\bar{y})^2}\\)) ist sehr ähnlich der Berechnung der Varianz:\n\nBerechne den Durchschnitt aller Messwerte (\\(\\bar{y}\\))\nBerechne für jeden Messwert die Differenz zum Durchschnitt (\\(y_i - \\bar{y}\\))\nQuadriere diese Werte \\((y_i - \\bar{y})^2\\)\nSummiere die Quadrierten Werte \\(\\sum_{i=1}^n\\)\n\nAlso berechnen wir zuerst diese Differenzwerte (Messwert minus Mittelwert):\n\n# Die Werte aller Kantone:\ny <- zweitwohnung_kanton$ja_in_percent\n\n# Der Durchschnittswert aller Kantone\nybar <- mean(y, na.rm = TRUE)\n\n# von jedem Wert den Durchschnittswert abziehen:\ndy <- y - ybar\n\nWelche dieser Zwischenresultate sind Einzelwerte und welche Vektoren? Nun quadrieren wir die Differenzen:\n\ndy_2 <- dy^2\n\nund summieren die Differenzen:\n\ndy_sum <- sum(dy_2, na.rm = TRUE)\n\n\n\nAuflösung (Bruch 1)\nBeschliessen wir die Bearbeitung des ersten Bruchs indem wir den Zähler durch den Nennen dividieren: n durch dy_sum.\n\nvr <- n/dy_sum\n\n\n\n\nBruch 2\nWenden wir uns nun also dem Bruches der Formel zu.\n\\[\\frac{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}(y_i - \\bar{y})(y_j - \\bar{y})}{\\sum_{i=1}^n \\sum_{j=1}^n w_{ij}}\\]\nHier berechnen wir die Summe aller Gewichte sowie die gewichteten Covarianzen. Wir betrachten immer Messwertpaare, sprich paarweise Vergleiche zweier Raumeinheiten (hier Kantone). Deshalb haben die zwei Summenzeichen die beiden unterschiedlichen Laufvariablen (\\(i\\) und \\(j\\)). Solche paarweise Vergleiche von Werten mit allen anderen Werten können wir elegant mit Kreuzmatrizen abbilden. In der Kreuzmatrix vergleichen wir jeden Messwert mit allen anderen Messwerten. Dabei gibt es zwei Kreuzmatrizen: (\\(w_{ij}\\) ist die erste Kreuzmatrix, \\((y_i - \\bar{y})(y_j - \\bar{y})\\) ist die zweite Kreuzmatrix).\n\nZähler (Bruch 2)\nDer erste Term, \\(w_{ij}\\), beschreibt die räumlichen Gewichte aller Kantone. Sind die Kantone benachbart, dann gilt ein Gewicht von 1, sind sie nicht benachbart, gilt ein Gewicht von 0. Dies entspricht dem Schalter aus der Vorlesung.\nWie wir “benachbart” definieren ist nicht festgelegt. Denkbar wären zum Beispiel folgende Optionen:\n\nDie Kantone müssen sich berühren (dürfen sich aber nicht überlappen): st_touches()\nDie Kantone müssen innerhalb einer bestimmten Distanz zueinander liegen: st_is_within_distance()\nDie Kantone müssen überlappen: st_overlaps()\n\nEgal für welche Variante Ihr Euch entscheidet, setzt sparse = FALSE damit eine Kreuzmatrix erstellt wird.\n\nw <- st_touches(zweitwohnung_kanton, sparse = FALSE)\n\nw[1:6, 1:6]\n##       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]\n## [1,] FALSE FALSE FALSE FALSE  TRUE FALSE\n## [2,] FALSE FALSE  TRUE  TRUE FALSE  TRUE\n## [3,] FALSE  TRUE FALSE FALSE  TRUE  TRUE\n## [4,] FALSE  TRUE FALSE FALSE  TRUE  TRUE\n## [5,]  TRUE FALSE  TRUE  TRUE FALSE FALSE\n## [6,] FALSE  TRUE  TRUE  TRUE FALSE FALSE\n\n(Lasst Euch nicht davon beirren, dass wir nun TRUE und FALSE statt 1 und 0 haben. In R sind TRUE und 1 äquivalent, sowie auch FALSE und 0).\n\n\n\nZur Überprüfung unserer Operation: Mit w[1,] bekommt ihr ein Vektor, wo bei allen Kantone, die den ersten kanton (Zürich) berühren TRUE steht und bei allen anderen FALSE. Nun können wir überprüfen, ob die räumliche Operation funktioniert hat.\n\nberuehrt_1 <- w[1, ]\n\nggplot(zweitwohnung_kanton[beruehrt_1, ]) +\n  geom_sf(aes(fill = KANTONSNAME)) +\n  labs(title = \"Welche Kanton berühren den Kanton Zürich (st_touches)\")\n\n\n\n\nAbbildung 45.2: Generierter Plot\n\n\n\n\nDer nächste Teil sollte Euch nun bekannt vorkommen. Die Differenz aller Werte vom Mittelwert aller Werte \\((y_i - \\bar{y})\\) kennen wir schon vom ersten Bruch und haben wir auch bereits gelöst. Nun gilt es paarweise das Produkt der Abweichungen vom Mittelwert (die Covarianz) zu berechnen \\((y_i - \\bar{y})(y_j - \\bar{y})\\). DAzu müssen wir das Produkt aller Wertekombinationen berechnen. Dies erreichen wir mit der Funktion tcrossprod():\n\npm <- tcrossprod(dy)\npm[1:6,1:6]\n##               [,1]         [,2]          [,3]         [,4]         [,5]\n## [1,]  0.0008726497  0.001597812 -0.0006495424 -0.003249747 -0.001984912\n## [2,]  0.0015978120  0.002925576 -0.0011893051 -0.005950251 -0.003634352\n## [3,] -0.0006495424 -0.001189305  0.0004834762  0.002418896  0.001477437\n## [4,] -0.0032497469 -0.005950251  0.0024188956  0.012102055  0.007391811\n## [5,] -0.0019849120 -0.003634352  0.0014774366  0.007391811  0.004514842\n## [6,] -0.0023882557 -0.004372870  0.0017776588  0.008893862  0.005432280\n##              [,6]\n## [1,] -0.002388256\n## [2,] -0.004372870\n## [3,]  0.001777659\n## [4,]  0.008893862\n## [5,]  0.005432280\n## [6,]  0.006536145\n\nNun multiplizieren wir die Covarianzen mit den Gewichten \\(w\\) (Schalter), damit wir nur noch die Werte von den Kantonen haben, die auch effektiv benachbart sind (und eliminieren nicht-benachbarte Werte). Beachtet dass wir hier nun eine Matrix mit einer Matrix multiplizieren.\n\npmw <- pm * w\nw[1:6,1:6]\n##       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]\n## [1,] FALSE FALSE FALSE FALSE  TRUE FALSE\n## [2,] FALSE FALSE  TRUE  TRUE FALSE  TRUE\n## [3,] FALSE  TRUE FALSE FALSE  TRUE  TRUE\n## [4,] FALSE  TRUE FALSE FALSE  TRUE  TRUE\n## [5,]  TRUE FALSE  TRUE  TRUE FALSE FALSE\n## [6,] FALSE  TRUE  TRUE  TRUE FALSE FALSE\npmw[1:6,1:6]\n##              [,1]         [,2]         [,3]         [,4]         [,5]\n## [1,]  0.000000000  0.000000000  0.000000000  0.000000000 -0.001984912\n## [2,]  0.000000000  0.000000000 -0.001189305 -0.005950251  0.000000000\n## [3,]  0.000000000 -0.001189305  0.000000000  0.000000000  0.001477437\n## [4,]  0.000000000 -0.005950251  0.000000000  0.000000000  0.007391811\n## [5,] -0.001984912  0.000000000  0.001477437  0.007391811  0.000000000\n## [6,]  0.000000000 -0.004372870  0.001777659  0.008893862  0.000000000\n##              [,6]\n## [1,]  0.000000000\n## [2,] -0.004372870\n## [3,]  0.001777659\n## [4,]  0.008893862\n## [5,]  0.000000000\n## [6,]  0.000000000\n\nDen Zähler des ersten Bruches können wir nun fertig berechnen, indem wir die Summe aller gewichten (sprich eingeschalteten) Werten bilden:\n\nspmw <- sum(pmw, na.rm = TRUE)\nspmw\n## [1] 0.2007517\n\n\n\nNenner (Bruch 2)\nFür den Nenner des zweiten Teils der Formal (des zweiten Bruchs) müssen wir nun nur noch alle Gewichte summieren. Diese Summer entspricht der Anzahl effektiv benachbarter Kantone und kann Anzahl der \\(TRUE\\)-Werte in \\(w\\) bestimmt werden.\n\nsmw <- sum(w, na.rm = TRUE)\n\n\n\nAuflösung (Bruch 2)\nSo können wir den zweiten Bruch auflösen und berechnen:\n\nsw  <- spmw / smw\n\n\n\n\nAuflösung der Formel\nDer allerletzte Schritt besteht darin, die Werte aus den beiden Brüche miteinander zu multiplizieren.\n\nMI <- vr * sw\nMI\n## [1] 0.3148631\n\nDer Global Morans \\(I\\) für die Abstimmungsdaten beträgt auf Kantonsebene also 0.3148631. Wie interpretiert ihr dieses Resultate? Was erwartet ihr für eine Resultat auf Gemeinde- oder Bezirksebene?"
  },
  {
    "objectID": "rauman/Rauman3_Uebung_A.html#aufgabe-2-morans-i-für-gemeinde-oder-bezirke-berechnen",
    "href": "rauman/Rauman3_Uebung_A.html#aufgabe-2-morans-i-für-gemeinde-oder-bezirke-berechnen",
    "title": "Rauman 3: Übung",
    "section": "Aufgabe 2: Morans I für Gemeinde oder Bezirke berechnen",
    "text": "Aufgabe 2: Morans I für Gemeinde oder Bezirke berechnen\nNun könnt ihr Morans \\(I\\) auf der Ebene der Gemeine oder Bezirke und untersuchen, ob und wie sich Morans \\(I\\) verändert. Wenn ihr einen wenig leistungsfähigen Rechner habt, berechnet verwendet besser die Ebene “Berzirke”. Importiert dazu den Layer bezrik oder gemeinde aus dem Datensatz zweitwohnungsinitiative.gpkg. Visualisiert in einem ersten Schritt die Abstimmungsresultate.\n\nzweitwohnung_gemeinde <- read_sf(\"datasets/rauman/zweitwohnungsinitiative.gpkg\", \"gemeinde\")\n\nggplot(zweitwohnung_gemeinde) +\n  geom_sf(aes(fill = ja_in_percent), colour = \"white\",lwd = 0.2) +\n  scale_fill_gradientn(\"Ja Anteil\",colours = RColorBrewer::brewer.pal(11, \"RdYlGn\"), limits = c(0,1)) +\n  theme(legend.position = \"bottom\")\n\n\n\n\nAbbildung 45.3: Generierter Plot"
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A_ahp.html",
    "href": "rauman/Rauman4_Uebung_A_ahp.html",
    "title": "Rauman 4: Übung A",
    "section": "",
    "text": "Nachdem Sie nun die Theorie kennengelernt haben, werden Sie ein konkretes Beispiel für einen Analytischen Hierarchieprozess (AHP) durchführen. Dies ist ein manueller Ansatz, um Ihnen die Grundlagen eines AHP zu zeigen. Wenn Sie einen komplexeren AHP erstellen möchten, können Sie spezielle R AHP-Pakete verwenden, wie zum Beispiel ahpsurvey package."
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A_ahp.html#übung-1-definieren-sie-die-ausgangssituation",
    "href": "rauman/Rauman4_Uebung_A_ahp.html#übung-1-definieren-sie-die-ausgangssituation",
    "title": "Rauman 4: Übung A",
    "section": "Übung 1: Definieren Sie die Ausgangssituation",
    "text": "Übung 1: Definieren Sie die Ausgangssituation\nDenken Sie zunächst an eine aktuelle Entscheidung, vor der Sie gerade stehen oder gestanden haben (z. B. Fahrradkauf oder Wohnungsmiete), und definieren Sie die folgenden Punkte.\n\nEin Ziel für Ihren AHP (z.B. Wohnungsmiete)\n4 Kriterien, auf die Sie Ihre Entscheidung stützen wollen (z. B. Preis, Entfernung zur Arbeit/Schule, Grösse, Schönheit der Landschaft)\n3 verschiedene Optionen/Alternativen (z. B. 3 verschiedene Wohnungen)"
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A_ahp.html#übung-2-paarweiser-vergleich-1-2",
    "href": "rauman/Rauman4_Uebung_A_ahp.html#übung-2-paarweiser-vergleich-1-2",
    "title": "Rauman 4: Übung A",
    "section": "Übung 2: Paarweiser Vergleich 1 & 2",
    "text": "Übung 2: Paarweiser Vergleich 1 & 2\nn einem ersten Schritt muss jedes Kriterium paarweise mit einem anderen Kriterium verglichen werden. Verwenden Sie die folgende Skala zur Gewichtung der Kriterien (siehe Tabelle 46.1).\n\n\n\n\nTabelle 46.1: AHP Skala Gewichtungen\n\n\nWert\nDefinition\n\n\n\n\n1\nDie beiden Merkmale sind gleich wichtig\n\n\n3\nKriterium A ist etwas wichtiger als Kriterium B\n\n\n5\nKriterium A ist mässig wichtiger als Kriterium B\n\n\n7\nKriterium A ist deutlich wichtiger als Kriterium B\n\n\n9\nKriterium A ist absolut wichtiger als Kriterium B\n\n\n2, 4, 6, 8\nZwischenwerte\n\n\n\n\n\n\nSie können den folgenden Code verwenden, um Ihre Gewichtungsmatrix zu erstellen. In der Matrix werden zwei Kriterien immer zweimal verglichen, und diese beiden Vergleiche sollten den Kehrwert des jeweils anderen darstellen. Zur Veranschaulichung haben wir einen Vergleich hinzugefügt, der wie folgt lautet:\n\nZeile 1, Spalte 2: Kriterium 1 ist etwas wichtiger als Kriterium 2\nZeile 2, Spalte 1: Kriterium 2 ist etwas weniger wichtig als Kriterium 1\n\nErstellen Sie diesen Matrixvergleich, der Ihren Kriterien entspricht, und ersetzen Sie die “0”-Werte durch Ihre Gewichte gemäss der Tabelle 46.1. Beachten Sie, dass alle Diagonalwerte gleich “1” sein sollten\n\npairwise_comparison <- c(\n  1,   3, 0, 0,\n  1/3, 1, 0, 0,\n  0,   0, 1, 0,\n  0,   0, 0, 1\n) |> matrix(ncol = 4, byrow = TRUE) \n\n\n\n\nTipp: Fügen Sie Spalten- und Zeilennamen hinzu, damit Ihre Matrix besser lesbar ist.\n\ncriterias <- c(\"price\", \"distance\", \"size\", \"beauty\")\n\nrownames(pairwise_comparison) <- criterias\ncolnames(pairwise_comparison) <- criterias"
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A_ahp.html#übung-3-berechnung-der-kriteriengewichte",
    "href": "rauman/Rauman4_Uebung_A_ahp.html#übung-3-berechnung-der-kriteriengewichte",
    "title": "Rauman 4: Übung A",
    "section": "Übung 3: Berechnung der Kriteriengewichte",
    "text": "Übung 3: Berechnung der Kriteriengewichte\n\nÜbung 3.1: Normalisierung der Matrix (Berechnung der Kritiriengewichte 1)\nIm nächsten Schritt muss die Matrix normalisiert werden (siehe Abbildung 46.1). Dies kann in den folgenden zwei Schritten erfolgen:\n\nBerechnen Sie die Summe jeder Spalte mit colSums. Speichern Sie die Ausgabe in einer Variablen (z.B. ahp_colsums).\nTeilen Sie jeden Wert in der Matrix durch die entsprechende Spaltensumme. Um dies zu erreichen, können Sie die Funktion sweep() auf die Matrix anwenden, die der Funktion apply sehr ähnlich ist (verwenden Sie MARGIN = 2 (Spalten), STATS = ahp_colsums und FUN = \"/\").\n\n\n\n\n\n\n\nAbbildung 46.1: Normalisierung der Kriterien\n\n\n\n\nÜbung 3.2: Gewichtung der Kriterien (Berechnung der Kritiriengewichte 2)\nDies ist der letzte Schritt zur Berechnung der Gewichtung der einzelnen Kriterien (siehe Abbildung 46.2). Dies geschieht wie folgt:\n\nBerechne die Summe jeder Zeile und speichere das Ergebnis in einer Variablen (z.B. criteria_sum).\nDividiere die Summe der Kriterien durch die Summe der Kriterien und speichere das Ergebnis in einer Variablen (z.B. criteria_weight).\n\nHinweis: Die Summe von criteria_weight sollte 1 sein.\n\n\n\nAbbildung 46.2: Gewichtung der Kriterien"
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A_ahp.html#übung-4-konsistenzanalyse-konsistenzanalyse-1-2",
    "href": "rauman/Rauman4_Uebung_A_ahp.html#übung-4-konsistenzanalyse-konsistenzanalyse-1-2",
    "title": "Rauman 4: Übung A",
    "section": "Übung 4: Konsistenzanalyse (Konsistenzanalyse 1 & 2)",
    "text": "Übung 4: Konsistenzanalyse (Konsistenzanalyse 1 & 2)\nNachdem der paarweise Vergleich durchgeführt wurde, muss eine Konsistenzanalyse durchgeführt werden, um zu prüfen, ob die paarweisen Vergleiche konsistent sind oder dieser Widersprüche enthalten. Eine gewisse Inkonsistenz ist im Rahmen eines AHP zulässig, sie sollte aber nicht zu gross sein.\nUm die Konsistenz zu berechnen, sollten Sie wie in Folie 30 (Konsistenzanalyse 1) und den folgenden Schritten vorgehen:\n\nFühren Sie eine Matrixmultiplikation (%*%) zwischen pairwise_comparison und criteria_weight durch.\n\n\n\n\n\nDividiere das Ergebnis von 1) durch criteria_weight\n\n\n\n\n\nBerechnen Sie \\(\\lambda_{max}\\), indem Sie die Summe des in 2) erhaltenen Ergebnisses durch die Anzahl der Kriterien dividieren\n\n\n\n\n\nBerechnung von \\(CI\\) (\\(CI = \\frac{\\lambda_{max} - n}{n-1}\\)), wobei “n” der Anzahl der Kriterien entspricht\n\n\n\n\n\nErmitteln Sie \\(RI\\) durch Nachschlagen in der Abbildung 46.3\n\n\n\n\n\nBerechnen Sie \\(CR\\) (\\(CR = CI / RI\\))\n\n\n\n\n\nWenn CR > 0,1 ist, müssen Sie Ihre paarweisen Vergleiche neu bewerten.\n\n\n\n\nAbbildung 46.3: AHP Random Index by Saaty"
  },
  {
    "objectID": "rauman/Rauman4_Uebung_A_ahp.html#gratuliere",
    "href": "rauman/Rauman4_Uebung_A_ahp.html#gratuliere",
    "title": "Rauman 4: Übung A",
    "section": "Gratuliere!",
    "text": "Gratuliere!\nSie haben nun die Gewichte bestimmt, auf denen Sie Ihre Entscheidung aufbauen können, und haben festgestellt, ob diese Gewichte konsistent sind oder nicht. Diese nächsten Schritte sind technisch gesehen sehr ähnlich zu dem, was Sie in der obigen Übung getan haben, daher überlassen wir es Ihnen, ob Sie diese Schritte ausführen wollen oder nicht. Der Vollständigkeit halber sei gesagt, dass der nächsten Schritte folgende wären:\n\nVergleichen Sie Ihre Optionen/Alternativen in einem paarweisen Vergleich miteinander (ähnlich wie Sie die Kriterien miteinander verglichen haben). Dies tun Sie für jedes Kriterium\nNormalisieren Sie die paarweisen Vergleiche Ihrer Optionen (ähnlich wie Sie die paarweisen Vergleiche der Kriterien normalisiert haben)\nVerwenden Sie die Gewichte, die Sie in der obigen Übung ermittelt haben, um Ihre Ergebnisse aus 2) zu gewichten\nBestimmen Sie die beste Entscheidung auf der Grundlage des Ergebnisses aus 3)"
  },
  {
    "objectID": "rauman/Rauman4_Uebung_B_raster.html",
    "href": "rauman/Rauman4_Uebung_B_raster.html",
    "title": "Rauman 4: Übung B",
    "section": "",
    "text": "Im dieser Übung werden wir terra verwenden, um zu zeigen, wie wir einen Rasterdatensatz importieren können. Unter dem untenstehenden Link können Sie eine tif-Datei herunterladen, die das “Digitale Höhenmodell” (DHM)* des Kantons Schwyz in der Schweiz darstellt. Laden Sie den Datensatz herunter und führen Sie den angegebenen Code aus.\n\nDatensatz: dhm25m.tif\n\n\nlibrary(terra)\n\nImportieren Sie Ihr Raster mit der Funktion rast\n\ndhm_schwyz <- rast(\"datasets/rauman/dhm25m.tif\")\n\nSie erhalten einige wichtige Metadaten über den Rasterdatensatz, wenn Sie den Variablennamen in die Konsole eingeben.\n\ndhm_schwyz \n\nclass       : SpatRaster \ndimensions  : 1496, 1861, 1  (nrow, ncol, nlyr)\nresolution  : 25, 25  (x, y)\nextent      : 672187.5, 718712.5, 193662.5, 231062.5  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903 / LV03 \nsource      : dhm25m.tif \nname        : dhm25m \n\n\nUm einen schnellen Überblick eines Rasterdatensatz zu erhalten, können wir einfach die plot() Funktion verwenden.\n\nplot(dhm_schwyz)\n\n\n\n\nAbbildung 47.1: Generierter Plot\n\n\n\n\nLeider ist das Verwenden von Rastern in ggplot nicht sehr einfach. Da ggplot ein universelles Plot-Framework ist, stossen wir schnell an die Grenzen des Möglichen, wenn wir etwas so Spezielles wie Karten erstellen. Aus diesem Grund werden wir ein neues Plot-Framework einführen, das auf Karten spezialisiert ist und in einem sehr ähnlichen Design wie ggplot gebaut wurde: tmap. Installieren und laden Sie dieses Paket jetzt.\n\nlibrary(tmap)\n\nGenau wie ggplot basiert tmap auf der Idee von “Ebenen”, die durch ein + verbunden sind. Jede Ebene hat zwei Komponenten:\n\neine Datensatzkomponente, die immer tm_shape(dataset) ist (ersetzen Sie dataset durch Ihre Variable)\neine Geometriekomponente, die beschreibt, wie das vorangegangene tm_shape() visualisiert werden soll. Dies kann tm_dots() für Punkte, tm_polygons() für Polygone, tm_lines() für Linien usw. sein. Für Einzelbandraster (was bei dhm_schwyz der Fall ist) ist es tm_raster()\n\n\ntm_shape(dhm_schwyz) + \n  tm_raster() \n\n\n\n\nAbbildung 47.2: Generierter Plot\n\n\n\n\nBeachten Sie, dass tm_shape() und tm_raster() (in diesem Fall) zusammengehören. Das eine kann nicht ohne das andere leben.\nWenn Sie die Hilfe von ?tm_raster konsultieren, werden Sie eine Vielzahl von Optionen sehen, mit denen Sie die Visualisierung Ihrer Daten verändern können. Zum Beispiel ist der Standardstil von tm_raster() die Erstellung von “Bins” mit einer diskreten Farbskala. Wir können dies mit style = \"cont\" ausser Kraft setzen.\n\ntm_shape(dhm_schwyz) + \n  tm_raster(style = \"cont\") \n\n\n\n\nAbbildung 47.3: Generierter Plot\n\n\n\n\nDas sieht schon ziemlich toll aus, aber vielleicht wollen wir die Standard-Farbpalette ändern. Glücklicherweise ist das in tmap viel einfacher als in ggplot2. Um sich die verfügbaren Paletten anzusehen, geben Sie tmaptools::palette_explorer() oder RColorBrewer::display.brewer.all() in der Konsole ein (für Ersteres müssen Sie möglicherweise zusätzliche Pakete installieren, z.B. shinyjs).\n\ntm_shape(dhm_schwyz) + \n  tm_raster(style = \"cont\", palette = \"Spectral\") \n\n\n\n\nAbbildung 47.4: Generierter Plot\n\n\n\n\nSie können Layout-Anpassungen mit tm_layout() vornehmen, prüfen Sie ?tm_layout, um alle verfügbaren Optionen zu sehen!\n\n\ntm_shape(dhm_schwyz) + \n  tm_raster(style = \"cont\", palette = \"Spectral\", legend.is.portrait = FALSE, title = \"\") +\n  tm_layout(legend.outside = TRUE, legend.outside.position = \"bottom\",frame = FALSE)\n\n\n\n\nAbbildung 47.5: Generierter Plot"
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html",
    "href": "rauman/Rauman5_Uebung_mce.html",
    "title": "Rauman 5: Übung",
    "section": "",
    "text": "Die folgende Übung mag einigen von Ihnen bekannt vorkommen, wenn Sie unseren Bachelorstudiengang besucht haben. Dieses MCE wurde bereits im Bachelormodul “GIS” unter Verwendung von ArcGIS Pro und dessen ModelBuilder durchgeführt (siehe Abbildung 48.1).\nDas Ziel dieser Übung ist es, das gleiche MCE nur mit R durchzuführen. Wir werden hauptsächlich Funktionen aus den R-Paketen sf und raster verwenden. Bitte schauen Sie sich das Prozessmodell (siehe Abbildung 48.1) an, das in ArcGIS Pro erstellt wurde, und versuchen Sie herauszufinden, welche Funktionen in den beiden R-Paketen denen im Modell entsprechen. Sie werden sehen, dass es einige ähnliche Funktionen gibt, aber für einige Berechnungen ist ein anderer Ansatz erforderlich."
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html#übungen-1-daten-laden-und-anzeigen",
    "href": "rauman/Rauman5_Uebung_mce.html#übungen-1-daten-laden-und-anzeigen",
    "title": "Rauman 5: Übung",
    "section": "Übungen 1: Daten laden und anzeigen",
    "text": "Übungen 1: Daten laden und anzeigen\nLaden Sie die nachfolgenden Rasterdatensätze herunter:\n\n\n\nLayer\nKoord. System\nBeschreibung\nTyp\nAusschlussgebiet\n\n\n\n\ndhm25m.tif\nCH1903/LV03\nGeländemodell (m)\nRaster (25m)\nNein\n\n\neis25m.tif\nCH1903/LV03\nHäufigkeit der Vereisung (Tage/Jahr)\nRaster (25m)\nNein\n\n\nwind25m.tif\nCH1903/LV03\nDurchschnittliche Windgeschwindigkeit (dm/s)\nRaster (25m)\nNein\n\n\n\nLaden Sie das File windkraft_geodata.gpkg von Moodle herunter. Dieses beinhaltet die folgenden Layers:\n\n\n\n\n\n\n\n\n\n\nLayer\nKoord. System\nBeschreibung\nTyp\nAusschlussgebiet\n\n\n\n\nBewohnte_Flaeche\nCH1903/LV03\nSiedlungen (inkl. Puffer 200m)\nPolygon\n(Ja)/Distanz\n\n\nNationale_Schutzgebiete\nCH1903/LV03\nNationale Schutzgebiete\nPolygon\n(Ja)/Distanz\n\n\nSeeflaechen\nCH1903/LV03\nSeegebiete\nPolygon\nJa\n\n\nStrassen\nCH1903/LV03\nStrassen\nLinie\nNein/Distanz\n\n\nUntersuchungsgebiet_Schwyz\nCH1903/LV03\nUntersuchungsgebiet, Kanton Schwyz\nPolygon\nNein\n\n\nWaldgebiete\nCH1903/LV03\nWaldgebiete\nPolygon\n(Ja)/Distanz\n\n\n\nDie Rasterdaten können mit der Funktion terra::rast und die Vektorebenen mit sf::read_sf geladen werden. Zeigen Sie die verfügbaren Layers an und plotten Sie sie auf ansprechende Weise. Zur Visualisierung können Sie die Funktionen plot für Rasterdaten und ggplot für Vektordaten verwenden.\n\nWir werden die folgenden Pakete in dieser Übung verwenden:\n\nlibrary(sf)\nlibrary(terra)\nlibrary(dplyr)\nlibrary(tmap)"
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html#übung-2-ausschlusskriterien-zusammenführen",
    "href": "rauman/Rauman5_Uebung_mce.html#übung-2-ausschlusskriterien-zusammenführen",
    "title": "Rauman 5: Übung",
    "section": "Übung 2: Ausschlusskriterien zusammenführen",
    "text": "Übung 2: Ausschlusskriterien zusammenführen\nFühren Sie die Ausschlusskriterien Siedlungsgebiete, nationale Schutzgebiete, Seeflächen und Waldgebiete zusammen. Diese Vektordatensätze sind als Data Frames strukturiert und können daher durch einfaches Kombinieren zusammengeführt werden. Beachten Sie dabei, dass die Data Frames unterschiedliche Grössen haben. Zusätzlich müssen wir aus dem neu erstellten Vektordatensatz (Ausschlussgebiet) ein Raster erstellen. Dazu können Sie die Funktion rasterize verwenden. Die Ausgabe soll ein Raster mit 0 und 1 sein, wobei die Felder des Ausschlussbereichs den Wert 0 und die restlichen Felder den Wert 1 haben (siehe Abbildung 48.2).\n\nTipp: Um ein Raster mit nur 0 und 1 zu erhalten, verwenden Sie die Optionen “rasterize” field = 0 und background = 1.\nTipp: Um Vektordaten zu rastern, müssen Sie vorher ein leeres Raster erstellen. Dieses Raster sollte die gleichen Grenzen (extent), die gleiche Auflösung und das gleiche Koordinatensystem (crs) haben wie die anderen Rastersätze. Verwenden Sie dazu den folgenden Code.*\n\n\nr <- terra::rast(ext(kt_schwyz), \n          resolution = c(250, 250), \n          crs = \"EPSG:21781\")\n\n\n\n\nAbbildung 48.2: Ausschlussgebiete"
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html#übung-3-neigung-berechnen",
    "href": "rauman/Rauman5_Uebung_mce.html#übung-3-neigung-berechnen",
    "title": "Rauman 5: Übung",
    "section": "Übung 3: Neigung berechnen",
    "text": "Übung 3: Neigung berechnen\nAls nächstes berechnen Sie die Neigung in Grad auf der Grundlage des Geländemodells (dhm25m). Das terra-Paket bietet Ihnen eine sehr hilfreiche Funktion namens terrain.\n\nTipp: Wenn Sie die Terrain-Funktion verwenden, benutzen Sie die folgenden Optionen: v=“slope”, unit=“degrees”, neighbors=8.*"
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html#übung-4-entfernungen-zu-kriterien-berechnen",
    "href": "rauman/Rauman5_Uebung_mce.html#übung-4-entfernungen-zu-kriterien-berechnen",
    "title": "Rauman 5: Übung",
    "section": "Übung 4: Entfernungen zu Kriterien berechnen",
    "text": "Übung 4: Entfernungen zu Kriterien berechnen\nBei der Bewertung geeigneter Standorte für Windkraftanlagen ist die Entfernung zu Strassen, Waldgebieten, nationalen Schutzgebieten und bewohnten Gebieten relevant. Je nach Kriterium hat eine geringe oder grosse Entfernung einen positiven Einfluss auf die Bewertung der potenziellen Standorte. Führen Sie zu diesem Zweck eine Abstandsanalyse mit den ausgewählten Kriterien-Rasterlayern durch. Verwenden Sie für diese Berechnung die Rasterfunktion distance.\n\nTipp: Um die Funktion distance durchführen zu können, müssen Sie die Kriterien ebenfalls “rastern”. Sie können den gleichen Befehl wie in Übung 2 verwenden, aber nur mit der Option field = 1.\nTipp: Verwenden Sie erneut die Funktion “Zuschneiden”, um nur relevante Daten aus dem Untersuchungsgebiet zu erhalten."
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html#übung-5-kriterien-standardisieren-und-bewerten-grading",
    "href": "rauman/Rauman5_Uebung_mce.html#übung-5-kriterien-standardisieren-und-bewerten-grading",
    "title": "Rauman 5: Übung",
    "section": "Übung 5: Kriterien standardisieren und bewerten (grading)",
    "text": "Übung 5: Kriterien standardisieren und bewerten (grading)\nDie Datenebenen Neigung, Windgeschwindigkeit, Vereisungshäufigkeit und die in Übung 4 berechneten Entfernungsebenen haben unterschiedliche Einheiten (dm/s, Grad, d/yr und m). Diese Einheiten können nicht direkt miteinander verrechnet werden. Daher müssen die verschiedenen Ebenen durch eine lineare Abstufung operationalisiert werden. Die lineare Abstufung wird mit der Funktion reclassify durchgeführt. Verwenden Sie die Standards für die Neuklassifizierung aus Abbildung 48.3 (a) und Abbildung 48.3 (b)).\n\nTipp: Beachten Sie die Minimal- und Maximalwerte der einzelnen Rasterebenen.\nTipp: Hier ist ein Beispielcode zur Neuklassifizierung der Entfernungen zu Siedlungen.\n\n\nsettlements_max <- minmax(settlements_ed)[2]\n\nreclass_settlements <- c(0,80,0,\n                        80,160,0.1,\n                        160,240,0.2,\n                        240,320,0.3,\n                        320,400,0.4,\n                        400,480,0.5,\n                        480,560,0.6,\n                        560,640,0.7,\n                        640,720,0.8,\n                        720,800,0.9,\n                        800,settlements_max,1.0) |> matrix(ncol = 3, byrow = TRUE)\nreclass_settlements_ed <- terra::classify(settlements_ed, reclass_settlements)\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n(b)\n\n\n\n\nAbbildung 48.3: MCE Reclassify"
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html#übung-6-gewichtung-der-kriterien-mit-ahp",
    "href": "rauman/Rauman5_Uebung_mce.html#übung-6-gewichtung-der-kriterien-mit-ahp",
    "title": "Rauman 5: Übung",
    "section": "Übung 6: Gewichtung der Kriterien mit AHP",
    "text": "Übung 6: Gewichtung der Kriterien mit AHP\nFühren Sie einen AHP durch, um die Kriterien zu gewichten, die dem MCE zugrunde liegen. Vergleichen Sie zunächst die Kriterien paarweise und berechnen Sie dann die Gewichte - wie Sie es in der letzten Woche gelernt haben. Am Ende sollten Sie eine Liste mit 7 Gewichten erhalten, wie unten dargestellt.\n\nTipp: Sehen Sie sich die Übungen 2 und 3 aus der letzten Woche an. Verwenden Sie den vorbereiteten R-Code, um Ihre ahp-Matrix zu erstellen.\n\n\n\n\n\n\n\n\n\n\n\n\n\nWind\nStreets\nIce\nSettlements\nForest\nSlope\nProtected areas\n\n\n\n\n0.33862692\n0.09816760\n0.06166626\n0.24969460\n0.03515759\n0.18043000\n0.03625702\n\n\n\n\nahp_matrix <- c(\n  1, 0, 0, 0, 0, 0, 0, #Wind\n  0, 1, 0, 0, 0, 0, 0, #Distance to streets\n  0, 0, 1, 0, 0, 0, 0, #Ice\n  0, 0, 0, 1, 0, 0, 0, #Distance to settlements\n  0, 0, 0, 0, 1, 0, 0, #Distance to forests\n  0, 0, 0, 0, 0, 1, 0, #Slope\n  0, 0, 0, 0, 0, 0, 1  #Distance to protected areas\n) |> matrix(ncol = 7, byrow = TRUE)"
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html#übung-7-gewichtetes-overlay",
    "href": "rauman/Rauman5_Uebung_mce.html#übung-7-gewichtetes-overlay",
    "title": "Rauman 5: Übung",
    "section": "Übung 7: Gewichtetes Overlay",
    "text": "Übung 7: Gewichtetes Overlay\nDie linear gewichteten Kriterien (Übung 5) sollen nun unter Berücksichtigung der mit dem AHP ermittelten Gewichtung (Übung 6) miteinander kombiniert werden. Diese gewichtete Überlagerung kann mit Hilfe von Rasterberechnungen durchgeführt werden, indem einfach jedes Kriterium mit seinem Gewicht multipliziert und addiert wird (siehe Abbildung 48.4).\n\nTipp: Da die Rastersätze leicht unterschiedliche Ursprünge haben, erhöhen Sie die Toleranz, indem Sie rasterOptions(tolerance = 0.5) verwenden.\nTipp: Achten Sie bei der Multiplikation auch auf die Reihenfolge der Gewichte in Ihrer Liste.\n\n\n\n\nAbbildung 48.4: Gewichteter Overlay"
  },
  {
    "objectID": "rauman/Rauman5_Uebung_mce.html#übung-8-potenzielle-gebiete-mit-ausschlusskriterien-überschneiden",
    "href": "rauman/Rauman5_Uebung_mce.html#übung-8-potenzielle-gebiete-mit-ausschlusskriterien-überschneiden",
    "title": "Rauman 5: Übung",
    "section": "Übung 8: Potenzielle Gebiete mit Ausschlusskriterien überschneiden",
    "text": "Übung 8: Potenzielle Gebiete mit Ausschlusskriterien überschneiden\nDurch einfache Multiplikation des Ausschluss-Layers (Ergebnis aus Übung 2) mit dem gewichteten Overlay-Layer (Ergebnis aus Übung 7) schliessen wir alle Flächen mit dem Wert 0 (Ausschlussflächen) aus und behalten alle anderen Flächen mit dem Wert 1 (z.B. 0x3=0, 1x3=3). Erstellen Sie als Abschluss der Studie eine endgültige Darstellung der Potenzialflächen für Windkraftanlagen im Kanton Schwyz (wie Abbildung 48.5). Diskutieren Sie die Ergebnisse und bestimmen Sie drei mögliche Standorte, an denen eine konkrete Planung von Windkraftanlagen möglich wäre.\n\n\n\nAbbildung 48.5: Potenzielle Standorte"
  },
  {
    "objectID": "fallstudie_s/1_Einleitung.html",
    "href": "fallstudie_s/1_Einleitung.html",
    "title": "KW40: Einleitung",
    "section": "",
    "text": "Das rund 1100 ha grosse Naturschutzgebiet Wildnispark Zürich Sihlwald, welches im periurbanen Raum südlich von Zürich liegt, gilt seit dem 1. Januar 2010 als erster national anerkannter Naturerlebnispark. Er ist Teil des Wildnisparks Zürich und wichtiges Naherholungsgebiet für die Stadt Zürich.\nDas Schutzgebiet befindet sich im Spannungsfeld zwischen Schutz und Nutzen, denn einerseits sollen die Besuchenden den Wald erleben dürfen, andererseits soll sich dieser, in der Kernzone, frei entwickeln dürfen. Im Perimeter gelten darum verschiedene Regeln. So darf z. B. nur auf bestimmten Wegen mit den Velo gefahren werden.\n\nDas Management braucht solide, empirisch erhobene Daten zur Natur und zu den Besuchenden damit die Ziele von Nutzen und Schürzen erreicht werden können. Das Besuchermonitoring deckt den zweiten Teil dieser notwendigen Daten ab. Im Wildnispark Zürich sind dazu mehrere automatische Zählstellen in Betrieb. Die Zählstellen erfassen stundenweise die Besuchenden auf den Wegen. Einige Zählstellen erfassen richtungsgetrennt und / oder können zwischen verschiedenen Nutzergruppen wie Personen, die zu Fuss gehen, und Velofahrenden unterscheiden.\nIm Rahmen des Moduls Research Methods werden in dieser Fallstudie mehrere dieser automatischen Zählstellen genauer untersucht. Die Daten, welche im Besitz des WPZ sind, wurden bereits kalibriert. Das heisst, Zählungen während Wartungsarbeiten, bei Felhbetrieb o.ä. wurden bereits ausgeschlossen. Dies ist eine zeitintensive Arbeit und wir dürfen hier mit einem sauber aufbereiteten “Datenschatz” arbeiten.\nPerimeter des Wildnispark Zürichs mit den ungefähren Standorten von zwei ausgewählten automatischen Zählstellen.\n\n\n\n\nHinweis:\n\nDie Zähler 211 und 502 erfassen sowohl Fussgänger:innen als auch Fahrräder. Die Erfassung erfolgt richtungsgetrennt.\n\nDer Wildnispark wertet die Zahlen auf verschiedene Weise aus. So sind z. B. Jahresgänge (an welchen Monaten herrscht besonders viel Betrieb?) und die absoluten Nutzungszahlen bekannt. Vertiefte Auswertungen, die beispielsweise den Zusammenhang zwischen Besuchszahlen und dem Wetter untersuchen, werden nicht gemacht.\nUnsere Analysen in diesem Modul helfen dem Management, ein besseres Verständnis zum Verhalten der Besuchenden zu erlangen und bilden Grundlagen für Managemententscheide in der Praxis."
  },
  {
    "objectID": "fallstudie_s/1_Einleitung.html#ziel",
    "href": "fallstudie_s/1_Einleitung.html#ziel",
    "title": "KW40: Einleitung",
    "section": "Ziel",
    "text": "Ziel\nIn dieser Fallstudie zeigen wir, welche Einflüsse die Covid19-Pandemie im Frühjahr 2020 auf die täglichen Besuchszahlen im Wildnispark Zürich hatte. Dabei setzen wir den Fokus auf die Dämmerung und die Nacht, den in diesen Zeiten sind Wildtiere besonders sensibel gegenüber Störungen.\nIn unsere Analysen ziehen wir auch weitere erklärende Faktoren wie Wetter, Wochentag, Kalenderwoche und Schulferien mit ein. Die statistischen Auswertungen erlauben und somit klare Rückschlüsse auf die Effekte der Faktoren und deren Stärke zu ziehen."
  },
  {
    "objectID": "fallstudie_s/1_Einleitung.html#grundlagen",
    "href": "fallstudie_s/1_Einleitung.html#grundlagen",
    "title": "KW40: Einleitung",
    "section": "Grundlagen",
    "text": "Grundlagen\nZur Verfügung stehen:\n\ndie stündlichen Zählungen von Fussgänger:innen und Velos an den Zählstellen\nMeteodaten (Temperatur, Sonnenscheindauer, Niederschlagssumme)\nR-Skripte mit Hinweisen zur Auswertung"
  },
  {
    "objectID": "fallstudie_s/1_Einleitung.html#aufbau-der-fallstudie",
    "href": "fallstudie_s/1_Einleitung.html#aufbau-der-fallstudie",
    "title": "KW40: Einleitung",
    "section": "Aufbau der Fallstudie",
    "text": "Aufbau der Fallstudie\nIn dieser Fallstudie erheben wir zuerst selbst Daten auf dem Grüntal, welche wir dann deskriptiv auswerten. Anschliessend beschäftigen wir uns mit den Daten aus dem Wildnispark Zürich, welche wir ebenfalls deskriptiv auswerten und auch sttistische Modelle damit programmieren. Diese Ergebnisse werden dann im Abschlussbericht dokumentiert."
  },
  {
    "objectID": "fallstudie_s/2_Felderhebung.html",
    "href": "fallstudie_s/2_Felderhebung.html",
    "title": "KW 40 - KW 42: Felderhebung",
    "section": "",
    "text": "Es gibt eine Vielzahl an möglichen Methoden zur Erfassung der Besuchszahlen. Automatische Zählgeräte bieten die Möglichkeit lange und durchgehende Zeitreihen zu erfassen. Inputs dazu, wie diese ausgewertet werden können, erhält ihr in dieser Aufgabe."
  },
  {
    "objectID": "fallstudie_s/2_Felderhebung.html#ziele",
    "href": "fallstudie_s/2_Felderhebung.html#ziele",
    "title": "KW 40 - KW 42: Felderhebung",
    "section": "Ziele",
    "text": "Ziele\n\nDie Studierenden können das eingesetzte Zählgerät installieren und kennen die Vor- und Nachteile verschiedener Methoden.\nDie Studierenden können die Daten auslesen und explorativ analysieren."
  },
  {
    "objectID": "fallstudie_s/2_Felderhebung.html#grundlagen",
    "href": "fallstudie_s/2_Felderhebung.html#grundlagen",
    "title": "KW 40 - KW 42: Felderhebung",
    "section": "Grundlagen",
    "text": "Grundlagen\nDie Geräte werden innerhalb der unten eingezeichneten Elipsen platziert. Damit soll überprüft werden, wie stark frequentiert die Waldränder der ökologisch aufgewerteten Seeparzelle sind.\n\nDatenschutz ist ein wichtiges Thema. Die Besuchenden werden über den Zweck der Kameras informiert, die Daten nach der Bearbeitung wieder gelöscht und nicht weitergegeben."
  },
  {
    "objectID": "fallstudie_s/2_Felderhebung.html#auswertung",
    "href": "fallstudie_s/2_Felderhebung.html#auswertung",
    "title": "KW 40 - KW 42: Felderhebung",
    "section": "Auswertung",
    "text": "Auswertung\nAUFGABE ab dem 17. 10. 2022\nNachdem die Kameras für zwei Wochen im Einsatz standen, sichten wir zusammen die Ergebnisse.\nDa die Anzahl Passagen auf der Seeparzelle keine schöne Auswertung erlauben, arbeiten wir ab jetzt mit einem Datensatz aus dem WPZ. Die Vorteile für euch sind:\n\nihr habt genügend Daten für die Auswertung mit R und\ndie Daten sind im selben Format wir für die späteren Aufgaben.\n\n\nAufgabe 1: Vorarbeiten\n\nÜberlegt euch mögliche Darstellungsformen für die Anzahl Passagen und die beobachteten Aktivitäten an den untersuchten Standorten.\nSkizziert eure Ideen mittels Stift und Papier.\n\n\n\nAufgabe 2: Darstellung in R\nR bietet sehr viele Optionen zur Analyse und zur Darstellung der Daten. Nehmt bitte den bereitgestellten Datensatz zur Hand und visualisiert eure Ideen mit R.\nUntenstehend sind einige Ideen zur Umsetzung.\n\n### Bibliothek laden\n\n# zuerst muss sie installiert sein:\n# install.packages(\"tidyverse\")\nlibrary(tidyverse) # Arbeiten mit Datumsformaten\n\n### Datensatz einlesen\n\n# dabei speichere ich ihn gleich unter der Variable \"depo\" ab.\ndepo <- read.csv(\"data/Bsp_Data.csv\", sep = \";\")\n\n### Datum und Uhrzeit\n# das Datum und die Uhrzeit sind in einer Spalte. R liest das als \"Buchstaben\" ein. Wir definieren es als Datum:\ndepo$DatumUhrzeit <- as.POSIXct(depo$DatumUhrzeit, format = \"%d.%m.%Y %H:%M\")\n\n\n### Kennzahlen\n\n#zuerst schaue ich mir jeweils den Aufau und die Kennzahlen zum Datensaz an:\nstr(depo)\n\n# hat es im Datensatz noch fehlende Werte?\nsum(is.na(depo))\n\n# wie viele Personen sind IN das Gebiet gegangen?\nsum(depo$Fuss_IN)\n\n# wie viele insgesamt?\n# dafür erstellen wir zuerst eine neue Spalte mit der Totalen Anzahl pro Datum und Zeitstempel:\ndepo$Total = depo$Fuss_IN + depo$Fuss_OUT + depo$Velo_IN + depo$Velo_OUT\n# und berechnen nachher die Summe dieser neuen Spalte\nsum(depo$Total)\n\n\n# Darstellen der Anzahl Passagen pro Stunde und Tag\nplot(x = depo$DatumUhrzeit, y = depo$Total,\n     pch = 21,  # Form\n     cex = 1.5, # Grösse\n     bg=\"blue\") # Füllung\n\n\n\n\n\n# Darstellung der verschiedenen Nutzergruppen\nslieces <- c(sum(depo$Fuss_IN), sum(depo$Fuss_OUT), sum(depo$Velo_IN), sum(depo$Velo_OUT))\nlbls <- c(\"Fuss_IN\", \"Fuss_OUT\", \"Velo_IN\", \"Velo_OUT\") \npie(slieces, labels = lbls)\n\n\n\n\n\n\nAufgabe 3: für Fortgeschrittene\nDie Anzahl Passagen pro Zählstelle können nicht nur als statische Diagramme dargestellt werden. R ist auch ein GIS! Hier seht ihr, wie mit R interaktive Karten gestaltet werden können.\n\n# zuerst berechnen wir mit der Bibliothek tidyverse das Total pro Standort\ntotal_Standort <- depo |> \n  group_by(Standort, lon, lat) |> \n  summarise(Total = sum(Total))\n\n# dann überführen wir den Datensatz in ein räumliches Format \n# (Hinweis: dafür muss die Bibliothes \"sf\" installiert sein)\ntotal_Standort <- sf::st_as_sf(total_Standort, \n                         coords = c(\"lon\", \"lat\"),\n                         crs = 2056)\n\n# Transformiere die CH1903 Koordinaten in WGS84\ntotal_Standort <- sf::st_transform(total_Standort, crs = 4326)\n\n# Plotte nun eine interaktive Karte\n# install.packages(\"tmap\")\nlibrary(tmap)\n\n# setze den Modus auf Interaktiv\ncurrent.mode <- tmap_mode(\"view\") \n\n\n# plotte\ntm_basemap(server = c(Topo = \"Esri.WorldTopoMap\",\n                      Ortho = \"Esri.WorldImagery\",\n                      OSM = \"OpenStreetMap.HOT\"))+\n  tm_shape(total_Standort)+\n  tm_bubbles(size = \"Total\", border.col = \"black\", col = \"red\", scale = 5, alpha = 0.5)\n\n\n\n\n\n\nInteraktive Karte von zwei ausgewählten Zählstellen im Untersuchungsgebiet mit fiktiven Besuchszahlen."
  },
  {
    "objectID": "fallstudie_s/3_Aufgabenstellung.html",
    "href": "fallstudie_s/3_Aufgabenstellung.html",
    "title": "KW 42: Aufgabenstellung WPZ",
    "section": "",
    "text": "Hinweis: Bitte bearbeitet dieses Skript am 18.10.2022 erst nach der Präsentation / Diskussion eurer Visualisierungen aus der Aufgabenstellung [Einführung und Installation].\n\n\nIhr habt selbst ein (kleines) Besuchermonitoring auf dem Grüental durchgeführt und euch bereits mit dem WPZ beschäftigt. De Aufgaben im Zusammenhang mit dem Grüental sind nun abgeschlossen und wir beschäftigen uns ausschliesslich mit dem WPZ.\nIm Rahmen unserer Analyse programmieren wir multivariate Modelle, welche den Zusammenhang zwischen der Anzahl Besuchenden und verschiedenen Einflussfaktoren beschreiben. Dank den Modellen können wir sagen, wie die Besucher:innen auf die untersuchten Faktoren reagiert haben (siehe dazu auch [Einleitung], Ziele).\nKonkret sollen folgende Fragestellungen beantwortet werden:\n\n\nWelchen Einfluss haben neben den Phasen der Covid-Pandemie auch die Wetterparameter (Sonnenscheindauer, Tageshöchsttemperatur, Niederschlagssumme) sowie der Wochentag, die Ferien, die Kalenderwoche und das Jahr auf die Besuchszahlen am Tag, in der Dämmerung und in der Nacht?\nWie stark sind die jeweiligen Einflüsse, welche Effektrichtungen sind beobachtbar und welche der untersuchten Parameter sind signifikant?\nKönnen deutliche Unterschiede zwischen den “normalen”, vor-Covid19-Jahren und danach bei der Tageszeitliche Nutzung, den Wochen-, und / oder Saisongängen sowie den wichtigsten, deskriptiven Kennzahlen gefunden werden?\n\n\n\nJede Gruppe wertet Daten von einem Zähler aus. Sprecht miteinander ab, wer welchen Zähler behandelt (211 oder 502; Spezifikationen siehe [Einleitung], Hinweis). Jeder Zähler soll nur von einer Gruppe ausgewertet werden!\nBezieht in eure Auswertungen den gesamten zur Verfügung stehenden Zeitraum ein.\nFür euren Zähler stehen Zahlen zu Fussgänger:innen und Velos zur Verfügung (siehe [Einleitung], Hinweis). Entscheidet euch selbst, ob ihr Fussgänger:innen ODER Velos auswerten wollt. Die anderen Daten dürft ihr vernachlässigen.\nIm Bericht sollen die Informationen und Erfahrungen aus dem gesamten Verlauf der Fallstudie in geeigneter Weise einfliessen. Bezüglich der Felderhebung Grüntal erwarten wir keine Angaben.\n\n\n\n\n\n\nStruktur / Aufbau\n\n\nFragestellung (siehe oben; die Fragestellung ist vorgegeben, darf aber natürlich für den Bericht geschärft und optimal formuliert und konkretisiert werden.)\nMethoden (kurzes Kapitel mit den statistischen Analysen)\nResultate (deskriptive Statistik, multivariates Modell; kurzer Fliesstext sowie die notwendigen Tabellen und eine Auswahl möglichst informativer Grafiken)\nDiskussion (Diskussion der deskriptiven Analysen und der Modellergebnisse; dieser Abschnitt sollte die eigenen Resultate auch im Zusammenhang mit aktueller Fachliteratur reflektieren.)\nLiteraturverzeichnis (Tipp: Das Literaturverzeichnis sollte vollständig sein, sowie formal korrekt und einheitlich daherkommen. Wir erwarten speziell in der Diskussion eine Abstützung auf aktuelle Fachliteratur. Auf Moodle haben wir Euch eine Auswahl relevanter Papers bereitgestellt.)\nAnhang (für alle Auswertungen relevanter R-Code in geeigneter Form)\n\n\nGesamtumfang max. 7500 Zeichen (inkl. Leerzeichen; exkl. Einleitung, Tabellen, Literaturverzeichnis und Anhang)\nAbgabe am 8.1.2023 per Mail an hoce@zhaw.ch\n\n\n\n\n\nIst die Methode klar und verständlich formuliert?\nSind die deskriptiven Analysen klar beschrieben und geeignet visualisiert?\nIst die Variablenselektion klar beschrieben, plausibel und nachvollziehbar?\nSind die Modellresultate in Text- und Tabellenform korrekt beschrieben und geeignet visualisiert?\nIst die Diskussion klar formuliert und inhaltlich schlüssig?\nWie gut ist die Diskussion auf relevante und aktuelle Fachliteratur abgestützt?\nZusätzliche bewerten wir die inhaltliche Dichte der Arbeit und die formale Qualität (Sprache, Struktur, Aufbau, Darstellung, Literaturverzeichnis, Umgang mit Literatur im Text)\n\nZusammensetzung der Fallstudiennote:\n\nFallstudie-Leistungsnachweis 1 - Forschungsplan: 30 %\nFallstudie-Leistungsnachweis 2 - Multivariate Analyse: 70 %"
  },
  {
    "objectID": "fallstudie_s/4_Projektierung.html",
    "href": "fallstudie_s/4_Projektierung.html",
    "title": "KW 42: Projektierung",
    "section": "",
    "text": "Hinweis: Bitte bearbeitet dieses Skript am 18.10.2022 erst nach der Einführung [Multivariate Analyse: Abschlussbericht].\n\n\nVor den eigentlichen Auswertungen müssen einige Vorbereitungen unternommen werden. Die Zeit, die man hier investiert, wird in der späteren Projektphase um ein Mehrfaches eingespart.\nIch empfehle generell mit Projekten zu arbeiten, da diese sehr einfach ausgetauscht (auf verschiedene Rechner) und somit auch reproduziert werden können. Wichtig ist, dass es keine absoluten Arbeitspfade sondern nur relative gibt. Der Datenimport (und -export) kann mithilfe dieser relativen Pfade stark vereinfacht werden. –> Kurz gesagt: Projekte helfen alles am richtigen Ort zu behalten (mehr zur Arbeit mit Projekten: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).\n\nErstellt an einem passenden Speicherort ein neues Projekt mit einem treffenden Namen:\n\n–> File / New Project\n\n\n\nHinweise:\nNutzt für allen Text, welcher nicht im Code integriert ist, das Symbol #. Wenn ihr den Text als Titel definieren wollt, so dass er in der Übersicht erscheint, müssen vor dem Wort # und nach dem Wort #### eingefügt werden.\n\n# Texte, vor denen ein # und nach denen #### stehen, sind Überschriften\n\n# Ich bin eine Überschrift ####\n\n# Texte, vor denen ein # steht, erklaeren den Ablauf\n\n# Dann folgen die Arbeitsschritte\n1+1\n\n# Wenn man auf \"Outline\" klickt (oder CTRL + SHIFT + O), \n# öffnet sich die Übersicht zu den Überschriften\n\nTipps:\n\nAlt + - = <-\nCtrl + Shift + C = # vor der ausgewaehlten Zeile\n\nAufbau eines Skripts\nZuerst immer den Titel des Projekts sowie den Autor/ die Autorin des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklärt werden, wer Dateneigentümer ist (WPZ und Meteo Schweiz).\nIm Skript soll immer die Ordnerstruktur des Projekts genannt werden. So kann der Arbeitsvorgang auf verschiedenen Rechnern einfach reproduziert werden (ich verwende hier ein Projektordner mit den Unterordnern __skripts, data, results).\nBeschreibt zudem folgendes die verwendete Meteodaten (siehe dazu Metadata Meteodaten, –> order_XXX_legend.txt)\nEin Skript soll in R eigentlich immer (mehr oder weniger) nach dem selbem Schema aufgebaut sein. Dieses Schema enthällt (nach den bereits erwähnten Definitionen) 4 Kapitel:\n\nMetadaten und Definitionen\nDatenimport,\nVorbereitung,\nDeskriptive Analyse und Visualisierung und\nMultifaktorielle Analyse und Visualisierung.\n\nBereitet euer Skript mit diesen Kapitel vor.\n\n#.###########################################################################################\n# Einfluss von COVID19 auf das Naherholungsverhalten in WPZ ####\n# Fallstudie Modul Research Methods, HS22. Autor/in ####\n#.##########################################################################################\n\n#.##########################################################################################\n# METADATA UND DEFINITIONEN ####\n#.##########################################################################################\n\n# Datenherkunft ####\n# ...\n\n#.##########################################################################################\n# 1. DATENIMPORT #####\n#.##########################################################################################\n\nIn einem Bericht sollen die Abbildung einheitlich sein Dafür braucht es u.a. eine Farbpalette. Ich definiere meine Auswahl bereits hier; das hat den Vorteil, dass man die Farbnamen nur einmal schreiben muss und später die selbst definierte Palette unter der Variable “mycolors” abrufen kann.\n\nmycolors <- c(\"orangered\",\"gold\", \"mediumvioletred\", \"darkblue\")\n\n\n\n\n\nGeplottet wird mit ggplot, daher wird tidyverse geladen. Diese Bibliothek ergaenzt BASE R in vielerlei Hinsicht uns ist eigentlich fast immer nötig.\nDa wir es bei Besucherdaten immer mit einem zeitlichen Bezug zu tun haben, benoetigen wir eine passende Bibliothek. Ich arbeite mit lubridate, POSIXct waere natuerlich auch moeglich.\nggpubr brauchen wir für das Darstellen von mehreren verschiedenen Plots in nur einem. - PerformanceAnalytics, MuMIn, AICcmodavg, fitdistrplus, lme4 und sjPlot werden fuer die spaeteren multivariaten Analysen benoetigt. -Die Modellguete werden wir mittels lattice, blmeco und lattice pruefen.\n\n–> Lädt nun die benoetigten Bibliotheken.\n\nDiese müssen zuerst mit install.packages(“NAME”) installiert werden.\n\n\n# Benoetigte Bibliotheken ####\nlibrary(tidyverse) # Data wrangling und piping\nlibrary(lubridate) # Arbeiten mit Datumsformaten\nlibrary(ggpubr)    # to arrange multiple plots in one graph\nlibrary(PerformanceAnalytics) # Plotte Korrelationsmatrix\nlibrary(MuMIn)     # Multi-Model Inference\nlibrary(AICcmodavg)# Modellaverageing\nlibrary(fitdistrplus)# Prueft die Verteilung in Daten\nlibrary(lme4)      # Multivariate Modelle\nlibrary(blmeco)    # Bayesian data analysis using linear models\nlibrary(sjPlot)    # Plotten von Modellergebnissen (tab_model)\nlibrary(lattice)   # einfaches plotten von Zusammenhängen zwischen Variablen\n\n\n\n\nWIr lesen später zwei verschiedene Datensätze ein. Beide sollen exakt denselben Zeitraum umfassen. Definiert dazu den ersten und letzten Tag gemäss den vorhandenen Zähldaten.\n\ndepo_start <- as.Date(\"2017-01-01\")\ndepo_end <- as.Date(\"2022-7-31\")\n\nWichtiger Teil unserer Auswertungen ist der Einfluss des Lockdown auf das Besuchsverhalten.\n-Wir müssen also Start und Ende der beiden Lockdowns in der Schweiz definieren:\n\nlock_1_start_2020 <- as.Date(\"2020-03-16\")\nlock_1_end_2020 <- as.Date(\"2020-05-11\")\n\nlock_2_start_2021 <- as.Date(\"2020-12-22\")\nlock_2_end_2021 <- as.Date(\"2021-03-01\")\n\nEbenfalls müssen die erste und letzte Kalenderwoche der Untersuchungsfrist definiert werden. Diese werden bei wochenweisen Analysen ausgeklammert da sie i.d.R. unvollstaendig sind (das ist ein späterer Arbeitsschritt). Geht wie oben vor. Tipp: der Befehl isoweek() liefert euch die Kalenderwoche.\nFerienzeiten können einen grossen Einfluss auf das Besucheraufkommen haben. Die relevanten Ferienzeiträume (je nach dem müsst ihr das anpassen) müssen daher bekannt sein. Zur Definition der Ferien kann z.B. folgend vorgegangen werden:\n\n# (https://www.schulferien.org/schweiz/ferien/2020/)\nWinterferien_2016_start <- as.Date(\"2017-01-01\") \nWinterferien_2016_ende <- as.Date(\"2017-01-08\")\n\nFruehlingsferien_2017_start <- as.Date(\"2017-04-15\") \nFruehlingsferien_2017_ende <- as.Date(\"2017-04-30\") \nSommerferien_2017_start <- as.Date(\"2017-07-15\") \nSommerferien_2017_ende <- as.Date(\"2017-08-20\") \nHerbstferien_2017_start <- as.Date(\"2017-10-07\") \nHerbstferien_2017_ende <- as.Date(\"2017-10-22\") \nWinterferien_2017_start <- as.Date(\"2017-12-23\") \nWinterferien_2017_ende <- as.Date(\"2018-01-07\") \n\nFruehlingsferien_2018_start <- as.Date(\"2018-04-21\") \nFruehlingsferien_2018_ende <- as.Date(\"2018-05-06\") \nSommerferien_2018_start <- as.Date(\"2018-07-14\") \nSommerferien_2018_ende <- as.Date(\"2018-08-19\") \nHerbstferien_2018_start <- as.Date(\"2018-10-06\") \nHerbstferien_2018_ende <- as.Date(\"2018-10-21\") \nWinterferien_2018_start <- as.Date(\"2018-12-22\") \nWinterferien_2018_ende <- as.Date(\"2019-01-06\") \n\nFruehlingsferien_2019_start <- as.Date(\"2019-04-20\") \nFruehlingsferien_2019_ende <- as.Date(\"2019-05-05\") \nSommerferien_2019_start <- as.Date(\"2019-07-13\") \nSommerferien_2019_ende <- as.Date(\"2019-08-18\") \nHerbstferien_2019_start <- as.Date(\"2019-10-05\") \nHerbstferien_2019_ende <- as.Date(\"2019-10-20\") \nWinterferien_2019_start <- as.Date(\"2019-12-21\") \nWinterferien_2019_ende <- as.Date(\"2020-01-05\")\n\nFruehlingsferien_2020_start <- as.Date(\"2020-04-11\")\nFruehlingsferien_2020_ende <- as.Date(\"2020-04-26\")\nSommerferien_2020_start <- as.Date(\"2020-07-11\")\nSommerferien_2020_ende <- as.Date(\"2020-08-16\")\nHerbstferien_2020_start <- as.Date(\"2020-10-03\")\nHerbstferien_2020_ende <- as.Date(\"2020-10-18\")\nWinterferien_2020_start <- as.Date(\"2020-12-19\")\nWinterferien_2020_ende <- as.Date(\"2021-01-03\")\n\nFruehlingsferien_2021_start <- as.Date(\"2021-04-24\")\nFruehlingsferien_2021_ende <- as.Date(\"2021-05-09\")\nSommerferien_2021_start <- as.Date(\"2021-07-17\")\nSommerferien_2021_ende <- as.Date(\"2021-08-22\")\nHerbstferien_2021_start <- as.Date(\"2021-10-09\")\nHerbstferien_2021_ende <- as.Date(\"2021-10-24\")\nWinterferien_2021_start <- as.Date(\"2021-12-18\")\nWinterferien_2021_ende <- as.Date(\"2022-01-02\")\n\nFruehlingsferien_2022_start <- as.Date(\"2022-04-16\")\nFruehlingsferien_2022_ende <- as.Date(\"2022-05-01\")\nSommerferien_2022_start <- as.Date(\"2022-07-16\")\nSommerferien_2022_ende <- as.Date(\"2022-08-21\")\nHerbstferien_2022_start <- as.Date(\"2022-10-08\")\nHerbstferien_2022_ende <- as.Date(\"2022-10-23\")\nWinterferien_2022_start <- as.Date(\"2022-12-24\")\nWinterferien_2022_ende <- as.Date(\"2023-01-08\")\n\nNun sind alle Vorbereitungen gemacht, die Projektstruktur aufgebaut und die eigentliche Arbeit kann beginnen."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "",
    "text": "Die Projektstruktur steht. Nun können die Daten eingelesen und die nötigen Datentypen definiert werden.\nLädt die Daten zuerst von Moodle herunter.\nHinweise:\n\nSiehe [Einleitung] für den Standort der Zähler 211 und 502.\nDie Daten sind auf Moodle unter ReMe HS22 MSc ENR / Fallstudie Biodiversity & Ecosystems / S_Daten abgelegt.\n\n\nZähldaten zu eurem Standort (211_sihlwaldstrasse_2017_2022.csv, 502_sihluferweg_2016_2022.csv)\nMeteodaten (order_105742_data.txt)\n\nDie Zähldaten des Wildnispark Zürich wurden vorgängig bereinigt (z.B. wurden Stundenwerte entfernt, an denen am Zähler Wartungsarbeiten stattgefunden haben). Das macht es für uns einfach, denn wir können die Daten ohne vorgängige Bereinigung einlesen. Behaltet aber im Hinterkopf, dass die Datenaufbereitung, die Datenbereinigung mit viel Aufwand verbunden ist.\n\nLest die Zählaten ein, speichert ihn unter der Variable depo und sichtet den Datensatz (z.B. str(), head(), view() usw.).\n\n\ndepo <- read.csv(\"./HIER RELATIVEN DATEIPFAD EINGEBEN\", sep = \"HIER SEPERATOR EINGEBEN\") \n# Speicherort sowie Dateiname anpassen\n\nHinweis: Im Stundenformat zeigen die Werte bei 11:00 die Zähldaten zwischen 11:00 bis 12:00 Uhr."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#a",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#a",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "1a)",
    "text": "1a)\n\nIm Datensatz des Wildnisparks sind Datum und Uhrzeit in einer Spalte. Diese müssen getrennt werden (Ich schlage hier den Ansatz des piping ( |> ) vor. Damit können in einem “Rutsch” mehrere Operationen ausgeführt werden).\nEbenfalls muss das Datum als solches definiert werden. Welches Format hat es (im Code: format = “HIER DATUMSFORMAT”)?\n\n\nstr(depo)\n\ndepo <- depo |>\n  mutate(Datum = as.character(Datum)) |> \n  mutate(Datum = as.Date(Datum, format = \"HIER DATUMSFORMAT\")) # hier wird Text zum Datum"
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#b",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#b",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "1b)",
    "text": "1b)\nIhr könnt selbst wählen, ob ihr Fussgänger:innen oder Velos untersuchen wollt (je nachdem ob sie in eurem Datensatz vorhanden sind).\n\nEntfernt die überflüssigen Spalten aus dem Datensatz.Ich schlage vor, dass ihr dafuer den Befehl dplyr::select() verwendet."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#c",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#c",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "1c)",
    "text": "1c)\n\nBerechnen des Totals (IN + OUT), da dieses in den Daten nicht vorhanden ist (wiederum mit piping).\n\nTipp: Wenn man R sagt: “addiere mir Spalte x mit Spalte y”, dann macht R das für alle Zeilen in diesen zwei Spalten. Wenn man nun noch sagt: “speichere mir das Ergebnis dieser Addition in einer neuen Spalte namens Total”, dann hat man die Aufgabe bereits gelöst. Arbeitet mit mutate()).\nHinweis: Ihr habt das auch schon in Kapitel [Einführung und Installation] gemacht.\n\nEntfernt nun alle NA-Werte mit na.omit()."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#a-1",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#a-1",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "2a)",
    "text": "2a)\n\nLest die Meteodaten ein und speichert sie unter meteo."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#b-1",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#b-1",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "2b)",
    "text": "2b)\n\nAuch hier müssen die Datentypen manuell gesetzt werden.\n\nTipp: Das Datum wird als Integer erkannt. Zuerst muss es in Text umgewandelt werden aus dem dann das eigentliche Datum herausgelesen werden kann. Das ist mühsam - darum hier der Code.\n\nmeteo <- transform(meteo, time = as.Date(as.character(time), \"%Y%m%d\"))\n\nHinweis Was ist eigentlich Niederschlag:\nhttps://www.meteoschweiz.admin.ch/home/wetter/wetterbegriffe/niederschlag.html\n\nWerden den anderen Spalten die richtigen Typen zugewiesen? Falls nicht, ändert die Datentypen.\nNun schneiden wir den Datensatz auf die Untersuchungsdauer zu."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#c-1",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#c-1",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "2c)",
    "text": "2c)\n\nJetzt müssen auch hier alle nicht verfügbare Werte (NA’s) herausgefiltert werden.\n\nTipp: Entweder geht das mit na.omit() für alle Spalten oder, etwas konservativer, können mit filter() die zu filternden Spalten definiert werden. Mit folgendem Codeblock können z.B. alle Werte gefiltert werden, die in der Spalte stn nicht gleich NA sind (es werden also die Werte behalten, die vorhanden sind). Der Code muss für die anderen relevanten Spalten noch ergänzt werden.\n\nmeteo <- meteo |>\n  filter(!is.na(stn))|>\n  ...|>\n  ...\n\nHinweis: … steht im Code für folgende oder vorhergehende Zeilen im Code (in einer Pipe)\n\nPrüft nun, wie die Struktur des data.frame (df) aussieht und ob alle NA Werte entfernt wurden (sum(is.na(df$Variable))). Stimmen alle Datentypen?"
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#a-2",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#a-2",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "3a)",
    "text": "3a)\nJetzt fügen wir viele Convinience Variabeln hinzu. Wir brauchen:\n\nWochentag; der Befehl dazu ist weekdays()\n\nTipp: R sortiert die Levels alphabetisch. Da das in unserem Fall aber sehr unpraktisch ist, müssen die Levels manuell bestimmt werden\n\n  ...\n  mutate(Wochentag = base::factor(Wochentag, \n                            levels = c(\"Montag\", \"Dienstag\", \"Mittwoch\", \n                                       \"Donnerstag\", \"Freitag\", \"Samstag\", \"Sonntag\")))\n  ...\n\nFrage: Was bedeutet base:: vor den eigentlichen Befehl?\n\nWerktag oder Wochenende?\n\n\n  ...\n  mutate(Wochenende = if_else(Wochentag == \"Montag\" | Wochentag == \"Dienstag\" | \n                           Wochentag == \"Mittwoch\" | Wochentag == \"Donnerstag\" | \n                           Wochentag == \"Freitag\", \"Werktag\", \"Wochenende\"))\n  ...\n\nFrage: Was bedeuten die | (zu erstellen mit AltGr + 7)? Welches ist das if Argument, welches das else?\n\nKalenderwoche: isoweek()\nMonat: month()\nJahr: year()\nPhase Covid (Code untenstehend). Wir definieren fünf Phasen:\n\n\nvon Anfang Untersuchungsperiode bis 1 Jahr vor Lockdown 1 (pre)\n1 Jahr vor Corona (normal)\nLockdown 1\nLockdown 2\nEnde 2. Lockdown bis Ende Untersuchungsperiode\n\nHinweis:\n\nIch mache den letzten Punkt nachgelagert, da zu viele Operationen in einem Schritt auch schon mal etwas durcheinander erzeugen können.\nWir packen alle Phasen (normal, die beiden Lockdowns und Covid aber ohne Lockdown) in eine Spalte –> long-format ist schöner (und praktischer für das plotten) als wide-format.\n\n\ndepo <- depo |>\n  mutate(Phase = if_else(Datum >= lock_1_start_2020 & Datum <= lock_1_end_2020,\n                         \"Lockdown_1\",\n                         if_else(Datum >= lock_2_start_2021 & Datum <= lock_2_end_2021,\n                                 \"Lockdown_2\",\n                                 if_else(Datum>= (lock_1_start_2020 - years(1)) & Datum < lock_1_start_2020,\n                                         \"Normal\", \n                                         if_else(Datum > lock_2_end_2021,\n                                                 \"Post\", \"Pre\")))))\n\n# hat das gepklappt?!\nunique(depo$Phase)\n\nFrage: Welches ist das if Argument, welches das else?\n\nÄndert die Datentypen der Spalten Wochenende, KW, Phase zu factor und sortiert die Levels, so dass diese Sinn machen (z.B. in Phase = Pre, Normal, Lockdown 1, Lockdown 2, Post)."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#b-2",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#b-2",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "3b)",
    "text": "3b)\n\nNun soll noch die volle Stunde als Integer im Datensatz stehen. Diese Angabe muss etwas mühsam aus den Daten gezogen werden (darum hier der fertige Code dazu):\n\n\ndepo$Stunde <- as.numeric(format(as.POSIXct(depo$Zeit,format=\"%H:%M:%S\"),\"%H\"))\n\n# ersetze 0 Uhr mit 24 Uhr (damit wir besser rechnen können)\ndepo$Stunde[depo$Stunde == 0] <- 24\nunique(depo$Stunde)\ntypeof(depo$Stunde)"
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#c-2",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#c-2",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "3c)",
    "text": "3c)\nDie Daten wurden durch den WPZ kalibriert (Kommastellen).\n\nRundet sie auf 0 Nachkommastellen (Ganzzahl; unser Modell kann nicht mit Kommazahlen in der ahbängigen Variable umgehen).\nDefiniert sie sicherheitshalber als Integer\nMacht das für IN, OUT und Total.\n\n\ndepo$... <- round(..., digits = 0)\ndepo$... <- as.integer(...)"
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#d-tageszeit",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#d-tageszeit",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "3d) Tageszeit",
    "text": "3d) Tageszeit\nWir setzen den Fokus unserer Untersuchung auf die Veränderung der Besuchszahlen in der Abend- und Morgendämmerung sowie der Nacht. Dafür müssen wir diese tageszeitliche Einteilung der Daten erst machen. Da dies über den Umfang dieser Fallstudie geht, liefere ich euch hier den Code dazu.\nDie wichtigsten Punkte:\n\nDie Tageslänge wurde für den Standort Zürich (Zeitzone CET) mit dem Package “suncalc” berechnet. Dabei wurden Sommer- und Winterzeit berücksichtigt.\nDie Einteilung der Tageszeit beruht auf dem Start und dem Ende der astronomischen Dämmerung sowie der Golden Hour. Der Morgen und der Abend wurden nach dieser Definition berechnet und um je eine Stunde Richtung Tag verlängert.\n\n\n# Einteilung Standort Zuerich\nLatitude <- 47.38598\nLongitude <- 8.50806\n\n# Zur Berechnung der Tageslaege muessen wir zuerst den Start und das Ende der Sommer-\n# zeit definieren\n# https://www.schulferien.org/schweiz/zeit/zeitumstellung/\n\nSo_start_2017 <- as.Date(\"2017-03-26\") \nSo_end_2017 <- as.Date(\"2017-10-29\") \nSo_start_2018 <- as.Date(\"2018-03-25\") \nSo_end_2018 <- as.Date(\"2018-10-28\") \nSo_start_2019 <- as.Date(\"2019-03-31\") \nSo_end_2019 <- as.Date(\"2019-10-27\") \nSo_start_2020 <- as.Date(\"2020-03-29\")\nSo_end_2020 <- as.Date(\"2020-10-25\")\nSo_start_2021 <- as.Date(\"2021-03-28\")\nSo_end_2021 <- as.Date(\"2021-10-31\")\nSo_start_2022 <- as.Date(\"2022-03-27\")\nSo_end_2022 <- as.Date(\"2022-10-30\")\n\n# Welche Zeitzone haben wir eigentlich?\n# Switzerland uses Central European Time (CET) during the winter as standard time, \n# which is one hour ahead of Coordinated Universal Time (UTC+01:00), and \n# Central European Summer Time (CEST) during the summer as daylight saving time, \n# which is two hours ahead of Coordinated Universal Time (UTC+02:00).\n# https://en.wikipedia.org/wiki/Time_in_Switzerland\n\n# Was sind Astronomische Dämmerung und Golden Hour ueberhaupt?\n# https://sunrisesunset.de/sonne/schweiz/zurich-kreis-1-city/\n# https://www.rdocumentation.org/packages/suncalc/versions/0.5.0/topics/getSunlightTimes\n\n# Wir arbeiten mit folgenden Variablen:\n# \"nightEnd\" : night ends (morning astronomical twilight starts)\n# \"goldenHourEnd\" : morning golden hour (soft light, best time for photography) ends\n# \"goldenHour\" : evening golden hour starts\n# \"night\" : night starts (dark enough for astronomical observations)\n\nlumidata <-\n  getSunlightTimes(\n    date = seq.Date(depo_start, depo_end, by = 1),\n    keep = c(\"nightEnd\", \"goldenHourEnd\", \"goldenHour\", \"night\"),\n    lat = Latitude,\n    lon = Longitude,\n    tz = \"CET\")\n\nlumidata <- lumidata |> \n  mutate(Jahreszeit = ifelse(date >= So_start_2017 & date <=  So_end_2017 |\n                               date >= So_start_2018 & date <=  So_end_2018 |\n                               date >= So_start_2019 & date <=  So_end_2019 |\n                               date >= So_start_2020 & date <= So_end_2020 |\n                               date >= So_start_2021 & date <= So_end_2021 |\n                               date >= So_start_2022 & date <= So_end_2022, \n                               \"Sommerzeit\", \"Winterzeit\"))\n\n# CH ist im Im Sommer CET + 1. \n# Darum auf alle relevanten Spalten eine Stunde addieren\n# hinweis: ich verzichte hier auf ifelse, da es einfacher und nachvollziehbarer scheint,\n# hier mit einem filter die betreffenden Spalten zu waehlen\nlumidata_So <- lumidata |> \n  filter(Jahreszeit==\"Sommerzeit\") |> \n  mutate(nightEnd = nightEnd + hours(1),\n         goldenHourEnd =  goldenHourEnd + hours(1),\n         goldenHour = goldenHour + hours(1),\n         night = night + hours(1))\n\nlumidata_Wi <- lumidata |> \n  filter(Jahreszeit==\"Winterzeit\") \n# verbinde sommer- und winterzeit wieder\nlumidata <- rbind(lumidata_So, lumidata_Wi) |> \n  arrange(date)\n\n# change data type\nlumidata$date <- as.Date(lumidata$date, format= \"%Y-%m-%d\")\n\n# drop unnecessary cols\nlumidata <- lumidata |> dplyr::select(-lat, -lon)\n\n# jetzt haben wir alle noetigen Angaben zu Sonnenaufgang, Tageslaenge usw. \n# diese Angaben koennen wir nun mit unseren Zaehldaten verbinden:\ndepo <- left_join(depo,lumidata, by = c(\"Datum\" =\"date\"))\n\n# aendere alle Zeit- und Datumsangaben so, dass sie gleich sind und miteinander verrechnet werden können.\ndepo <- depo |> \n  mutate(datetime = paste(Datum, Zeit)) |> \n  mutate(datetime = as.POSIXct(datetime, format = \"%Y-%m-%d  %H:%M:%S\"))|> \n  mutate(nightEnd = as.POSIXct(nightEnd)) |> \n  mutate(goldenHourEnd = as.POSIXct(goldenHourEnd)) |> \n  mutate(goldenHourEnd = goldenHourEnd + hours(1)) |> \n  mutate(goldenHour = as.POSIXct(goldenHour)) |> \n  mutate(goldenHour = goldenHour - hours(1)) |> \n  mutate(night = as.POSIXct(night))\n\n# im naechsten Schritt weise ich den Stunden die Tageszeiten Morgen, Tag, Abend und Nacht zu.\n# diese Zuweisung basiert auf der Einteilung gem. suncalc und eigener Definition.\ndepo <- depo|>\n  mutate(Tageszeit = if_else(datetime >= nightEnd & datetime <= goldenHourEnd, \"Morgen\",\n                             ifelse(datetime > goldenHourEnd & datetime < goldenHour, \"Tag\",\n                                    ifelse(datetime >= goldenHour & datetime <= night,\n                                           \"Abend\",\n                                           \"Nacht\")))) |>\n  mutate(Tageszeit = factor(Tageszeit, levels = c(\n    \"Morgen\", \"Tag\", \"Abend\", \"Nacht\")))\n\n# # behalte die relevanten Var\ndepo <- depo |> dplyr::select(-nightEnd, -goldenHourEnd, -goldenHour, -night)\n\n#Plotte zum pruefn ob das funktioniert hat\np <- ggplot(depo, aes(y = Datum, color = Tageszeit, x = Stunde))+\n  geom_jitter()+\n  scale_color_manual(values=mycolors)\n\nplotly::ggplotly(p)\n\nBei mir hat der Zusatz der Tageszeit noch zu einigen NA-Wertren geführt. Diese lösche ich einfach:\n\ndepo <- na.omit(depo)\n# hat das funktioniert?\nsum(is.na(depo))"
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#a-3",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#a-3",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "4a)",
    "text": "4a)\nUnsere Daten liegen im Stundenformat vor. Für einige Auswertungen müssen wir aber auf ganze Tage zurückgreifen können.\n\nDie Stundendaten müssen zu ganzen Tagen aggregiert werden. Macht das wiederum einer Pipe. Bezieht folgende Gruppierungen (group_by()) mit ein: Datum, Wochentag, Wochenende, KW, Monat, Jahr, Phase. Summiert die Zählmengen separat (Total, IN, OUT) auf und speichert das Resultat unter depo_d.\n\nTipp: Wenn man die Convinience Variablen als grouping variable einspeisst, dann werden sie in das neue df übernommen und müssen nicht nochmals hinzugefügt werden\n\ndepo_d <- depo |> \n  group_by(VARIABLE1, VARIABLE2, ...) |>   # Gruppieren nach den Variablen\n  summarise(Total = sum(Fuss_IN + Fuss_OUT),# Berechnen der gewünschten Werte\n            Fuss_IN = sum(Fuss_IN),\n            ...\n\n\nErstellt nun einen Datensatz depo_daytime, in welchem ihr obrigen Schritt wiederholt aber zusätzlich noch die Gruppierung “Tageszeit” nutzt."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#b-3",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#b-3",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "4b)",
    "text": "4b)\n\nAggregiere die Stundenwerte nach dem Monat (Gruppierungen Monat, Jahr) und speichert das neue df unter depo_m.\n\nTipp: Braucht wiederum group_by() und summarise(). Nun brauchen wir nur noch das Total, keine Richtungstrennung mehr.\n\nFügt den neu erstellten df eine Spalte mit Jahr + Monat hinzu. Das ist etwas mühsam, darum hier der fertige Code dazu:\n\n\n# vergewissere, dass sicher df\ndepo_m <- as.data.frame(depo_m)\n# sortiere das df anhand zwei Spalten aufsteigend (damit die Reihenfolge sicher stimmt)\ndepo_m[\n  with(depo_m, order(Jahr, Monat)),]\n\n# Speichere dann Jahr und Monat in einer Spalte und formatiere diese als Datum \ndepo_m <- depo_m |> \n  mutate(Ym = paste(Jahr, Monat)) |>\n  mutate(Ym= lubridate::ym(Ym)) \n\n\nWiederholt diesen Schritt, diesmal aber mit der Gruppierung “Tageszeit” neben “Jahr” und “Monat” und speichert das Resultat unter “depo_m_daytime”."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Uebung.html#c-3",
    "href": "fallstudie_s/5_Vorverarbeitung_Uebung.html#c-3",
    "title": "KW 42+43: Übung Datenvorverarbeitung",
    "section": "4c)",
    "text": "4c)\nMacht euch mit den Daten vertraut. Plottet sie, seht euch die df’s an, versteht, was sie repräsentieren.\nZ.B. sind folgende Befehle und Plots wichtig:\n\nstr()\nsummarize()\nhead()\nScatterplot, x = Datum, y = Anzahl pro Zeiteinheit\nHistrogram\nusw.\n\nHinweis: Geht noch nicht zu weit mit euren Plots. Die Idee ist, dass man sich einen Überblick über die Daten verschafft und noch keine “analysierenden” Plots erstellt.\n–> Erklärt dem Plenum am 25.10.2021 was ihr gemacht habt, was eure Daten zeigen und präsentiert diese einfachen Plots. \nNachdem nun alle Daten vorbereitet sind folgt im nächsten Schritt die deskriptive Analyse."
  },
  {
    "objectID": "fallstudie_s/5_Vorverarbeitung_Loesung.html",
    "href": "fallstudie_s/5_Vorverarbeitung_Loesung.html",
    "title": "KW 42+43: Lösung Datenvorverarbeitung",
    "section": "",
    "text": "Aufgabe 2: Meteodaten\n\n# Einlesen\nmeteo <- read.csv(\"./data/order_105742_data.txt\", sep = \";\")\n\n# Datentypen setzen\n# Das Datum wird als Integer erkannt. Zuerst muss es in Text umgewaldelt werden aus dem dann\n# das eigentliche Datum herausgelesen werden kann\nmeteo <- transform(meteo, time = as.Date(as.character(time), \"%Y%m%d\"))\n\n# Die eigentlichen Messwerte sind alle nummerisch\nmeteo <- meteo|>\n  mutate(tre200jx = as.numeric(tre200jx))|>\n  mutate(rre150j0 = as.numeric(rre150j0))|>\n  mutate(sremaxdv = as.numeric(sremaxdv)) |> \n  filter(time >= depo_start, time <=  depo_end) # schneide dann auf Untersuchungsdauer\n\n# Was ist eigentlich Niederschlag:\n# https://www.meteoschweiz.admin.ch/home/wetter/wetterbegriffe/niederschlag.html\n\n# Filtere Werte mit NA\nmeteo <- meteo |>\n  filter(!is.na(stn)) |>\n  filter(!is.na(time))|>\n  filter(!is.na(tre200jx))|>\n  filter(!is.na(rre150j0))|>\n  filter(!is.na(sremaxdv))\n# Pruefe ob alles funktioniert hat\nstr(meteo)\nsum(is.na(meteo)) # zeigt die Anzahl NA's im data.frame an\n\n\n\nAufgabe 3: Datenvorverarbeitung (Mutationen)\n\n#.################################################################################################\n# 2. VORBEREITUNG DER DATEN #####\n#.################################################################################################\n\n# 2.1 Convinience Variablen ####\n# fuege dem Dataframe (df) die Wochentage hinzu\ndepo <- depo |> \n  mutate(Wochentag = weekdays(Datum)) |> \n  # R sortiert die Levels aplhabetisch. Da das in unserem Fall aber sehr unpraktisch ist,\n  # muessen die Levels manuell manuell bestimmt werden\n  mutate(Wochentag = base::factor(Wochentag, \n                            levels = c(\"Montag\", \"Dienstag\", \"Mittwoch\", \n                                       \"Donnerstag\", \"Freitag\", \"Samstag\", \"Sonntag\"))) |> \n  # Werktag oder Wochenende hinzufuegen\n  mutate(Wochenende = if_else(Wochentag == \"Montag\" | Wochentag == \"Dienstag\" | \n                           Wochentag == \"Mittwoch\" | Wochentag == \"Donnerstag\" | \n                           Wochentag == \"Freitag\", \"Werktag\", \"Wochenende\"))|>\n  #Kalenderwoche hinzufuegen\n  mutate(KW= isoweek(Datum))|>\n  # monat und Jahr\n  mutate(Monat = month(Datum)) |> \n  mutate(Jahr = year(Datum))\n\n#Lockdown \n# Hinweis: ich mache das nachgelagert, da ich die Erfahrung hatte, dass zu viele \n# Operationen in einem Schritt auch schon mal durcheinander erzeugen koennen.\n# Hinweis II: Wir packen alle Phasen (normal, die beiden Lockdowns und Covid aber ohne Lockdown)\n# in eine Spalte --> long ist schoener als wide\ndepo <- depo |>\n  mutate(Phase = if_else(Datum >= lock_1_start_2020 & Datum <= lock_1_end_2020,\n                         \"Lockdown_1\",\n                         if_else(Datum >= lock_2_start_2021 & Datum <= lock_2_end_2021,\n                                 \"Lockdown_2\",\n                                 if_else(Datum>= (lock_1_start_2020 - years(1)) & Datum < lock_1_start_2020,\n                                         \"Normal\", \n                                         if_else(Datum > lock_2_end_2021,\n                                                 \"Post\", \"Pre\")))))\n\n# hat das gepklappt?!\nunique(depo$Phase)\n\n# aendere die Datentypen\ndepo <- depo |> \n  mutate(Wochenende = as.factor(Wochenende)) |> \n  mutate(KW = factor(KW)) |> \n  # mit factor() koennen die levels direkt einfach selbst definiert werden.\n  # wichtig: speizfizieren, dass aus R base, ansonsten kommt es zu einem \n  # mix-up mit anderen packages\n  mutate(Phase = base::factor(Phase, levels = c(\"Pre\", \"Normal\", \"Lockdown_1\", \"Lockdown_2\", \"Post\")))\n\nstr(depo)\n  \n# Fuer einige Auswertungen muss auf die Stunden als nummerischer Wert zurueckgegriffen werden\ndepo$Stunde <- as.numeric(format(as.POSIXct(depo$Zeit,format=\"%H:%M:%S\"),\"%H\"))\n\n# ersetze 0 Uhr mit 24 Uhr (damit wir besser rechnen können)\ndepo$Stunde[depo$Stunde == 0] <- 24\nunique(depo$Stunde)\ntypeof(depo$Stunde)\n\n# Die Daten wurden kalibriert. Wir runden sie fuer unserer Analysen auf Ganzzahlen\ndepo$Total <- round(depo$Total, digits = 0)\ndepo$Fuss_IN <- round(depo$Fuss_IN, digits = 0)\ndepo$Fuss_OUT <- round(depo$Fuss_OUT, digits = 0)\n\n# 2.2 Tageszeit hinzufuegen ####\n\n# Einteilung Standort Zuerich\nLatitude <- 47.38598\nLongitude <- 8.50806\n\n# Zur Berechnung der Tageslaege muessen wir zuerst den Start und das Ende der Sommer-\n# zeit definieren\n# https://www.schulferien.org/schweiz/zeit/zeitumstellung/\n\nSo_start_2017 <- as.Date(\"2017-03-26\") \nSo_end_2017 <- as.Date(\"2017-10-29\") \nSo_start_2018 <- as.Date(\"2018-03-25\") \nSo_end_2018 <- as.Date(\"2018-10-28\") \nSo_start_2019 <- as.Date(\"2019-03-31\") \nSo_end_2019 <- as.Date(\"2019-10-27\") \nSo_start_2020 <- as.Date(\"2020-03-29\")\nSo_end_2020 <- as.Date(\"2020-10-25\")\nSo_start_2021 <- as.Date(\"2021-03-28\")\nSo_end_2021 <- as.Date(\"2021-10-31\")\nSo_start_2022 <- as.Date(\"2022-03-27\")\nSo_end_2022 <- as.Date(\"2022-10-30\")\n\n# Welche Zeitzone haben wir eigentlich?\n# Switzerland uses Central European Time (CET) during the winter as standard time, \n# which is one hour ahead of Coordinated Universal Time (UTC+01:00), and \n# Central European Summer Time (CEST) during the summer as daylight saving time, \n# which is two hours ahead of Coordinated Universal Time (UTC+02:00).\n# https://en.wikipedia.org/wiki/Time_in_Switzerland\n\n# Was sind Astronomische Dämmerung und Golden Hour ueberhaupt?\n# https://sunrisesunset.de/sonne/schweiz/zurich-kreis-1-city/\n# https://www.rdocumentation.org/packages/suncalc/versions/0.5.0/topics/getSunlightTimes\n\n# Wir arbeiten mit folgenden Variablen:\n# \"nightEnd\" : night ends (morning astronomical twilight starts)\n# \"goldenHourEnd\" : morning golden hour (soft light, best time for photography) ends\n# \"goldenHour\" : evening golden hour starts\n# \"night\" : night starts (dark enough for astronomical observations)\n\nlumidata <-\n  getSunlightTimes(\n    date = seq.Date(depo_start, depo_end, by = 1),\n    keep = c(\"nightEnd\", \"goldenHourEnd\", \"goldenHour\", \"night\"),\n    lat = Latitude,\n    lon = Longitude,\n    tz = \"CET\")\n\nlumidata <- lumidata |> \n  mutate(Jahreszeit = ifelse(date >= So_start_2017 & date <=  So_end_2017 |\n                               date >= So_start_2018 & date <=  So_end_2018 |\n                               date >= So_start_2019 & date <=  So_end_2019 |\n                               date >= So_start_2020 & date <= So_end_2020 |\n                               date >= So_start_2021 & date <= So_end_2021 |\n                               date >= So_start_2022 & date <= So_end_2022, \n                               \"Sommerzeit\", \"Winterzeit\"))\n\n# CH ist im Im Sommer CET + 1. \n# Darum auf alle relevanten Spalten eine Stunde addieren\n# hinweis: ich verzichte hier auf ifelse, da es einfacher und nachvollziehbarer scheint,\n# hier mit einem filter die betreffenden Spalten zu waehlen\nlumidata_So <- lumidata |> \n  filter(Jahreszeit==\"Sommerzeit\") |> \n  mutate(nightEnd = nightEnd + hours(1),\n         goldenHourEnd =  goldenHourEnd + hours(1),\n         goldenHour = goldenHour + hours(1),\n         night = night + hours(1))\n\nlumidata_Wi <- lumidata |> \n  filter(Jahreszeit==\"Winterzeit\") \n# verbinde sommer- und winterzeit wieder\nlumidata <- rbind(lumidata_So, lumidata_Wi) |> \n  arrange(date)\n\n# change data type\nlumidata$date <- as.Date(lumidata$date, format= \"%Y-%m-%d\")\n\n# drop unnecessary cols\nlumidata <- lumidata |> dplyr::select(-lat, -lon)\n\n# jetzt haben wir alle noetigen Angaben zu Sonnenaufgang, Tageslaenge usw. \n# diese Angaben koennen wir nun mit unseren Zaehldaten verbinden:\ndepo <- left_join(depo,lumidata, by = c(\"Datum\" =\"date\"))\n\n# aendere alle Zeit- und Datumsangaben so, dass sie gleich sind und miteinander verrechnet werden können.\ndepo <- depo |> \n  mutate(datetime = paste(Datum, Zeit)) |> \n  mutate(datetime = as.POSIXct(datetime, format = \"%Y-%m-%d  %H:%M:%S\"))|> \n  mutate(nightEnd = as.POSIXct(nightEnd)) |> \n  mutate(goldenHourEnd = as.POSIXct(goldenHourEnd)) |> \n  mutate(goldenHourEnd = goldenHourEnd + hours(1)) |> \n  mutate(goldenHour = as.POSIXct(goldenHour)) |> \n  mutate(goldenHour = goldenHour - hours(1)) |> \n  mutate(night = as.POSIXct(night))\n\n# im naechsten Schritt weise ich den Stunden die Tageszeiten Morgen, Tag, Abend und Nacht zu.\n# diese Zuweisung basiert auf der Einteilung gem. suncalc und eigener Definition.\ndepo <- depo|>\n  mutate(Tageszeit = if_else(datetime >= nightEnd & datetime <= goldenHourEnd, \"Morgen\",\n                             ifelse(datetime > goldenHourEnd & datetime < goldenHour, \"Tag\",\n                                    ifelse(datetime >= goldenHour & datetime <= night,\n                                           \"Abend\",\n                                           \"Nacht\")))) |>\n  mutate(Tageszeit = factor(Tageszeit, levels = c(\n    \"Morgen\", \"Tag\", \"Abend\", \"Nacht\")))\n\n# # behalte die relevanten Var\ndepo <- depo |> dplyr::select(-nightEnd, -goldenHourEnd, -goldenHour, -night)\n\n#Plotte zum pruefn ob das funktioniert hat\np <- ggplot(depo, aes(y = Datum, color = Tageszeit, x = Stunde))+\n  geom_jitter()+\n  scale_color_manual(values=mycolors)\n\nplotly::ggplotly(p)\n\n\n# bei mir hat der Zusatz der Tageszeit noch zu einigen NA-Wertren gefueht. \n# Diese loesche ich einfach:\ndepo <- na.omit(depo)\n# hat das funktioniert?\nsum(is.na(depo))\n\n\n\nAufgabe 4: Aggregierung der Stundendaten\n\n# 2.4 Aggregierung der Stundendaten zu ganzen Tagen ####\n# Zur Berechnung von Kennwerten ist es hilfreich, wenn neben den Stundendaten auch auf Ganztagesdaten\n# zurueckgegriffen werden kann\n# hier werden also pro Nutzergruppe und Richtung die Stundenwerte pro Tag aufsummiert\ndepo_d <- depo |> \n  group_by(Datum, Wochentag, Wochenende, KW, Monat, Jahr, Phase) |> \n  summarise(Total = sum(Fuss_IN + Fuss_OUT), \n            Fuss_IN = sum(Fuss_IN),\n            Fuss_OUT = sum(Fuss_OUT)) \n# Wenn man die Convinience Variablen als grouping variable einspeisst, dann werden sie in \n# das neue df uebernommen und muessen nicht nochmals hinzugefuegt werden\n# pruefe das df\nhead(depo_d)\n\n# nun gruppieren wir nicht nur nach Tag sondern auch noch nach Tageszeit\ndepo_daytime <- depo |> \n  group_by(Datum, Wochentag, Wochenende, KW, Monat, Jahr, Phase, Tageszeit) |> \n  summarise(Total = sum(Fuss_IN + Fuss_OUT), \n            Fuss_IN = sum(Fuss_IN),\n            Fuss_OUT = sum(Fuss_OUT)) \n\n\n# Gruppiere die Werte nach Monat\ndepo_m <- depo |> \n  group_by(Jahr, Monat) |> \n  summarise(Total = sum(Total)) \n# sortiere das df aufsteigend (nur das es sicher stimmt)\ndepo_m <- as.data.frame(depo_m)\ndepo_m[\n  with(depo_m, order(Jahr, Monat)),]\ndepo_m <- depo_m |> \n  mutate(Ym = paste(Jahr, Monat)) |> # und mache eine neue Spalte, in der Jahr und\n  mutate(Ym= lubridate::ym(Ym)) # formatiere als Datum\n\n# Gruppiere die Werte nach Monat und TAGESZEIT\ndepo_m_daytime <- depo |> \n  group_by(Jahr, Monat, Tageszeit) |> \n  summarise(Total = sum(Total)) \n# sortiere das df aufsteigend (nur das es sicher stimmt)\ndepo_m_daytime <- as.data.frame(depo_m_daytime)\ndepo_m_daytime[\n  with(depo_m_daytime, order(Jahr, Monat)),]\ndepo_m_daytime <- depo_m_daytime |> \n  mutate(Ym = paste(Jahr, Monat)) |> # und mache eine neue Spalte, in der Jahr und\n  mutate(Ym= lubridate::ym(Ym)) # formatiere als Datum"
  },
  {
    "objectID": "fallstudie_s/6_Deskr_Analysen_Uebung.html#a",
    "href": "fallstudie_s/6_Deskr_Analysen_Uebung.html#a",
    "title": "KW 43+44: Übung Deskriptiv",
    "section": "1a)",
    "text": "1a)\nNachdem wir die Projektstruktur aufgebaut haben und die Daten vorbereitet (inkl. aggregiert) sind, machen wir uns an die deskriptive Analyse. Dies macht eigentlich immer Sinn. Bevor mach sich an die schliessende Statistik macht, muss man ein “Gefühl” für die Daten bekommen. Dies funktioniert am einfachsten mit explorativen Analysen.\nWir interessieren uns in den Analysen für 5 Zeitabschnitte:\n\nvon Anfang Untersuchungsperiode bis 1 Jahr vor Lockdown 1 (pre)\n1 Jahr vor Corona (normal)\nLockdown 1\nLockdown 2\nEnde 2. Lockdown bis Ende Untersuchungsperiode\n\n\nPlottet den Verlauf der monatlichen Besuchszahlen an eurer Zählstelle. Auf der x-Achse steht dabei dabei Jahr und Monat (gespeichert im df depo_m), auf der y-Achse die monatlichen Besuchszahlen. Zeichnet auch die beiden Lockdown ein (Hinweis: rundet das Start- und Enddatum der Lockdowns auf den Monat, da im Plot die monatlichen Zahlen gezeigt werden).\n\nHaltet euch dabei an untenstehenden Plot:\n\n\n\n\n\nHinweis: - Nutzt zum plotten ggplot() - folgende Codeschnipsel helfen euch:\n\nggplot(data = depo_m, mapping = aes(Ym, Total, group = 1))+ # group 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\n  # zeichne Lockdown 1; ein einfaches Rechteck. bestimme mit min und max die Dimensionen\n  geom_rect(mapping = aes(xmin=\"2020 3\", xmax=\"2020 5\",\n                          ymin =0, ymax=max(Total+(Total/100*10))), # das Rechteck soll 10 % grösser als die maximale Besuchszahl sein \n            fill = \"lightskyblue\", alpha = 0.4, colour = NA)+\n  # zeichne Lockdown 2\n    ...+\n  # zeichne die Linie\n  geom_line(...)+\n  theme_linedraw(base_size = 15)+\n  ...\n\n\nExportiert euren Plot mit ggsave() nach results. Breite = 20, Höhe = 10, Einheiten = cm, dpi = 1000"
  },
  {
    "objectID": "fallstudie_s/6_Deskr_Analysen_Uebung.html#b",
    "href": "fallstudie_s/6_Deskr_Analysen_Uebung.html#b",
    "title": "KW 43+44: Übung Deskriptiv",
    "section": "1b)",
    "text": "1b)\nNachdem wir wissen, wie sich die Besuchszahlen allgemein entwickelt haben, untersuchen wir wie sich diese während den unterschiedlichen Tageszeiten entwickelten.\n\nWie benötigen dazu wieder denselben Datensatz, dieselben x- und y-Achsen. Allerdings ergänzen wir den area-plot mit dem “fill”-Argument:\nSpeichert auch diesen Plot.\n\n\nggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) + \n  geom_area(position = \"fill\")+\n  ..."
  },
  {
    "objectID": "fallstudie_s/6_Deskr_Analysen_Uebung.html#aufgabe-2-wochengang",
    "href": "fallstudie_s/6_Deskr_Analysen_Uebung.html#aufgabe-2-wochengang",
    "title": "KW 43+44: Übung Deskriptiv",
    "section": "Aufgabe 2: Wochengang",
    "text": "Aufgabe 2: Wochengang\nNachdem wir nun wissen, wie sich die Besuchszahlen während der Untersuchungsdauer monatlich entwickelt haben, möchten wir genauer untersuchen, wie sich die Zahlen je nach Phase (Pre, Normal, Lockdown 1, Lockdown 2 und Covid) auf die Wochentage verteilen.\n\n2a)\n\nBerechnet zuerst die Totale Anzahl pro Wochentag pro Phase.\n\n\nmean_phase_wd <- depo_d %>% \n  group_by(...) %>% \n  ...\n\n\nSpeichert das als .csv\n\n\nwrite.csv(mean_phase_wd, \"results/mean_phase_wd.csv\")\n\n\n\n2b)\n\nErstellt einen Boxplot nach untenstehender Vorgabe:\n\n\n\n\n\n\nHinweis: - Nutzt zum plotten ggplot() - folgende Codeschnipsel helfen euch:\n\nggplot(data = depo_d)+\n  geom_boxplot(mapping = aes(x= Wochentag, y = Total, fill = Phase))+\n  ...\n\n\nExportiert auch diesen Plot mit ggsave(). Welche Breite und Höhe passt hier?\n\n\n\n2c)\nSind die Unterschiede zwischen Werktag und Wochenende wirklich signifikant? Falls ja, in allen Phasen oder nur während bestimmter?\n\nPrüft das pro Phase mit einem einfachen t.test."
  },
  {
    "objectID": "fallstudie_s/6_Deskr_Analysen_Uebung.html#aufgabe-3-tagesgang",
    "href": "fallstudie_s/6_Deskr_Analysen_Uebung.html#aufgabe-3-tagesgang",
    "title": "KW 43+44: Übung Deskriptiv",
    "section": "Aufgabe 3: Tagesgang",
    "text": "Aufgabe 3: Tagesgang\nVom Grossen zum Kleinen, von der Übersicht ins Detail. Jetzt widmen wir uns dem Tagesgang, das heisst der Verteilung der Besuchenden auf die 24 Tagesstunden je nach Phase.\n\n3a)\n\nBerechnet zuerst den Mittelwert der Totalen Besuchszahlen pro Wochentag pro Stunde pro Phase. (ganz ähnlich wie unter 2a) und speichert das df unter Mean_h.\n\nggplots haben Daten lieber im Format long als wide.\n\n\n3b)\n\nPlottet den Tagesgang, unterteilt nach den 7 Wochentagen nun für unsere 5 Phasen.\n\n\n\n\n\n\nHinweis: - Nutzt zum plotten ggplot() - folgende Codeschnipsel helfen euch:\n\nggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  facet_grid(...)\n  ..."
  },
  {
    "objectID": "fallstudie_s/6_Deskr_Analysen_Uebung.html#aufgabe-4-kennzahlen",
    "href": "fallstudie_s/6_Deskr_Analysen_Uebung.html#aufgabe-4-kennzahlen",
    "title": "KW 43+44: Übung Deskriptiv",
    "section": "Aufgabe 4: Kennzahlen",
    "text": "Aufgabe 4: Kennzahlen\nSchliesslich berechnen wir noch einige Kennzahlen (Anzahl Passagen, Richtungsverteilung, …).\n\n4a)\n\nGruppiert nach Phase und Tageszeit und berechnet dieses mal die Summe (nicht den Durchschnitt) Total, IN und OUT (ähnlich wie in 2a und 3a).\nNehmt dafür das vorbereitete df “depo_daytime”\nSpeichert das Ergebnis als .csv\n\n\n\n4b)\nDie Zeitreihen der 5 Phasen unterscheiden sich deutlich voneinander. Totale Summen sind da kaum miteinander vergleichbar, besser eignet sich der Durchschnitt oder der Median.\n\nGruppiert nach Phase und Tageszeit und berechnet den Durchschnitt Total, IN und OUT und speichert das df unter mean_phase_d.\nErgänzt das mit der prozentualen Richtungsverteilung\n\n\nmean_phase_d <- mean_phase_d %>% \n  mutate(Proz_IN = round(100/Total*IN, 1)) %>% # berechnen und auf eine Nachkommastelle runden\n  ...\n\n\n\n4c)\nSchliesslich soll das Ergebnis noch visualisiert werden.\n\nErstellt einen Plot nach untenstehendem Beispiel und speichert ihn:"
  },
  {
    "objectID": "fallstudie_s/6_Deskr_Analysen_Loesung.html",
    "href": "fallstudie_s/6_Deskr_Analysen_Loesung.html",
    "title": "KW 43+44: Lösung Deskriptiv",
    "section": "",
    "text": "Aufgabe 2: Wochengang\n\n# mean / d / phase\nmean_phase_wd <- depo_d |> \n  group_by(Wochentag, Phase) |> \n  summarise(Total = mean(Total))\n\nwrite.csv(mean_phase_wd, \"fallstudie_s/results/mean_phase_wd.csv\")\n\n#plot\nggplot(data = depo_d)+\n  geom_boxplot(mapping = aes(x= Wochentag, y = Total, fill = Phase))+\n  labs(title=\"\", y= \"Fussgänger:innen pro Tag\")+\n  scale_fill_manual(values = c(\"lightgray\", \"royalblue\", \"red4\", \"orangered\", \"gold2\"))+\n  theme_classic(base_size = 15)+\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),\n        legend.title = element_blank())\n\n\n\n\n\n\n\nggsave(\"Wochengang_Lockdown.png\", width=15, height=15, units=\"cm\", dpi=1000, \n       path = \"fallstudie_s/results/\")\n\n\n# Statistik: Unterschied WE und WO waehrend Lockdown 1\nt.test(depo_d$Total [depo_d$Phase == \"Lockdown_1\" & depo_d$Wochenende==\"Werktag\"], \n       depo_d$Total [depo_d$Phase == \"Lockdown_1\" & depo_d$Wochenende==\"Wochenende\"])\n\n\n\nAufgabe 3: Tagesgang\n\n# Bei diesen Berechnungen wird jeweils der Mittelwert pro Stunde berechnet. \n# wiederum nutzen wir dafuer \"pipes\"\nMean_h <- depo |> \n  group_by(Wochentag, Stunde, Phase) |> \n  summarise(Total = mean(Total)) \n\n# Plotte den Tagesgang, unterteilt nach Wochentagen\n\nggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5),  \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  facet_grid(rows = vars(Phase))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)\n\n\n\n\n\n\n\nggsave(\"Tagesgang.png\", width=25, height=25, units=\"cm\", dpi=1000,\n       path = \"fallstudie_s/results/\")\n\n\n\nAufgabe 4: Kennzahlen\n\ntotal_phase <- depo_daytime |> \n  # gruppiere nach Phasen inkl. Normal. Diese Levels haben wir bereits definiert\n  group_by(Phase, Tageszeit) |> \n  summarise(Total = sum(Total),\n            IN = sum(Fuss_IN),\n            OUT = sum(Fuss_OUT))\n\nwrite.csv(total_phase, \"fallstudie_s/results/total_phase.csv\")\n\n# mean besser Vergleichbar, da Zeitreihen unterschiedlich lange\nmean_phase_d <- depo_daytime |> \n  group_by(Phase, Tageszeit) |> \n  summarise(Total = mean(Total),\n            IN = mean(Fuss_IN),\n            OUT = mean(Fuss_OUT))\n# berechne prozentuale Richtungsverteilung\nmean_phase_d <- mean_phase_d |> \n  mutate(Proz_IN = round(100/Total*IN, 1)) |> # berechnen und auf eine Nachkommastelle runden\n  mutate(Proz_OUT = round(100/Total*OUT,1))\n\nwrite.csv(mean_phase_d, \"fallstudie_s/results/mean_phase_d.csv\")\n\n# plotte die Verteilung der Fussgänger nach Tageszeit abhängig von der Phase\nggplot(mean_phase_d, mapping = aes(Phase, Total, fill=Tageszeit)) + \n  geom_col(position = \"fill\")+\n  scale_fill_manual(values = mycolors)+\n  theme_classic(base_size = 15)+\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+\n  labs(title= \"\", y=\"Verteilung Fussgänger:innen nach Tageszeit [%]\", x = \"Phase\")\n\n\n\n\n\n\n\nggsave(\"Proz_Entwicklung_Zaehlstelle_Phase.png\", width=20, height=15, units=\"cm\", dpi=1000, \n       path = \"fallstudie_s/results/\")"
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html",
    "href": "fallstudie_s/7_Multivariat_Uebung.html",
    "title": "KW 44: Übung Multivariat",
    "section": "",
    "text": "Nachdem die deskriptiven Resultate vorliegen, kann jetzt die Berechnung eines multivariaten Modells angegangen werden. Das Ziel ist es, den Zusammenhang zwischen der gesamten Anzahl Besucher:innen (Total) und verschiedenen erklärenden Variablen (Tageszeit, Wetter, Ferien, Phase Covid, Wochentag, KW, Jahr) aufzuzeigen."
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-1-verbinden-von-daten",
    "href": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-1-verbinden-von-daten",
    "title": "KW 44: Übung Multivariat",
    "section": "Aufgabe 1: Verbinden von Daten",
    "text": "Aufgabe 1: Verbinden von Daten\nAktuell haben wir noch zwei einzelne Datensätze von Interesse:\n\neinen mit den täglichen Besuchszahlen von Besucher:innen mit den dazugehörigen Datumsinformationen (Datensatz “depo_d” - zu Tagen aggregierte Stunden)\nund einen mit den Wetterparametern (“meteo”).\n\n\nDiese beiden Datensätze müssen miteinander verbunden werden. Ziel: Ein Datensatz mit den täglichen Zähldaten (sowie Conviniencevariablen wie Wetter, Phase Covid, Tageszeit usw.) angereichert mit Wetterdaten. Der neue Datensatz soll ” umwelt ” heissen.\nSind durch das Zusammenführen NA’s entstanden? Falls ja, müssen alle für die weiteren Auswertungen ausgeschlossen werden."
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-2-convenience-variablen-faktoren-skalieren",
    "href": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-2-convenience-variablen-faktoren-skalieren",
    "title": "KW 44: Übung Multivariat",
    "section": "Aufgabe 2: Convenience Variablen, Faktoren, Skalieren",
    "text": "Aufgabe 2: Convenience Variablen, Faktoren, Skalieren\n\n2a)\nWir haben bereits verschiedene Convenience Variablen definiert. Nun brauchen wir noch neu die Ferienzeiten als Faktor.\nIch mache das elegant mit der Funktion von Melina Grether (MSc ENR 21).\nZuerst erstellen wir ein data.frame mit den Start- und Endzeitpunkten der Ferien:\n\nStart <- c(Winterferien_2016_start, Fruehlingsferien_2017_start, Sommerferien_2017_start, Herbstferien_2017_start, \n           Winterferien_2017_start, Fruehlingsferien_2018_start, Sommerferien_2018_start, Herbstferien_2018_start,\n           Winterferien_2019_start, Fruehlingsferien_2019_start, Sommerferien_2019_start, Herbstferien_2019_start,\n           Winterferien_2020_start, Fruehlingsferien_2020_start, Sommerferien_2020_start, Herbstferien_2020_start,\n           Winterferien_2021_start, Fruehlingsferien_2021_start, Sommerferien_2021_start, Herbstferien_2021_start,\n           Winterferien_2022_start, Fruehlingsferien_2022_start, Sommerferien_2022_start, Herbstferien_2022_start)\nEnd <- c(Winterferien_2016_ende, Fruehlingsferien_2017_ende, Sommerferien_2017_ende, Herbstferien_2017_ende, \n         Winterferien_2017_ende, Fruehlingsferien_2018_ende, Sommerferien_2018_ende, Herbstferien_2018_ende,\n         Winterferien_2019_ende, Fruehlingsferien_2019_ende, Sommerferien_2019_ende, Herbstferien_2019_ende,\n         Winterferien_2020_ende, Fruehlingsferien_2020_ende, Sommerferien_2020_ende, Herbstferien_2020_ende,\n         Winterferien_2021_ende, Fruehlingsferien_2021_ende, Sommerferien_2021_ende, Herbstferien_2021_ende,\n         Winterferien_2022_ende, Fruehlingsferien_2022_ende, Sommerferien_2022_ende, Herbstferien_2022_ende)\n\n# verbinde das zu einem df\nferien <- data.frame(Start, End)\n\nJetzt schreiben wir die Funktion, mit welcher wir die Ferienzeiträume zuweisen können. Einfach gesagt: WENN grösser gleich Starzeitraum UND kleiner gleich Endzeitraum, DANN schreibe eine 1. Wo es keine 1 hat, wird ein NA generiert. Ersetze das dann mit 0.\n\nfor (i in 1:nrow(ferien)){\n  umwelt$Ferien[umwelt$Datum >= ferien[i,\"Start\"] & umwelt$Datum <= ferien[i,\"End\"]] <- 1\n}\numwelt$Ferien[is.na(umwelt$Ferien)] <- 0\n\nZum einfachen prüfen, ob das funktioniert hat, kann man die Anzahl Ferientage zählen. Diese sollte nicht gleich 0 sein.\n\n\n2b)\n\nMacht aus den Ferien einen Faktor.\nAuch das Jahr, der Monat und die KW müssen als Faktor vorliegen.\n\nHinweis: Im Modell werden die Levels der Variablen (z.B. bei der Phase Covid: Pre, Normal, Lockdown 1 und 2, Covid) per “default” alphabetisch geordnet und die Effektstärken der einzelnen Levels gegenüber dem ersten Level gerechnet. Das macht wenig Sinn, den ohne eigene Ordnung zeigt es uns die Effekte von Lockdown 1, Lockdown 2 und Normal gegenüber Covid an. Besser ist aber Lockdown 1, Lockdown 2 und Covid gegenüber Pre.\nDas solltet ihr bereits unter [KW 42+43: Übung Datenvorverarbeitung], Aufgabe 3: Datenvorverarbeitung gemacht haben.\n\nVergewissert euch, dass die numerischen Messwerte zu Wetter auch in numerischer Form vorliegen. (is.numeric())\nNachfolgende Schritte funktionieren nur, wenn umwelt als data.frame vorliegt! Prüft das und ändert das, falls noch kein data.frame (Hinweis: auch ein “tibble” funktioniert nicht, obwohl bei der Abfrage is.data.frame() TRUE angegeben wird. Damit ihr beim scalen keine NaN Werte erhaltet, wendet ihr darum am besten in allen Fällen zuerst den Befehl as.data.frame() an).\nUnser Modell kann in der abhängigen Variabel nur mit Ganzzahlen (Integer) umgehen. Daher müssen Kommazahlen in Integer umgewandelt werden. Zum Glück haben wir das schon gemacht und uns bleibt nichts weiter zu tun. =)\n\n\n\n2c)\nProblem: verschiedene Skalen der Variablen (z.B. Temperatur in Grad Celsius, Niederschlag in Millimeter und Sonnenscheindauer in %)\n\nLösung: Skalieren aller Variablen mit Masseinheiten gemäss unterstehendem Code:\n\n\numwelt <- umwelt %>% \n  mutate(tre200jx_scaled = scale(tre200jx)%>%\n  ..."
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-3-korrelationen-und-variablenselektion",
    "href": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-3-korrelationen-und-variablenselektion",
    "title": "KW 44: Übung Multivariat",
    "section": "Aufgabe 3: Korrelationen und Variablenselektion",
    "text": "Aufgabe 3: Korrelationen und Variablenselektion\n\n3a)\nKorrelierende Variablen können das Modellergebnis verfälschen. Daher muss vor der Modelldefinition auf Korrelation zwischen den Messwerten getestet werden. Welches sind die erklärenden Variablen, welches ist die Abhängige? (Ihr müsst nicht prüfen, ob die Voraussetzungen zur Berechnung von Korrelationen erfüllt sind)\n\nTeste mittels folgendem Code auf eine Korrelation zwischen den Messwerten.\n\n\ncor <-  cor(umwelt[,ERSTE SPALTE MIT ERKLAERENDEN MESSWERTEN : \n                     LETZTE SPALTE MIT ERKLAERENDEN MESSWERTEN)])\n\n\n\n3b)\n\nKorrelationsmatrix erstellen\n\nMit dem folgenden Code kann eine Korrelationsmatrix (mit den Messwerten) aufgebaut werden. Hier kann auch die Schwelle für die Korrelation gesetzt werden (0.7 ist liberal / 0.5 konservativ).\n\ncor[abs(cor) < 0.7] <-  0 #Setzt alle Werte kleiner 0.7 auf 0\n\nZur Visualisierung kann ein einfacher Plot erstellt werden.\n\nchart.Correlation(umwelt[,ERSTE SPALTE MIT ERKLAERENDEN MESSWERTEN : \n                     LETZTE SPALTE MIT ERKLAERENDEN MESSWERTEN)], histogram=TRUE, pch=19)\n\nWo kann eine kritische Korrelation beobachtet werden? Kann man es verantworten, trotzdem alle (Wetter)parameter in das Modell zu geben?\nFalls ja: warum? Falls nein: schliesst den betreffenden Parameter aus. Wenn ihr Parameter ausschliesst: welchen der beiden korrelierenden Parameter behaltet ihr im Modell?"
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-4-optional-automatische-variablenselektion",
    "href": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-4-optional-automatische-variablenselektion",
    "title": "KW 44: Übung Multivariat",
    "section": "Aufgabe 4 (OPTIONAL): Automatische Variablenselektion",
    "text": "Aufgabe 4 (OPTIONAL): Automatische Variablenselektion\nFühre die dredge-Funktion und ein Modelaveraging durch. Der Code dazu ist unten. Was passiert in der Funktion? Macht es Sinn, die Funktion auszuführen?\nHinweis: untenstehender Code ist sehr rechenentensiv.\n\n# Hier wird die Formel für die dredge-Funktion vorbereitet\nf <- Total ~ Wochentag + Ferien + Phase + Monat + \n  tre200jx_scaled + rre150j0_scaled + rre150n0_scaled + \n  sremaxdv_scaled\n# Jetzt kommt der Random-Factor hinzu und es wird eine Formel daraus gemacht\nf_dredge <- paste(c(f, \"+ (1|Jahr)\"), collapse = \" \") |>\n  as.formula()\n# Das Modell mit dieser Formel ausführen\nm <- glmer.nb(f_dredge, data = umwelt, na.action = \"na.fail\")\n# Das Modell in die dredge-Funktion einfügen (siehe auch ?dredge)\nall_m <- dredge(m)\n# suche das beste Modell\nprint(all_m)\n# Importance values der Variablen\n# hier wird die wichtigkeit der Variablen in den verschiedenen Modellen abgelesen\nMuMIn::sw(all_m)\n\n# Schliesslich wird ein Modelaverage durchgeführt\n# Schwellenwert für das delta-AIC = 2\navgmodel <- model.avg(all_m, rank = \"AICc\", subset = delta < 2)\nsummary(avgmodel)"
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-5-verteilung-der-abhängigen-variabel-pruefen",
    "href": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-5-verteilung-der-abhängigen-variabel-pruefen",
    "title": "KW 44: Übung Multivariat",
    "section": "Aufgabe 5: Verteilung der abhängigen Variabel pruefen",
    "text": "Aufgabe 5: Verteilung der abhängigen Variabel pruefen\nDie Verteilung der abhängigen Variabel bestimmt, was für ein Modell geschrieben werden kann. Die Modelle gehen von einer gegebenen Verteilung aus. Wenn diese Annahme verletzt wird, kann es sein, dass das Modellergebnis nicht valide ist.\n\nFolgender Codeblock zeigt, wie die Daten auf verschiedene Verteilungen passen.\n\nHinweis: es kann sein, dass nicht jede Verteilung geplottet werden kann, es erscheint eine Fehlermeldung. Das ist nicht weiter schlimm, die betreffende Verteilung kann gelöscht werden. Analog muss das auch im Befehl gofstat() passieren.\n\nDie besten drei Verteilungen (gemäss AIC) sollen zur Visualisierung geplottet werden. Dabei gilt, je besser die schwarze Punktlinie (eure Daten) auf die farbigen Linien (theoretische Verteilungen) passen, desto besser ist diese Verteilung geeignet.\n\nHinweis: CDF = Cumulative distribution function; Wikipedia = “Anschaulich entspricht dabei der Wert der Verteilungsfunktion an der Stelle x der Wahrscheinlichkeit, dass die zugehörige Zufallsvariable X einen Wert kleiner oder gleich x annimmt.” Ihr müsst aber nicht weiter verstehen, wie das berechnet wird, wichtig für euch ist, dass ihr den Plot interpretieren könnt.\n\nf1<-fitdist(umwelt$Anzahl_Total,\"norm\")  # Normalverteilung\nf1_1<-fitdist(umwelt$Anzahl_Total,\"lnorm\")  # log-Normalvert. \nf2<-fitdist(umwelt$Anzahl_Total,\"pois\")  # Poisson\nf3<-fitdist(umwelt$Anzahl_Total,\"nbinom\")  # negativ binomial\nf4<-fitdist(umwelt$Anzahl_Total,\"exp\")  # exponentiell\nf5<-fitdist(umwelt$Anzahl_Total,\"gamma\")  # gamma\nf6<-fitdist(umwelt$Anzahl_Total,\"logis\")  # logistisch\nf7<-fitdist(umwelt$Anzahl_Total,\"geom\")  # geometrisch\nf8<-fitdist(umwelt$Anzahl_Total,\"weibull\")  # Weibull\n\ngofstat(list(f1,f1_1,f2,f3,f4,f5,f6,f7,f8), \n        fitnames = c(\"Normalverteilung\", \"log-Normalverteilung\", \"Poisson\",\n                     \"negativ binomial\",\"exponentiell\",\"gamma\", \"logistisch\",\n                     \"geometrisch\",\"weibull\"))\n\n# die 2 besten (gemaess Akaike's Information Criterion) als Plot + normalverteilt, \nplot.legend <- c(\"Normalverteilung\", \"exponentiell\", \"negativ binomial\")\n# vergleicht mehrere theoretische Verteilungen mit den empirischen Daten\ncdfcomp(list(f1, f4, f3), legendtext = plot.legend)\n\n\nWie sind unsere Daten verteilt? Welche Modelle können wir anwenden?\nWählt die besten zwei Verteilungen aus und berechnet damit nachfolgend Modelle."
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-6-multivariates-modell-berechnen",
    "href": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-6-multivariates-modell-berechnen",
    "title": "KW 44: Übung Multivariat",
    "section": "Aufgabe 6: Multivariates Modell berechnen",
    "text": "Aufgabe 6: Multivariates Modell berechnen\nIch verwende die Funktion glmer() aus der Bibliothek lme4 (diese Bibliothek wird auch in vielen wissenschaftlichen Papern im Feld Biologie / Wildtiermamagement zitiert).\nHinweise zu GLMM: https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html\n\n6a)\nHinweis: Auch wenn wir gerade herausgefunden haben, dass die Verteilung negativ binominal (in meinem Fall) ist, berechne ich für den Vergleich zuerst ein “einfaches Modell” der Familie poisson. Alternative Modelle rechnen wir in 6c.\n\nDie Totale Besucheranzahl soll durch die Wetterparameter, den Wochentag, die Ferien sowie die Covid-Phasen und die Tageszeit erklärt werden (Datensatz “umwelt”). Die einzelnen Jahre sollen hierbei nicht beachtet werden, sie werden als “random factor” bestimmt.\n\nFrage: Warum bestimmen wir das Jahr als random factor?\nFalls ihr der Meinung seid, Jahr ist kein “guter” random factor, dann nehmt es nicht an random factor ins Modell sondern als erklärende Variable. Begründet das unbedingt in eurer Methodik.\nDie Modellformel lautet:\n\nTages_Model <- glmer(ABHAENGIGE VARIABLE ~ ERKLAERENDE VARIABLE 1 + ERKLAERENDE VARIABLE 2 +\n                      ERKLAERENDE VARIABLE 3 + ERKLAERENDE VARIABLE 4 + \n                      ERKLAERENDE VARIABLE 5 + ... +\n                     (1|RANDOM FACTOR),\n                     family = poisson, data = DATENSATZ))\n\nsummary(Tages_Model) #Zeigt das Resultat des Modells\n\nFrage: Was bedeutet “family = poisson”?\nLöst zuerst Aufgabe 6b bevor ihr alternative Modelle rechnet; das kommt in Aufgabe 6c!\n\n\n6b) Modelldiagnostik\n\nPrüft optisch ob euer Modell valide ist.\n\nHinweis: glmer bringt einige eigene Funktionen mit, mit denen sich testen lässt, ob das Modell valide ist. Unten sind sie aufgeführt (–> analog zu den Funktionen aus der Vorlesung, aber halt für glmer).\n\n# Inspektionsplots\nplot(Tages_Model, type = c(\"p\", \"smooth\"))\nqqmath(Tages_Model)\n# pruefe auf Overdispersion\ndispersion_glmer(Tages_Model) #it shouldn't be over 1.4\n# wir gut erklaert das Modell?\nr.squaredGLMM(Tages_Model) \n# check for multicollinearity\n# https://rforpoliticalscience.com/2020/08/03/check-for-multicollinearity-with-the-car-package-in-r/\ncar::vif(Tages_Model) # VIF für beide predictors = 1, d.h. voneinander unabhängig (kritisch wird es ab einem Wert von >4-5)\n\nSind die Voraussetzungen des Modells erfüllt?\n\n\n6c) Alternative Modelle\nWir sind auf der Suche nach dem minimalen adäquaten Modell. Das ist ein iterativer Prozess. Wir schreiben ein Modell, prüfen ob die Voraussetzungen erfüllt sind und ob die abhängige Variable besser erklärt wird als im vorhergehenden. Und machen das nochmals und nochmals…\n\nÜber family = kann in der Funktion _glmer()__ einiges (aber leider nicht alles so einfach [z.B. negativ binominale Modelle]) angepasst werden: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/family.html\nAuch über link = kann man anpassen: https://stat.ethz.ch/R-manual/R-devel/library/stats/html/make.link.html\nUnsere (meine) Daten sind negativ binominal verteilt. Daher sollte wir unbedingt ein solches Modell programmieren. –> Funktion glmer.nb()\nFalls die Daten exponentiell Verteilt sind, hier der Link zu einem Blogeintrag dazu: https://stats.stackexchange.com/questions/240455/fitting-exponential-regression-model-by-mle\nHypothese: “Es gehen weniger Leute in den Wald, wenn es zu heiss ist” –> auf quadratischen Term Temperatur testen (Codeblock unten).\n\n\n  ...\ntre200jx_scaled + I(tre200jx_scaled^2) + \n  ...\n\n\nKönnte es zwischen einzelnen Variablen zu Interaktionen kommen, die plausible sind? (z. B.: Im Winter hat Niederschlag einen negativeren Effekt als im Sommer, wenn es heiss ist) –> Falls ja: testen!\n\nHinweis: Interaktionen berechnen ist sehr rechenintensiv. Auch die Interpretation der Resultate wird nicht unbedingt einfacher. Wenn ihr auf Interaktionen testet, dann geht “langsam” vor, probiert nicht zu viel auf einmal.\n\nWenn ihr verschiedene Modelle gerechnet habt, können diese über den AICc verglichen werden. Folgender Code kann dazu genutzt werden:\n\nHinweis: Nur Modelle mit demselben Datensatz können miteinander verglichen werden. D.h., dass die Modelle mit den originalen Daten nicht mit logarithmiertem oder exponierten Daten verglichen werden können.\n\n## Vergleich der Modellguete mittels AICc\ncand.models<-list()\ncand.models[[1]] <- Tages_Model\ncand.models[[2]] <- Tages_Model_nb\ncand.models[[3]] <- Tages_Model_nb_quad\n\nModnames<-c(\"Tages_Model\",\"Tages_Model_nb\", \n            \"Tages_Model_nb_quad\")\naictab(cand.set=cand.models,modnames=Modnames)\n##K = Anzahl geschaetzter Parameter (2 Funktionsparameter und die Varianz)\n##Delta_AICc <2 = Statistisch gleichwertig\n##AICcWt =  Akaike weight in %\n\n\n\n6d) (OPTIONAL) Transformationen\nBei meinen Daten waren die Modellvoraussetzungen überall mehr oder weniger verletzt. Das ist ein Problem, allerdings auch nicht ein so grosses (man sollte es aber trotzdem ernst nehmen). Mehr dazu unter:\nSchielzeth et al. Robustness of linear mixed‐effects models to violations of distributional assumptions https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.13434 Lo and Andrews, To transform or not to transform: using generalized linear mixed models to analyse reaction time data https://www.frontiersin.org/articles/10.3389/fpsyg.2015.01171/full\nFalls die Voraussetzungen stark verletzt werden, wäre eine Transformation angezeigt.\nMehr dazu unter:\nhttps://www.datanovia.com/en/lessons/transform-data-to-normal-distribution-in-r/\n\nWenn ihr das machen wollt, berechnet zuerst den skewness coefficient\n\n\nlibrary(moments)\nskewness(umwelt$Anzahl_Total)\n## A positive value means the distribution is positively skewed (rechtsschief).\n## The most frequent values are low; tail is toward the high values (on the right-hand side)\n\n\nWelche Transformation kann angewandt werden?\nWas spricht gegen eine Transformation (auch im Hinblick zur Visualisierung und Interpretation)? Was spricht dafür?\n\n\n\n6c) Exportiere die Modellresultate (des besten Modells)\nModellresultate können mit summary() angezeigt werden. Ich verwende aber lieber die Funktion tab_model()! Die Resultate werden gerundet und praktisch im separaten Fenster angezeigt. Von dort kann man sie via copy + paste ins (z.B.) Word bringen.\n\ntab_model(MODELLNAME, transform = NULL, show.se = TRUE)\n## The marginal R squared values are those associated with your fixed effects, \n## the conditional ones are those of your fixed effects plus the random effects. \n## Usually we will be interested in the marginal effects."
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-7-modellvisualisierung",
    "href": "fallstudie_s/7_Multivariat_Uebung.html#aufgabe-7-modellvisualisierung",
    "title": "KW 44: Übung Multivariat",
    "section": "Aufgabe 7: Modellvisualisierung",
    "text": "Aufgabe 7: Modellvisualisierung\n\nVisualisiert die (signifikanten) Ergebnisse eures Modells.\n\nDas Resultat soll sich für kontinuierliche Variablen an untenstehendem Plot orientieren:\n\n\n\n\n\nFür diskrete Variablen haltet ihr euch bitte an diesen Plot:\n\n\n\n\n\nSabrina Harsch hat im HS21 eine sehr nützliche Funktion dafür geschriben:\n\n rescale_plot_num <- function(input_df, input_term, unscaled_var, scaled_var, num_breaks, x_lab, y_lab, x_scaling, x_nk) {\n  \n  plot_id <- plot_model(input_df, type = \"pred\", terms = input_term, axis.title = \"\", title=\"\")\n  labels <- round(seq(floor(min(unscaled_var)), ceiling(max(unscaled_var)), length.out = num_breaks+1)*x_scaling, x_nk)\n  \n  custom_breaks <- seq(min(scaled_var), max(scaled_var), by = ((max(scaled_var)-min(scaled_var))/num_breaks))\n  custom_limits <- c(min(scaled_var), max(scaled_var))\n  \n  plot_id <- plot_id +\n    scale_x_continuous(breaks = custom_breaks, limits = custom_limits, labels = c(labels), labs(x=x_lab)) +\n    scale_y_continuous(labs(y=y_lab), limits = c(0,50)) +\n    theme_classic(base_size = 20)\n  \n  return(plot_id)\n}\n\nNun können die einzelnen Variabeln in der Funktion jeweils für die Plots angepasst werden:\n\n## Tagesmaximaltemperatur\ninput_df     <-  Tages_Model_nb_quad\ninput_term   <- \"tre200jx_scaled [all]\"\nunscaled_var <- umwelt$tre200jx\nscaled_var   <- umwelt$tre200jx_scaled\nnum_breaks   <- 10\nx_lab        <- \"Temperatur [°C]\"\ny_lab        <- \"Fussgänger:innen pro Tag\"\nx_scaling    <- 1 # in prozent\nx_nk         <- 0   # x round nachkommastellen    \n\n\np_temp <- rescale_plot_num(input_df, input_term, unscaled_var, scaled_var, num_breaks, \n                         x_lab, y_lab, x_scaling, x_nk)\np_temp\n\n\nExportiert die Ergebnisse via ggsave().\nPasst die Funktion so an, dass damit nicht nur die kontinuierlichen Variablen sondern auch die diskreten Variablen geplottet werden können (das ist schon fortgeschritten; Falls ihr nicht weiterkommt, kommt auf mich zu).\n\nHinweis: damit unsere Plots verglichen werden können, sollen sie alle dieselbe Skalierung (limits) auf der y-Achse haben. Das wird erreicht, indem man bei jedem Plot die limits in scale_y_continuous() gleichsetzt.\nHinweis: Es könnten auch interaction-plots erstellt werden: https://cran.r-project.org/web/packages/sjPlot/vignettes/plot_interactions.html"
  },
  {
    "objectID": "fallstudie_s/7_Multivariat_Uebung.html#abschluss",
    "href": "fallstudie_s/7_Multivariat_Uebung.html#abschluss",
    "title": "KW 44: Übung Multivariat",
    "section": "Abschluss",
    "text": "Abschluss\nNun habt ihr verschiedenste Ergebnisse vorliegen. In einem wissenschaftlichen Bericht sollen aber niemals alle Ergebnisse abgebildet werden. Eine Faustregel besagt, dass nur signifikante Ergebnisse visualisiert werden. Entscheidet euch daher, was ihr in eurem Bericht abbilden wollt und was lediglich besprochen werden soll."
  },
  {
    "objectID": "fallstudie_n/1_Vorbemerkung.html",
    "href": "fallstudie_n/1_Vorbemerkung.html",
    "title": "1. Vorbemerkung",
    "section": "",
    "text": "Aktuell dient diese Plattform für die BiEc Fallstudie - Profil N einzig der Bereitstellung von Aufgaben die von euch im Rahmen dieses Fallstudienprojekts erarbeitet werden sollen. Die Aufgaben werden in den meisten Fällen mit Code-Beispielen erläutert oder benötigten Code-snippets resp. Funktionen werden mitgeliefert. Im Laufe des Semesters werden hier ausserdem häppchenweise (mögliche) Lösungen zu den Aufgaben aufgeschaltet. Alles grundlegende Material und alle Unterlagen zu den theoretischen Inputs sind weiterhin und ausschliesslich im Moodlekurs Research Methods - Fallstudie BiEc zu finden. Die für die Aufgaben benötigten Datengrundlagen sind ebenfalls im entsprechenden Abschnitt auf Moodle zu finden. Frohes Schaffen!"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Uebung.html",
    "href": "fallstudie_n/2_Datenverarbeitung_Uebung.html",
    "title": "2. Daten(vor)verarbeitung - Übung",
    "section": "",
    "text": "Vor den eigentlichen Auswertungen müssen einige vorbereitende Arbeiten unternommen werden. Die Zeit, die man hier investiert, wird in der späteren Projektphase um ein vielfaches eingespart. Im Skript soll die Ordnerstruktur des Projekts genannt werden, damit der Arbeitsvorgang auf verschiedenen Rechnern reproduzierbar ist.\nArbeitet mit Projekten, da diese sehr einfach ausgetauscht und somit auch reproduziert werden önnen; es gibt keine absoluten Arbeitspfade sondern nur relative. Der Datenimport (und auch der Export) kann mithilfe dieser relativen Pfaden stark vereinfacht werden. Projekte helfen alles am richtigen Ort zu behalten. (mehr zur Arbeit mit Projekten: Link)"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufbau-von-r-skripten",
    "href": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufbau-von-r-skripten",
    "title": "2. Daten(vor)verarbeitung - Übung",
    "section": "Aufbau von R-Skripten",
    "text": "Aufbau von R-Skripten\nIm Kopf des Skripts zuerst immer den Titel des Projekts sowie die Autor:innen des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklärt werden, wer die Datenherrschaft hat (Rehdaten: Forschungsgruppe WILMA).\n\n#.##################################################################################\n# Daten(vor)verarbeitung Fallstudie WPZ  ####\n# Modul Research Methods, HS22. Autor/in ####\n#.##################################################################################\n\n# Beschreibt zudem folgendes:\n# • Ordnerstruktur; ich verwende hier den Projektordner mit den Unterordnern: \n#   • Skripts\n#   • Data\n#   • Results\n#   • Plots\n# • Verwendete Daten\n\n# Ein Skript soll in R eigentlich immer nach dem selbem Schema aufgebaut sein. \n# Dieses Schema beinhaltet (nach dem bereits erwähnten Kopf des Skripts) 4 Kapitel: \n\n\nDatenimport\nDatenvorverarbeitung\nAnalyse\nVisualisierung\n\nBereitet euer Skript also nach dieser Struktur vor. Nutzt für den Text, welcher nicht Code ist, vor dem Text das Symbol #. Wenn ihr den Text als Titel definieren wollt, der die grobe Struktur des Skripts absteckt, baut in wie in folgendem Beispiel auf:\n\n#.###################################################################################\n# METADATA ####\n#.###################################################################################\n# Datenherkunft ####\n# ...\n\n#.###################################################################################\n# 1. DATENIMPORT ####\n#.###################################################################################"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Uebung.html#libraries-laden",
    "href": "fallstudie_n/2_Datenverarbeitung_Uebung.html#libraries-laden",
    "title": "2. Daten(vor)verarbeitung - Übung",
    "section": "Libraries laden",
    "text": "Libraries laden\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Uebung.html#daten-laden",
    "href": "fallstudie_n/2_Datenverarbeitung_Uebung.html#daten-laden",
    "title": "2. Daten(vor)verarbeitung - Übung",
    "section": "Daten laden",
    "text": "Daten laden\nHerunterladen der Daten der Feldaufnahmen von Moodle (Aufgabe3_Feldaufnahmen_alle_Gruppen.zip), Einlesen, Sichtung der Datensätze und der Datentypen.\n\ndf_team1 <- read_delim(\"fallstudie_n/data/Felderhebungen_Waldstruktur.csv\", delim = \";\")\n\ndf_team2 <- read_delim(\"fallstudie_n/data/Felderhebung_11102022_gr3.csv\", delim = \";\")\n\ndf_team3 <- read_delim(\"fallstudie_n/data/Felderhebung_Waldstruktur_TEAM3_pink_Gruppe 7.csv\",\n    delim = \";\")\n\ndf_team4 <- read_delim(\"fallstudie_n/data/Felderhebungen_Team4_Blau_221011.csv\",\n    delim = \";\")\n\ndf_team5 <- read_delim(\"fallstudie_n/data/Felderhebung TEAM 5.csv\", delim = \";\")\n\ndf_team6 <- read_delim(\"fallstudie_n/data/Team6_Felderhebung.csv\", delim = \";\")\n\n# hier können die Probekreise mit den Angaben zur Anzahl Rehlokalisationen und\n# der LIDAR-basierten Ableitung der Waldstruktur eingelesen werden\n\ndf_reh <- read_delim(\"fallstudie_n/data/Aufgabe3_Reh_Waldstruktur_221013.csv\", delim = \";\")\nstr(df_reh)\n\n# Die eingelesenen Datensätze anschauen und versuchen zu einem Gesamtdatensatz\n# verbinden. Ist der Output zufriedenstellend?\n\ndf_gesamt <- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5, df_team6)\nstr(df_gesamt)"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufgabe-1",
    "href": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufgabe-1",
    "title": "2. Daten(vor)verarbeitung - Übung",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\n\n1.1 Einfügen zusätzliche Spalte pro Datensatz mit der Gruppenzugehörigkeit (Team1-6)\n1.2 Spaltenumbenennung damit die Bezeichungen in allen Datensätzen gleich sind und der Gesamtdatensatz zusammengefügt werden kann –> Befehle mutate und rename, mit pipes (alt: %>%, neu: |>) in einem Schritt möglich"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufgabe-2",
    "href": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufgabe-2",
    "title": "2. Daten(vor)verarbeitung - Übung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nZusammenführen der Teildatensätze zu einem Datensatz"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufgabe-3",
    "href": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufgabe-3",
    "title": "2. Daten(vor)verarbeitung - Übung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nVerbinden (join) des Datensatzes der Felderhebungen mit dem Datensatz der Rehe.\nZiel: ein Datensatz mit allen Kreisen der Felderhebung, angereichert mit den Umweltvariablen Understory und Overstory aus den LIDAR-Daten (DG_us, DG_os) aus dem Rehdatensatz. –> Welche Art von join? Welche Spalten zum Verbinden (by = ?) der Datensätze"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufgabe-4",
    "href": "fallstudie_n/2_Datenverarbeitung_Uebung.html#aufgabe-4",
    "title": "2. Daten(vor)verarbeitung - Übung",
    "section": "Aufgabe 4",
    "text": "Aufgabe 4\nScatterplot der korrespondondierenden Umweltvariablen aus den Felderhebungen gegen die Umweltvariablen aus den LIDAR-Daten erstellen (zusätzlich Einfärben der Gruppen und Regressionslinie darüberlegen)."
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Loesung.html",
    "href": "fallstudie_n/2_Datenverarbeitung_Loesung.html",
    "title": "2. Daten(vor)verarbeitung - Lösung",
    "section": "",
    "text": "Vor den eigentlichen Auswertungen müssen einige vorbereitende Arbeiten unternommen werden. Die Zeit, die man hier investiert, wird in der späteren Projektphase um ein vielfaches eingespart. Im Skript soll die Ordnerstruktur des Projekts genannt werden, damit der Arbeitsvorgang auf verschiedenen Rechnern reproduzierbar ist.\nArbeitet mit Projekten, da diese sehr einfach ausgetauscht und somit auch reproduziert werden önnen; es gibt keine absoluten Arbeitspfade sondern nur relative. Der Datenimport (und auch der Export) kann mithilfe dieser relativen Pfaden stark vereinfacht werden. Projekte helfen alles am richtigen Ort zu behalten. (mehr zur Arbeit mit Projekten: Link)"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Loesung.html#aufbau-von-r-skripten",
    "href": "fallstudie_n/2_Datenverarbeitung_Loesung.html#aufbau-von-r-skripten",
    "title": "2. Daten(vor)verarbeitung - Lösung",
    "section": "Aufbau von R-Skripten",
    "text": "Aufbau von R-Skripten\nIm Kopf des Skripts zuerst immer den Titel des Projekts sowie die Autor:innen des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklärt werden, wer die Datenherrschaft hat (Rehdaten: Forschungsgruppe WILMA).\n\n#.##################################################################################\n# Daten(vor)verarbeitung Fallstudie WPZ  ####\n# Modul Research Methods, HS22. Autor/in ####\n#.##################################################################################\n\n# Beschreibt zudem folgendes:\n# • Ordnerstruktur; ich verwende hier den Projektordner mit den Unterordnern: \n#   • Skripts\n#   • Data\n#   • Results\n#   • Plots\n# • Verwendete Daten\n\n# Ein Skript soll in R eigentlich immer nach dem selbem Schema aufgebaut sein. \n# Dieses Schema beinhaltet (nach dem bereits erwähnten Kopf des Skripts) 4 Kapitel: \n\n\nDatenimport\nDatenvorverarbeitung\nAnalyse\nVisualisierung\n\nBereitet euer Skript also nach dieser Struktur vor. Nutzt für den Text, welcher nicht Code ist, vor dem Text das Symbol #. Wenn ihr den Text als Titel definieren wollt, der die grobe Struktur des Skripts absteckt, baut in wie in folgendem Beispiel auf:\n\n#.###################################################################################\n# METADATA ####\n#.###################################################################################\n# Datenherkunft ####\n# ...\n\n#.###################################################################################\n# 1. DATENIMPORT ####\n#.###################################################################################\n\n\nLibraries laden\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Loesung.html#daten-laden",
    "href": "fallstudie_n/2_Datenverarbeitung_Loesung.html#daten-laden",
    "title": "2. Daten(vor)verarbeitung - Lösung",
    "section": "Daten laden",
    "text": "Daten laden\nHerunterladen der Daten der Feldaufnahme von Moodle, Einlesen, Sichtung der Datensätze und der Datentypen.\n\ndf_team1 <- read_delim(\"fallstudie_n/data/Felderhebungen_Waldstruktur.csv\", delim = \";\")\n\ndf_team2 <- read_delim(\"fallstudie_n/data/Felderhebung_11102022_gr3.csv\", delim = \";\")\n\ndf_team3 <- read_delim(\"fallstudie_n/data/Felderhebung_Waldstruktur_TEAM3_pink_Gruppe 7.csv\", delim = \";\")\n\ndf_team4 <- read_delim(\"fallstudie_n/data/Felderhebungen_Team4_Blau_221011.csv\",delim = \";\")\n\ndf_team5 <- read_delim(\"fallstudie_n/data/Felderhebung TEAM 5.csv\", delim = \";\")\n\ndf_team6 <- read_delim(\"fallstudie_n/data/Team6_Felderhebung.csv\", delim = \";\")\n\n# hier können die Probekreise mit den Angaben zur Anzahl Rehlokalisationen und der \n# LIDAR-basierten Ableitung der Waldstruktur eingelesen werden\n\ndf_reh <- read_delim(\"fallstudie_n/data/Aufgabe3_Reh_Waldstruktur_221013.csv\", delim = \";\")\nstr(df_reh)\n\nspec_tbl_df [305 × 5] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Anz_reh_lokalisationen: num [1:305] 0 0 0 0 0 0 0 0 0 0 ...\n $ x                     : num [1:305] 684900 684900 684900 684900 684875 ...\n $ y                     : num [1:305] 237100 237125 237150 237175 237075 ...\n $ DG_us                 : num [1:305] 0.0903 0.2717 0.468 0.7407 0.1811 ...\n $ DG_os                 : num [1:305] 0.908 0.959 0.871 0.986 0.86 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Anz_reh_lokalisationen = col_double(),\n  ..   x = col_double(),\n  ..   y = col_double(),\n  ..   DG_us = col_double(),\n  ..   DG_os = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n# Die eingelesenen Datensätze anschauen und versuchen zu einem Gesamtdatensatz  \n# verbinden. Ist der Output zufriedenstellend?\n\ndf_gesamt <- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5, df_team6)\nstr(df_gesamt)\n\nspec_tbl_df [150 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Kreis (r 12.5m)               : num [1:150] 0 1 2 3 4 5 6 7 8 9 ...\n $ X                             : num [1:150] 684900 684875 684875 684875 684850 ...\n $ Y                             : num [1:150] 237175 237125 237175 237250 237225 ...\n $ Deckungsgrad Rubus sp. [%]    : num [1:150] 1 72.5 15 25 15 25 30 60 85 65 ...\n $ DG Strauchschicht [%] (0.5-3m): num [1:150] 50 57.5 65 45 65 70 75 65 65 35 ...\n $ DG Baumschicht [%] (ab 3m)    : num [1:150] 90 55 85 65 70 80 80 50 60 70 ...\n $ Kreis                         : num [1:150] NA NA NA NA NA NA NA NA NA NA ...\n $ x                             : num [1:150] NA NA NA NA NA NA NA NA NA NA ...\n $ y                             : num [1:150] NA NA NA NA NA NA NA NA NA NA ...\n $ Deckungsgrad Rubus sp [%]     : num [1:150] NA NA NA NA NA NA NA NA NA NA ...\n $ DG Rubus sp. [%]              : num [1:150] NA NA NA NA NA NA NA NA NA NA ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `Kreis (r 12.5m)` = col_double(),\n  ..   X = col_double(),\n  ..   Y = col_double(),\n  ..   `Deckungsgrad Rubus sp. [%]` = col_double(),\n  ..   `DG Strauchschicht [%] (0.5-3m)` = col_double(),\n  ..   `DG Baumschicht [%] (ab 3m)` = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr>"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Loesung.html#aufgabe-1",
    "href": "fallstudie_n/2_Datenverarbeitung_Loesung.html#aufgabe-1",
    "title": "2. Daten(vor)verarbeitung - Lösung",
    "section": "Aufgabe 1",
    "text": "Aufgabe 1\n1.1 Einügen zusätzliche Spalte pro Datensatz mit der Gruppenzugehörigkeit (Team1-6). 1.2 Spaltenumbenennung damit die Bezeichungen in allen Datensätzen gleich sind und der Gesamtdatensatz zusammengefügt werden kann. –> Befehle mutate und rename, mit pipes (alt: %>%, neu: |>) in einem Schritt möglich\n\n#.#################################################################################\n# 2. DATENVORVERARBEITUNG #####\n#.#################################################################################\n\ndf_team1 <- df_team1 |>\n  mutate(team = \"team1\") |>\n  rename(KreisID = \"Kreis (r 12.5m)\",\n         DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\n\ndf_team2 <- df_team2 |>\n  mutate(team = \"team2\") |>\n  rename(KreisID = \"Kreis\",\n         DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\n\ndf_team3 <- df_team3 |>\n  mutate(team = \"team3\") |>\n  rename(KreisID = \"Kreis (r 12.5m)\",\n         X = \"x\",\n         Y = \"y\",\n         DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\n\ndf_team4 <- df_team4 |>\n  mutate(team = \"team4\") |>\n  rename(KreisID = \"Kreis (r 12.5m)\",\n         DG_Rubus = \"Deckungsgrad Rubus sp. [%]\",\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\n\ndf_team5 <- df_team5 |>\n  mutate(team = \"team5\") |>\n  rename(KreisID = \"Kreis\",\n         X = \"x\",\n         Y = \"y\",\n         DG_Rubus = \"Deckungsgrad Rubus sp [%]\",\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")\n\ndf_team6 <- df_team6 |>\n  mutate(team = \"team6\") |>\n  rename(KreisID = \"Kreis\",\n         X = \"x\",\n         Y = \"y\",\n         DG_Rubus = \"DG Rubus sp. [%]\",\n         DG_Strauchschicht = \"DG Strauchschicht [%] (0.5-3m)\",\n         DG_Baumschicht = \"DG Baumschicht [%] (ab 3m)\")"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Loesung.html#aufgabe-2",
    "href": "fallstudie_n/2_Datenverarbeitung_Loesung.html#aufgabe-2",
    "title": "2. Daten(vor)verarbeitung - Lösung",
    "section": "Aufgabe 2",
    "text": "Aufgabe 2\nZusammenführen der Teildatensätze zu einem Datensatz\n\ndf_gesamt <- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5, df_team6)"
  },
  {
    "objectID": "fallstudie_n/2_Datenverarbeitung_Loesung.html#aufgabe-3",
    "href": "fallstudie_n/2_Datenverarbeitung_Loesung.html#aufgabe-3",
    "title": "2. Daten(vor)verarbeitung - Lösung",
    "section": "Aufgabe 3",
    "text": "Aufgabe 3\nVerbinden (join) des Datensatzes der Felderhebungen mit dem Datensatz der Rehe.\nZiel: ein Datensatz mit allen Kreisen der Felderhebung, angereichert mit den Umweltvariablen Understory und Overstory aus den LIDAR-Daten (DG_us, DG_os) aus dem Rehdatensatz. –> Welche Art von join? Welche Spalten zum Verbinden (by = ?) der Datensätze\n\ndf_with_LIDAR <- left_join(df_gesamt,df_reh, by = c(\"X\" = \"x\", \"Y\" = \"y\"))\n\n\nAufgabe 4\nScatterplot der korrespondondierenden Umweltvariablen aus den Felderhebungen gegen die Umweltvariablen aus den LIDAR-Daten erstellen (zusätzlich Einfärben der Gruppen und Regressionslinie darüberlegen).\n\n#.#####################################################################################\n# 4. VISUALISERUNG #####\n#.#####################################################################################\n\nggplot(df_with_LIDAR, aes(DG_Strauchschicht, DG_us, color = team)) + geom_point() + \n  stat_smooth(method = \"lm\")\n\n\n\nwrite_delim(df_with_LIDAR, \"data/df_with_lidar.csv\", delim = \";\")\n\nError: Cannot open file for writing:\n* 'C:\\Users\\sigb\\Beni\\WPZ_Fallstudie\\HS22\\data\\df_with_lidar.csv'"
  },
  {
    "objectID": "fallstudie_n/3_Berechnung_Homeranges_Uebung.html",
    "href": "fallstudie_n/3_Berechnung_Homeranges_Uebung.html",
    "title": "3. Berechnung Homeranges - Übung",
    "section": "",
    "text": "ipak <- function(pkg){\nnew.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\nif (length(new.pkg))\ninstall.packages(new.pkg, dependencies = TRUE)\nsapply(pkg, require, character.only = TRUE)\n}\npackages <- c(\"sf\", \"raster\", \"tidyverse\", \"adehabitatHR\", \"maptools\", \"sp\", \n              \"ggspatial\", \"rgeos\", \"rgdal\")\nipak(packages)\n\n\n\n\nEinlesen des Gesamtdatensatzes von Moodle, Sichtung des Datensatzes und der Datentypen\n\nRehe <- read_delim(\"fallstudie_n/data/Aufgabe3_Homeranges_Rehe_landforst_20221024.csv\", delim = \";\")\n\nstr(Rehe)\n\n\n\n\nIm Datensatz Rehe eine neue Spalte mit Datum und Zeit in einer Spalte kreieren. Beim Format hat sich ein Fehler eingeschlichen. Findet ihr ihn?\n\nRehe <- Rehe %>%\n  mutate(UTC_DateTime = as.POSIXct(paste(UTC_Date, UTC_Time), \n                                   format = \"%Y-%m-%d %H:%M:%S\"))\n\n\n\n\nMit den folgenden Zeilen können die GPS-Punkte visualisiert werden\n\nx <- Rehe$X[Rehe$TierID== \"RE13\"]    \ny <- Rehe$Y[Rehe$TierID== \"RE13\"]\nxy <- data.frame(cbind (x, y, rep(1, length(x))))       \ncoordinates(xy)<-c(\"x\",\"y\")                             \nproj4string(xy)<-CRS(\"+init=epsg:21781\")  \n\nplot(xy, col = \"blue\", pch = 19, cex = 1.5)\n\nHier einige Zeilen Code, um eine HomeRange zu berechnen.\nHerumschrauben an den Einstellungen von:\n\nan der Ausdehung, resp. prozentualer Anteil Punkte in der HR (Funktion getverticeshr)\nhref (in der Funktion kernelUD)\n\n–> Ziel: eine Karte erstellen mit der Visualiserung mindestens einer HR\n\n# Berechnung von href nach: Pebsworth et al. (2012) Evaluating home range techniques: \n# use of Global Positioning System (GPS) collar data from chacma baboons\n\nsigma <- 0.5*(sd(x)+sd(y))                              \nn <- length(x)\nhref <- sigma * n^(-1/6)*0.9  \n\n# scaled reference: href * 0.9\n\nkud <- kernelUD(xy, h=href, grid=25)             \n\n# Berechnung der Home Range (95% Isopleth)\n\nhomerange <- getverticeshr(kud, percent=95)             \n\n# Schreibt HR in den oben beschriebenen Ordner (als Shapefile)\n\nhr <- st_as_sf(homerange)\n\nst_write(hr, dsn= \"Results\", layer=\"HR_RE13\", driver=\"ESRI Shapefile\",  \n         delete_layer = T )\n\n\n# mit diesem Befehl kann die HR geplottet werden\n\nggplot(hr, aes(color = \"red\", fill=\"red\")) + \n  geom_sf(size = 1, alpha = 0.3) +\ncoord_sf(datum = sf::st_crs(21781))+\ntheme(\naxis.title = element_blank(),\naxis.text = element_blank(),\naxis.ticks = element_blank(),\nlegend.position=\"none\"\n)\n# und die Punkte der GPS-Lokalisationen darüber gelegt werden \n\nxy_p <- st_as_sf(xy)\n\nggplot(hr, aes(color = \"red\", fill=\"red\")) + \n  geom_sf(size = 1, alpha = 0.3) +\ngeom_sf(data = xy_p, aes(fill = \"red\")) +\ncoord_sf(datum = sf::st_crs(21781))+\ntheme(\naxis.title = element_blank(),\naxis.text = element_blank(),\naxis.ticks = element_blank(),\nlegend.position=\"none\"\n)\n\nCode um die Homerange auf der Landeskarte 1:25000 zu plotten. Transparenz kann mit alpha angepasst werden.\n\npk25_wpz <- brick(\"fallstudie_n/data/pk25_wpz.tif\")\n\nxy_p <- st_as_sf(xy)\n\nggplot(hr, aes(color = \"red\", fill=\"red\")) +\nannotation_spatial(pk25_wpz) +\ngeom_sf(size = 1, alpha = 0.3) +\ngeom_sf(data = xy_p, aes(fill = \"red\")) +\ncoord_sf(datum = sf::st_crs(21781))+\ntheme(\naxis.title = element_blank(),\naxis.text = element_blank(),\naxis.ticks = element_blank(),\nlegend.position=\"none\"\n)\n\nNachbauen des Sampling Grids mit den Kreisen (Wird als Grundlage für Extraktion der Umweltvariablen innerhalb der Homeranges benötigt)\n\nXmin bzw. Ymin des Grids: c(684000, 234000)\ncellsize des Grids: c(25, 25)\nAnzahl Kreise in X und Y Richtung: c(100, 160)\n\n\nx25       <- GridTopology(c(684000, 234000), c(25, 25), c(100, 160)) \ndata25    = data.frame(1:(100*160))           \n# Erstellt aus der GridTopology und den Daten ein SpatialGridDataFrame\ngrid25    <- SpatialGridDataFrame(x25, data25,  proj4string <- CRS(\"+init=epsg:21781\"))\npixel25   <- as(grid25, \"SpatialPixelsDataFrame\")\n\n# zweites Sampling Grid für einen Ausschnitt aufbauen, plotten\n# -> dient nur der Visualisierung des Sampling Grids um einen Eindruck zu erhalten\n\nx       <- GridTopology(c(684200, 236900), c(25, 25), c(35, 35)) \ndata    = data.frame(1:(35*35))           \n# Erstellt aus der GridTopology und den Daten ein SpatialGridDataFrame\ngrid    <- SpatialGridDataFrame(x, data,  proj4string <- CRS(\"+init=epsg:21781\"))\npixel  <- as(grid, \"SpatialPixelsDataFrame\")\n\npoints <- as(pixel, \"SpatialPointsDataFrame\")\n\ngrid_plot <- st_buffer(st_as_sf(points), 12.5)\n\nplot(st_geometry(grid_plot))\nggplot(grid_plot, color = \"black\", fill=NA) + \n  geom_sf() +\ngeom_sf(data = xy_p, color = \"blue\",  ) +\n  geom_sf(data = hr, color = \"red\", fill = NA, size = 2) +\ncoord_sf(datum = sf::st_crs(21781))+\ntheme(\naxis.title = element_blank(),\naxis.text = element_blank(),\naxis.ticks = element_blank(),\nlegend.position=\"none\"\n)\n\n\n\n\nTesten der Variablen der Vegetationsschichten von letzter Woche auf einen linearen Zusammenhang (Korrelation; Funktion cor.test). DG_Baumschicht vs. DG_os / DG_Strauchschicht vs. DG_us aus dem Datensatz df_with_lidar den wir letzte Woche erstellt haben\nDie Theorie zu Korrelation folgt erst ab 31.10.\n\ndf_with_lidar <- read_delim(\"fallstudie_n/data/df_with_lidar.csv\", delim =\";\")\n\ncor.test(~ DG_Strauchschicht+DG_us, data = df_with_lidar, method=\"pearson\")"
  },
  {
    "objectID": "fallstudie_n/3_Berechnung_Homeranges_Loesung.html",
    "href": "fallstudie_n/3_Berechnung_Homeranges_Loesung.html",
    "title": "3. Berechnung Homeranges - Lösung",
    "section": "",
    "text": "ipak <- function(pkg){\nnew.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\nif (length(new.pkg))\ninstall.packages(new.pkg, repos = \"http://cran.us.r-project.org\", dependencies = TRUE)\nsapply(pkg, require, character.only = TRUE)\n}\npackages <- c(\"sf\", \"raster\", \"tidyverse\", \"adehabitatHR\", \"maptools\", \"sp\", \n              \"ggspatial\", \"rgeos\", \"rgdal\", \"pastecs\")\nipak(packages)\n\n\n\n\nEinlesen des Gesamtdatensatzes von Moodle, Sichtung des Datensatzes und der Datentypen\n\nRehe <- read_delim(\"fallstudie_n/data/Aufgabe3_Homeranges_Rehe_landforst_20221024.csv\", delim = \";\")\n\nstr(Rehe)\n\n\n\n\nIn Datensatz Rehe eine neue Spalte mit Datum und Zeit in einer Spalte kreieren. Beim Format hat sich ein Fehler eingeschlichen. Findet ihr ihn?\n\nRehe <- Rehe %>%\n  mutate(UTC_DateTime = as.POSIXct(paste(UTC_Date, UTC_Time), \n                                   format = \"%Y-%m-%d %H:%M:%S\"))\n\nMit den folgenden Zeilen können die GPS-Punkte visualisiert werden\n\nx <- Rehe$X[Rehe$TierID== \"RE13\"]    \ny <- Rehe$Y[Rehe$TierID== \"RE13\"]\nxy <- data.frame(cbind (x, y, rep(1, length(x))))       \ncoordinates(xy)<-c(\"x\",\"y\")                             \nproj4string(xy)<-CRS(\"+init=epsg:21781\")  \n\nplot(xy, col = \"blue\", pch = 19, cex = 1.5)\n\n\n\n\nHier einige Zeilen Code, um eine HomeRange zu berechnen.\nHerumschrauben an den Einstellungen von:\n\nan der Ausdehung, resp. prozentualer Anteil Punkte in der HR (Funktion getverticeshr)\nhref (in der Funktion kernelUD)\n\n–> Ziel: eine Karte erstellen mit der Visualiserung mindestens einer HR\n\n# Berechnung von href nach: Pebsworth et al. (2012) Evaluating home range techniques: \n# use of Global Positioning System (GPS) collar data from chacma baboons\n\nsigma <- 0.5*(sd(x)+sd(y))                              \nn <- length(x)\nhref <- sigma * n^(-1/6)*0.9  \n\n# scaled reference: href * 0.9\n\nkud <- kernelUD(xy, h=href, grid=25)             \n\n# Berechnung der Home Range (95% Isopleth)\n\nhomerange <- getverticeshr(kud, percent=95)             \n\n# Schreibt HR in den oben beschriebenen Ordner (als Shapefile)\n\nhr <- st_as_sf(homerange)\n\nst_write(hr, dsn= \"Results\", layer=\"HR_RE13\", driver=\"ESRI Shapefile\",  \n         delete_layer = T )\n\nDeleting layer `HR_RE13' using driver `ESRI Shapefile'\nWriting layer `HR_RE13' to data source `Results' using driver `ESRI Shapefile'\nWriting 1 features with 2 fields and geometry type Polygon.\n\n\n\n# mit diesem Befehl kann die HR geplottet werden\n\nggplot(hr, aes(color = \"red\", fill=\"red\")) + \n  geom_sf(size = 1, alpha = 0.3) +\ncoord_sf(datum = sf::st_crs(21781))+\ntheme(\naxis.title = element_blank(),\naxis.text = element_blank(),\naxis.ticks = element_blank(),\nlegend.position=\"none\"\n)\n\n\n\n# und die Punkte der GPS-Lokalisationen darüber gelegt werden \n\nxy_p <- st_as_sf(xy)\n\nggplot(hr, aes(color = \"red\", fill=\"red\")) + \n  geom_sf(size = 1, alpha = 0.3) +\ngeom_sf(data = xy_p, aes(fill = \"red\")) +\ncoord_sf(datum = sf::st_crs(21781))+\ntheme(\naxis.title = element_blank(),\naxis.text = element_blank(),\naxis.ticks = element_blank(),\nlegend.position=\"none\"\n)\n\n\n\n\nCode um die Homerange auf der Landeskarte 1:25000 zu plotten. Transparenz kann mit alpha angepasst werden\n\npk25_wpz <- brick(\"fallstudie_n/data/pk25_wpz.tif\")\n\nxy_p <- st_as_sf(xy)\n\nggplot(hr, aes(color = \"red\", fill = \"red\")) + annotation_spatial(pk25_wpz) + geom_sf(size = 1,\n    alpha = 0.3) + geom_sf(data = xy_p, aes(fill = \"red\")) + coord_sf(datum = sf::st_crs(21781)) +\n    theme(axis.title = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(),\n        legend.position = \"none\")\n\n\n\n\nNachbauen des Sampling Grids mit den Kreisen (Wird als Grundlage für Extraktion der Umweltvariablen innerhalb der Homeranges benötigt)\n\nXmin bzw. Ymin des Grids: c(684000, 234000)\ncellsize des Grids: c(25, 25)\nAnzahl Kreise in X und Y Richtung: c(100, 160)\n\n\nx25       <- GridTopology(c(684000, 234000), c(25, 25), c(100, 160)) \ndata25    = data.frame(1:(100*160))           \n# Erstellt aus der GridTopology und den Daten ein SpatialGridDataFrame\ngrid25    <- SpatialGridDataFrame(x25, data25,  proj4string <- CRS(\"+init=epsg:21781\"))\npixel25   <- as(grid25, \"SpatialPixelsDataFrame\")\n\n# zweites Sampling Grid für einen Ausschnitt aufbauen, plotten\n# -> dient nur der Visualisierung des Sampling Grids um einen Eindruck zu erhalten\n\nx       <- GridTopology(c(684200, 236900), c(25, 25), c(35, 35)) \ndata    = data.frame(1:(35*35))           \n# Erstellt aus der GridTopology und den Daten ein SpatialGridDataFrame\ngrid    <- SpatialGridDataFrame(x, data,  proj4string <- CRS(\"+init=epsg:21781\"))\npixel  <- as(grid, \"SpatialPixelsDataFrame\")\n\npoints <- as(pixel, \"SpatialPointsDataFrame\")\n\ngrid_plot <- st_buffer(st_as_sf(points), 12.5)\n\nplot(st_geometry(grid_plot))\n\n\n\nggplot(grid_plot, color = \"black\", fill=NA) + \n  geom_sf() +\ngeom_sf(data = xy_p, color = \"blue\",  ) +\n  geom_sf(data = hr, color = \"red\", fill = NA, size = 2) +\ncoord_sf(datum = sf::st_crs(21781))+\ntheme(\naxis.title = element_blank(),\naxis.text = element_blank(),\naxis.ticks = element_blank(),\nlegend.position=\"none\"\n)\n\n\n\n\n\n\n\nTesten der Variablen der Vegetationsschichten von letzter Woche auf einen linearen Zusammenhang (Korrelation; Funktion cor.test). DG_Baumschicht vs. DG_os / DG_Strauchschicht vs. DG_us aus dem Datensatz df_with_lidar den wir letzte Woche erstellt haben\nDie Theorie zu Korrelation folgt erst ab 31.10.\n\ndf_with_lidar <- read_delim(\"fallstudie_n/data/df_with_lidar.csv\", delim =\";\")\n\nlibrary(pastecs)\n\nround(stat.desc(cbind(df_with_lidar$DG_us,df_with_lidar$DG_os,\n                      df_with_lidar$DG_Strauchschicht,df_with_lidar$DG_Baumschicht), \n                basic= F, norm= T), 3)\n\n                 V1     V2      V3      V4\nmedian        0.272  0.824  45.000  60.000\nmean          0.294  0.787  46.054  60.190\nSE.mean       0.013  0.013   2.001   2.013\nCI.mean.0.95  0.027  0.026   3.955   3.978\nvar           0.027  0.027 600.802 608.017\nstd.dev       0.165  0.163  24.511  24.658\ncoef.var      0.563  0.207   0.532   0.410\nskewness      0.649 -1.179   0.102  -0.394\nskew.2SE      1.640 -2.976   0.259  -0.996\nkurtosis     -0.072  1.206  -0.924  -0.840\nkurt.2SE     -0.092  1.532  -1.173  -1.067\nnormtest.W    0.962  0.897   0.973   0.955\nnormtest.p    0.000  0.000   0.004   0.000\n\n# Histogram der Verteilung und die aus den Daten berechnete Normalverteilung als Linie \n# dargestellt\n\nggplot(df_with_lidar, aes(DG_os)) + geom_histogram(aes(y=..density..), \n        color = \"black\", fill = \"white\") + \n     stat_function(fun = dnorm, args = list(mean = \n        mean(df_with_lidar$DG_os, na.rm = T), \n        sd = sd(df_with_lidar$DG_os, na.rm = T)), color = \"black\",size = 1)\n\n\n\n# testen auf Korrelation \n\ncor.test(~ DG_Baumschicht+DG_os, data = df_with_lidar, method=\"pearson\")\n\n\n    Pearson's product-moment correlation\n\ndata:  DG_Baumschicht and DG_os\nt = 4.7556, df = 148, p-value = 4.65e-06\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.2164504 0.4954361\nsample estimates:\n      cor \n0.3640824"
  },
  {
    "objectID": "fallstudie_n/4_Multivariate_Modelle_Uebung.html",
    "href": "fallstudie_n/4_Multivariate_Modelle_Uebung.html",
    "title": "4. Einstieg Multivariate Modelle - Übung",
    "section": "",
    "text": "### Funktion um Packages direkt zu installieren und / oder zu laden\nipak <- function(pkg){\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg)) \n    install.packages(new.pkg, dependencies = TRUE)\n  sapply(pkg, require, character.only = TRUE)\n}\n\npackages <- c(\"sp\", \"raster\", \"tidyverse\", \"PerformanceAnalytics\", \"pastecs\", \"car\")\n\nipak(packages)\n\n\n\n\nEinlesen des Gesamtdatensatzes für die Multivariate Analyse von Moodle\n\nSichtung des Datensatzes, der Variablen und der Datentypen\nKontrolle wieviele Rehe in diesem Datensatz enthalten sind\n\n\n\n\nUnterteilung des Datensatzes in Teildatensätze entsprechend der Tageszeit\n\n\n\nErstellen von Density Plots der Präsenz / Absenz in Abhängigkeit der unabhängigen Variablen. Diese Übung dient einer ersten groben Einschätzung der Wirkung der Umweltvariablen auf die abhängige Variable (Präsenz/Absenz in unserem Fall)\n\n# Ein Satz Density Plots für den Tagesdatensatz und einer für den Nachtdatensatz \n\npar(mfrow=c(3,3), mar=c(4, 4, 3, 3)) # Vorbereitung Raster für Plots\n\n# innerhalb des for()-loops die Nummern der gewünschten Spalten einstellen\n\nfor (i in 6:12) {                           \n  d  <-  DF_mod_day %>% pull(i)\n  d  <-  density(d)\n  dp  <-  DF_mod_day %>% filter(pres_abs == 1) %>% pull(i)\n  dp <- density(dp)\n  da  <-  DF_mod_day %>% filter(pres_abs == 0) %>% pull(i)\n  da <- density(da)\n  plot(0,0, type=\"l\", xlim=range(c(dp$x,da$x)), ylim=range(dp$y,da$y), \n       xlab=names(DF_mod_day[i]), ylab=\"Density\")\n  lines(dp$x, dp$y, col=\"blue\")             # Präsenz\n  lines(da$x, da$y, col=\"red\")              # Absenz\n}\n\n\n\n\nTesten eurer erklärenden Variablen auf Normalverteilung (nur kontinuierliche)\n\n\n\nExplorative Analysen der Variablen mit Scatterplots / Scatterplotmatrizen\n\nZu Scatterplots und Scatterplotmatrizen gibt es viele verschiedene Funktionen / Packages, schaut im Internet und sucht euch eines welches euch passt.\nTesten der Korrelation zwischen den Variablen (Parametrisch oder nicht-parametrische Methode? Ausserdem: gewisse Scatterplotmatrizen zeigen euch die Koeffizenten direkt an)"
  }
]