---
date: 2022-10-31
lesson: Stat1
thema: Grundlagen der Statistik
index: 1
format:
  html:
    code-tools:
      source: true
---

# Stat1: Demo

```{r}
#| echo: false
#| results: hide
#| purl: false
options(knitr.duplicate.label = "allow")
knitr::purl("stat1-4/Statistik1_Demo.qmd", "purl/Statistik1_Demo.R", documentation = 0)
```

[Dieses Demoskript als Download](Statistik1_Demo.qmd)

## Daten genereieren und anschauen

```{r}
#| label: fig-baseplot-boxplot-histo
#| fig-cap: "Generierter Plot"

a <- c(20, 19, 25, 10, 8, 15, 13, 18, 11, 14)
b <- c(12, 15, 16, 7, 8, 10, 12, 11, 13, 10)
blume <- data.frame(a,b)
blume
summary(blume)
boxplot(blume$a, blume$b)
boxplot(blume)
hist(blume$a)
hist(blume$b)
```

## Zweiseitiger t-Test

```{r}
t.test(blume$a, blume$b) # Zweiseitig "Test auf a ≠ b" (default)
```

## Einseitiger t-Test

```{r}
t.test(blume$a, blume$b, alternative = "greater") # Einseitig "Test auf a > b"
t.test(blume$a, blume$b, alternative = "less") # Einseitig "Test auf a < b"
```

## Klassischer t-Test vs. Welch Test

```{r}
# Varianzen gleich, klassischer t-Test
t.test(blume$a, blume$b, var.equal = TRUE) 

# Varianzen ungleich, Welch's t-Test, der auch default Einstellung ist (siehe Titelzeile im Test output)
t.test(blume$a, blume$b) # dasselbe wie var.equal = FALSE
```

## Gepaarter t-Test

```{r}
# Gepaarter t-Test: erster Wert von  a wird mit erstem Wert von
# b gepaart, zweiter Wert von a mit zweitem von b ect.
t.test(blume$a, blume$b, paired = T)
t.test(blume$a, blume$b, paired = T, alternative = "greater")
```

Das gleiche mit einem “long table”

```{r}
cultivar <- c(rep("a", 10), rep("b", 10))
size <- c(a, b)
blume.long <- data.frame(cultivar, size)

rm(size) #Befehl rm entfernt die nicht mehr benötitgten Objekte aus dem Workspace
rm(cultivar)
```

Das Gleiche in einer Zeile

```{r}
#| label: fig-boxplot-ttest1
#| fig-cap: "Generierter Plot"

blume.long <- data.frame(cultivar = c(rep("a", 10), rep("b", 10)), size = c(a, b))
summary(blume.long)             
head(blume.long)

boxplot(size~cultivar, data = blume.long)

t.test(size~cultivar, blume.long, var.equal = T)

t.test(size~cultivar, blume.long, paired = T)
```

## Base R vs. ggplot2

```{r}
#| label: fig-ggplot-boxplots
#| fig-cap: "Generierter Plot"

library(tidyverse)
ggplot(blume.long, aes(cultivar, size)) + geom_boxplot()
ggplot(blume.long, aes(cultivar, size)) + geom_boxplot() + theme_classic()
ggplot(blume.long, aes(cultivar, size)) + geom_boxplot(size = 1) + theme_classic()+
theme(axis.line = element_line(size = 1)) + theme(axis.title = element_text(size = 14))+
theme(axis.text = element_text(size = 14))
ggplot(blume.long, aes(cultivar, size)) + geom_boxplot(size=1) + theme_classic()+
  theme(axis.line = element_line(size = 1), axis.ticks = element_line(size = 1), 
       axis.text = element_text(size = 20), axis.title = element_text(size = 20))
```

Definieren von mytheme mit allen gewünschten Settings, das man zu Beginn einer Sitzung einmal laden und dann immer wieder ausführen kann (statt des langen Codes)

```{r}
mytheme <- theme_classic() + 
  theme(axis.line = element_line(color = "black", size=1), 
        axis.text = element_text(size = 20, color = "black"), 
        axis.title = element_text(size = 20, color = "black"), 
        axis.ticks = element_line(size = 1, color = "black"), 
        axis.ticks.length = unit(.5, "cm"))
```

```{r}
#| label: fig-ggplot-boxplot-themes
#| fig-cap: "Generierter Plot"

ggplot(blume.long, aes(cultivar, size)) + 
  geom_boxplot(size = 1) +
  mytheme

t_test <- t.test(size~cultivar, blume.long)

ggplot(blume.long, aes(cultivar, size)) + 
  geom_boxplot(size = 1) + 
  mytheme +
  annotate("text", x = "b", y = 24, 
  label = paste0("italic(p) == ", round(t_test$p.value, 3)), parse = TRUE, size = 8)

ggplot (blume.long, aes(cultivar,size)) + 
  geom_boxplot(size = 1) + 
  mytheme +
  labs(x="Cultivar",y="Size (cm)")
```

## Binomialtest

In Klammern übergibt man die Anzahl der Erfolge und die Stichprobengrösse

```{r}
binom.test(84, 200) # Anzahl Frauen im Nationalrat (≙ 42.0 %; Stand 2019) 
binom.test(116, 200) # Anzahl Männer im Nationalrat (≙ 58.0 %; Stand 2019) 
binom.test(3, 7) # Anzahl Frauen im Bundesrat (≙ 42.9 %; Stand 2019)

```

## Chi-Quadrat-Test & Fishers Test

Ermitteln des kritischen Wertes

```{r}
qchisq(0.95, 1)
```

## Direkter Test in R (dazu Werte als Matrix nötig)

```{r}
count <- matrix(c(38, 14, 11, 51), nrow = 2)
count
chisq.test(count)
fisher.test(count)
```

