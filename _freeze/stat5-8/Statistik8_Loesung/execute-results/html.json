{
  "hash": "9e20ccd69796feaaae20d03e58549920",
  "result": {
    "markdown": "---\ndate: 2022-11-22\nlesson: Stat8\nthema: Clusteranalysen\nindex: 3\n---\n\n\n# Stat8: Lösung\n\n\n::: {.cell}\n\n:::\n\n\n## Musterlösung Aufgabe 8.1: Clusteranalysen\n\n- [R-Skript als Download](../purl/Statistik8_Loesung.R)\n- [Lösungstext](Statistik_Loesungstext_8.1.pdf)\n\n### Übungsaufgabe \n\n*(hier so ausführlich formuliert, wie dies auch in der Klausur der Fall sein wird)*\n\n- Ladet den Datensatz crime2.csv. Dieser enthält Raten von 7 Kriminatlitätsformen pro 100000 Einwohner und Jahr für die Bundesstaaten der USA.\n- Führt eine k-means- und eine agglomerative Clusteranalyse eurer Wahl durch. Bitte beachet, dass wegen der sehr ungleichen Varianzen in jedem Fall eine Standardisierung stattfinden muss, damit die Distanzen zwischen den verschiedenen Kriminalitätsraten sinnvoll berechnet werden können.\n- **Überlegt in beiden Fällen, wie viele Cluster sinnvoll sind** (k-means: z. B. visuelle Betrachtung einer PCA, agglomertive Clusteranalyse: z. B. Silhoutte-Plot).\n- Entscheidet euch dann für eine der beiden Clusterungen und vergleicht dann die\nerhaltenen Cluster bezüglich der Kriminalitätsformen und interpretiert die Cluster entsprechend.\n- Bitte erklärt und begründet die einzelnen Schritte, die ihr unternehmt, um zu diesem Ergebnis zu kommen. Dazu erstellt bitte ein Word-Dokument, in das ihr Schritt für Schritt den verwendeten R-Code, die dazu gehörigen Ausgaben von R, eure Interpretation derselben und die sich ergebenden Schlussfolgerungen für das weitere Vorgehen dokumentieren.\n- Formuliert abschliessend einen Methoden- und Ergebnisteil (ggf. incl. adäquaten Abbildungen) zu dieser Untersuchung in der Form einer wissenschaftlichen Arbeit (ausformulierte schriftliche Zusammenfassung, mit je einem Absatz von ca. 60-100 Worten, resp. 3-8 Sätzen für den Methoden- und Ergebnisteil). D. h. alle wichtigen Informationen sollten enthalten sein, unnötige Redundanz dagegen vermieden werden.\n- **Abzugeben sind am Ende (a) Ein lauffähiges R-Skript; (b) begründeter Lösungsweg (Kombination aus R-Code, R Output und dessen Interpretation) und (c) ausformulierter Methoden- und Ergebnisteil (für eine wiss. Arbeit).**\n\n\n### Lösung\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime <- read.csv(\"data/crime2.csv\", sep = \";\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncrime\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X Murder Rape Robbery Assault Burglary Theft Vehicle\n1  ME    2.0 14.8      28     102      803  2347     164\n2  NH    2.2 21.5      24      92      755  2208     228\n3  VT    2.0 21.8      22     103      949  2697     181\n4  MA    3.6 29.7     193     331     1071  2189     906\n5  RI    3.5 21.4     119     192     1294  2568     705\n6  CT    4.6 23.8     192     205     1198  2758     447\n7  NY   10.7 30.5     514     431     1221  2924     637\n8  NJ    5.2 33.2     269     265     1071  2822     776\n9  PA    5.5 25.1     152     176      735  1654     354\n10 OH    5.5 38.6     142     235      988  2574     376\n11 IN    6.0 25.9      90     186      887  2333     328\n12 IL    8.9 32.4     325     434     1180  2938     628\n13 MI   11.3 67.4     301     424     1509  3378     800\n14 WI    3.1 20.1      73     162      783  2802     254\n15 MN    2.5 31.8     102     148     1004  2785     288\n16 IA    1.8 12.5      42     179      956  2801     158\n17 MO    9.2 29.2     170     370     1136  2500     439\n18 ND    1.0 11.6       7      32      385  2049     120\n19 SD    4.0 17.7      16      87      554  1939      99\n20 NE    3.1 24.6      51     184      748  2677     168\n21 KS    4.4 32.9      80     252     1188  3008     258\n22 DE    4.9 56.9     124     241     1042  3090     272\n23 MD    9.0 43.6     304     476     1296  2978     545\n24 VA    7.1 26.5     106     167      813  2522     219\n25 WV    5.9 18.9      41      99      625  1358     169\n26 NC    8.1 26.4      88     354     1225  2423     208\n27 SC    8.6 41.3      99     525     1340  2846     277\n28 GA   11.2 43.9     214     319     1453  2984     430\n29 FL   11.7 52.7     367     605     2221  4373     598\n30 KY    6.7 23.1      83     222      824  1740     193\n31 TN   10.4 47.0     208     274     1325  2126     544\n32 AL   10.1 28.4     112     408     1159  2304     267\n33 MS   11.2 25.8      65     172     1076  1845     150\n34 AR    8.1 28.9      80     278     1030  2305     195\n35 LA   12.8 40.1     224     482     1461  3417     442\n36 OK    8.1 36.4     107     285     1787  3142     649\n37 TX   13.5 51.6     240     354     2049  3987     714\n38 MT    2.9 17.3      20     118      783  3314     215\n39 ID    3.2 20.0      21     178     1003  2800     181\n40 WY    5.3 21.9      22     243      817  3078     169\n41 CO    7.0 42.3     145     329     1792  4231     486\n42 NM   11.5 46.9     130     538     1845  3712     343\n43 AZ    9.3 43.0     169     437     1908  4337     419\n44 UT    3.2 25.3      59     180      915  4074     223\n45 NV   12.6 64.9     287     354     1604  3489     478\n46 WA    5.0 53.4     135     244     1861  4267     315\n47 OR    6.6 51.1     206     286     1967  4163     402\n48 CA   11.3 44.9     343     521     1696  3384     762\n49 AK    8.6 72.7      88     401     1162  3910     604\n50 HI    4.8 31.0     106     103     1339  3759     328\n```\n:::\n:::\n\n\nIm mitgelieferten R-Skript habe ich die folgenden Analysen zunächst mit untransformierten, dann mit standardisierten Kriminalitätsraten berechnet. Ihr könnt die Ergebnisse vergleichen und seht, dass sie sehr unterschiedlich ausfallen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrimez <- crime\ncrimez[,c(2:8)] <- lapply(crime[, c(2:8)], scale)\ncrimez\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X      Murder        Rape       Robbery     Assault     Burglary\n1  ME -1.38246619 -1.31559240 -1.0464120463 -1.24765744 -0.938630226\n2  NH -1.32457397 -0.85298774 -1.0830960795 -1.31950227 -1.053079880\n3  VT -1.38246619 -0.83227410 -1.1014380961 -1.24047295 -0.590512528\n4  MA -0.91932843 -0.28681488  0.4668043222  0.39758933 -0.299619657\n5  RI -0.94827454 -0.85989229 -0.2118502916 -0.60105391  0.232094361\n6  CT -0.62986734 -0.69418316  0.4576333139 -0.50765562  0.003195053\n7  NY  1.13584533 -0.23157851  3.4106979845  1.11603770  0.058035512\n8  NJ -0.45619068 -0.04515574  1.1638009525 -0.07658660 -0.299619657\n9  PA -0.36935236 -0.60442405  0.0907929821 -0.71600564 -1.100767236\n10 OH -0.36935236  0.32768980 -0.0009171008 -0.29212111 -0.497522184\n11 IN -0.22462181 -0.54918767 -0.4778095321 -0.64416081 -0.738343331\n12 IL  0.61481536 -0.10039211  1.6773774169  1.13759115 -0.039723567\n13 MI  1.30952199  2.31619936  1.4572732179  1.06574631  0.744733437\n14 WI -1.06405898 -0.94965140 -0.6337166731 -0.81658842 -0.986317582\n15 MN -1.23773564 -0.14181940 -0.3677574326 -0.91717119 -0.459372299\n16 IA -1.44035840 -1.47439698 -0.9180179302 -0.69445219 -0.573821954\n17 MO  0.70165369 -0.32133762  0.2558711314  0.67778419 -0.144635750\n18 ND -1.67192728 -1.53653790 -1.2390032205 -1.75057130 -1.935295964\n19 SD -0.80354400 -1.11536053 -1.1564641459 -1.35542469 -1.532337807\n20 NE -1.06405898 -0.63894678 -0.8354788556 -0.65852977 -1.069770455\n21 KS -0.68775956 -0.06586938 -0.5695196150 -0.16998488 -0.020648625\n22 DE -0.54302901  1.59122191 -0.1659952501 -0.24901420 -0.368766323\n23 MD  0.64376147  0.67291716  1.4847862428  1.43933946  0.236863097\n24 VA  0.09378539 -0.50776039 -0.3310733994 -0.78066600 -0.914786548\n25 WV -0.25356792 -1.03250597 -0.9271889385 -1.26921089 -1.363047694\n26 NC  0.38324649 -0.51466494 -0.4961515487  0.56283245  0.067572983\n27 SC  0.52797704  0.51411257 -0.3952704575  1.79137916  0.341775280\n28 GA  1.28057588  0.69363080  0.6593954963  0.31137552  0.611208841\n29 FL  1.42530643  1.30123094  2.0625597653  2.36613786  2.442403307\n30 KY -0.02199904 -0.74251499 -0.5420065902 -0.38551939 -0.888558502\n31 TN  1.04900701  0.90767176  0.6043694466 -0.01192624  0.306009763\n32 AL  0.96216868 -0.37657400 -0.2760473496  0.95079457 -0.089795291\n33 MS  1.28057588 -0.55609222 -0.7070847395 -0.74474358 -0.287697818\n34 AR  0.38324649 -0.34205126 -0.5695196150  0.01681169 -0.397378737\n35 LA  1.74371363  0.43125801  0.7511055793  1.48244636  0.630283783\n36 OK  0.38324649  0.17578977 -0.3219023911  0.06710308  1.407587684\n37 TX  1.94633640  1.22528092  0.8978417120  0.56283245  2.032292046\n38 MT -1.12195120 -1.14297872 -1.1197801127 -1.13270570 -0.986317582\n39 ID -1.03511287 -0.95655595 -1.1106091044 -0.70163668 -0.461756667\n40 WY -0.42724457 -0.82536956 -1.1014380961 -0.23464524 -0.905249077\n41 CO  0.06483929  0.58315804  0.0265959241  0.38322036  1.419509523\n42 NM  1.36741421  0.90076721 -0.1109692004  1.88477745  1.545881016\n43 AZ  0.73059980  0.63148987  0.2467001231  1.15914460  1.696096187\n44 UT -1.03511287 -0.59061496 -0.7621107892 -0.68726771 -0.671581033\n45 NV  1.68582141  2.14358568  1.3288791018  0.56283245  0.971248378\n46 WA -0.51408290  1.34956277 -0.0651141589 -0.22746075  1.584030901\n47 OR -0.05094515  1.19075819  0.5860274300  0.07428756  1.836773887\n48 CA  1.30952199  0.76267627  1.8424555662  1.76264123  1.190610215\n49 AK  0.52797704  2.68214035 -0.4961515487  0.90050319 -0.082642188\n50 HI -0.57197512 -0.19705577 -0.3310733994 -1.24047295  0.339390912\n          Theft     Vehicle\n1  -0.759700660 -1.04035426\n2  -0.944578268 -0.73523707\n3  -0.294181505 -0.95930750\n4  -0.969849308  2.49709812\n5  -0.465758565  1.53883946\n6  -0.213048167  0.30883580\n7   0.007740919  1.21465245\n8  -0.127924664  1.87732884\n9  -1.681428588 -0.13453761\n10 -0.457778237 -0.02965358\n11 -0.778321427 -0.25849147\n12  0.026361685  1.17174535\n13  0.611585766  1.99174778\n14 -0.154525758 -0.61128321\n15 -0.177136689 -0.44918971\n16 -0.155855813 -1.06895899\n17 -0.556202287  0.27069615\n18 -1.156056970 -1.25012232\n19 -1.302362990 -1.35023890\n20 -0.320782600 -1.02128443\n21  0.119465516 -0.59221339\n22  0.228530004 -0.52546900\n23  0.079563874  0.77604649\n24 -0.526941083 -0.77814417\n25 -2.075124788 -1.01651698\n26 -0.658616501 -0.83058619\n27 -0.096003350 -0.50163172\n28  0.087544202  0.22778905\n29  1.934990222  1.02872166\n30 -1.567043881 -0.90209803\n31 -1.053642756  0.77127904\n32 -0.816893014 -0.54930628\n33 -1.427388135 -1.10709864\n34 -0.815562959 -0.89256312\n35  0.663457900  0.28499852\n36  0.297692850  1.27186192\n37  1.421589096  1.58174656\n38  0.526462263 -0.79721400\n39 -0.157185868 -0.95930750\n40  0.212569347 -1.01651698\n41  1.746122450  0.49476659\n42  1.055824046 -0.18697963\n43  1.887108252  0.17534703\n44  1.537303858 -0.75907435\n45  0.759221841  0.45662694\n46  1.794004420 -0.32046839\n47  1.655678729  0.09430028\n48  0.619566094  1.81058445\n49  1.319174882  1.05732640\n50  1.118336618 -0.25849147\n```\n:::\n:::\n\n\n„scale“ führt eine Standardisierung (z-Transformation) durch, so dass alle Variablen anschiessen einen Mittelwert von 0 und eine SD von 1 haben, ausgenommen natürlich die 1. Spalte mit den Kürzeln der Bundesstaaten.\nAnschliessend wird das SSI-Kriterium getestet und zwar für Partitionierungen von 2 bis 6 Gruppen (wie viele Gruppen man maximal haben will, muss man pragmatisch nach der jeweiligen Fragestelltung entscheiden).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vegan)\ncrimez.KM.cascade <- cascadeKM(crimez[,c(2:8)],\n                        inf.gr = 2, sup.gr = 6, iter = 100, criterion = \"ssi\")\nsummary(crimez.KM.cascade)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Length Class  Mode     \npartition 250    -none- numeric  \nresults    10    -none- numeric  \ncriterion   1    -none- character\nsize       30    -none- numeric  \n```\n:::\n\n```{.r .cell-code}\ncrimez.KM.cascade$results\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      2 groups   3 groups   4 groups   5 groups  6 groups\nSSE 174.959159 144.699605 124.437221 108.119280 95.316398\nssi   1.226057   1.304674   1.555594   1.539051  1.351146\n```\n:::\n\n```{.r .cell-code}\ncrimez.KM.cascade$partition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   2 groups 3 groups 4 groups 5 groups 6 groups\n1         2        2        4        4        6\n2         2        2        4        4        6\n3         2        2        4        4        6\n4         1        1        1        3        3\n5         2        1        2        3        3\n6         2        1        2        3        1\n7         1        1        1        1        5\n8         1        1        1        3        3\n9         2        2        2        2        1\n10        2        1        2        2        1\n11        2        2        2        2        1\n12        1        1        1        1        5\n13        1        3        3        1        4\n14        2        2        4        4        6\n15        2        2        4        4        6\n16        2        2        4        4        6\n17        1        1        2        2        5\n18        2        2        4        4        6\n19        2        2        4        4        6\n20        2        2        4        4        6\n21        2        2        2        2        1\n22        2        1        2        2        1\n23        1        1        1        1        5\n24        2        2        2        2        1\n25        2        2        4        4        6\n26        2        1        2        2        1\n27        1        1        2        2        5\n28        1        1        3        1        5\n29        1        3        3        1        4\n30        2        2        2        2        1\n31        1        1        1        2        5\n32        2        1        2        2        1\n33        2        2        2        2        1\n34        2        2        2        2        1\n35        1        3        3        1        5\n36        1        1        3        5        2\n37        1        3        3        1        4\n38        2        2        4        4        6\n39        2        2        4        4        6\n40        2        2        4        4        6\n41        1        3        3        5        2\n42        1        3        3        5        2\n43        1        3        3        5        2\n44        2        2        4        4        6\n45        1        3        3        1        4\n46        1        3        3        5        2\n47        1        3        3        5        2\n48        1        3        3        1        4\n49        1        3        3        5        2\n50        2        2        2        4        1\n```\n:::\n\n```{.r .cell-code}\n# k-means visualisation\nlibrary(cclust)\nplot(crimez.KM.cascade, sortg = TRUE)\n```\n\n::: {.cell-output-display}\n![](Statistik8_Loesung_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nNach SSI ist die 4-Gruppenlösung die beste, mit dieser wird also weitergerechnet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4 Kategorien sind nach SSI offensichtlich besonders gut\nmodelz <- kmeans(crimez[,c(2:8)], 4)\nmodelz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nK-means clustering with 4 clusters of sizes 22, 10, 9, 9\n\nCluster means:\n       Murder        Rape     Robbery     Assault   Burglary      Theft\n1 -0.69828542 -0.77138855 -0.76544570 -0.84957173 -0.7970855 -0.4900018\n2 -0.07699665 -0.02720392  0.17975176  0.08506429 -0.1091087 -0.5091183\n3  0.47973352  0.96904551  0.01436791  0.70492557  1.1511357  1.0830163\n4  1.31273822  0.94679752  1.65699740  1.27728944  0.9185274  0.6804530\n     Vehicle\n1 -0.8162838\n2  0.5329062\n3  0.2569235\n4  1.1463189\n\nClustering vector:\n [1] 1 1 1 2 2 2 4 2 1 2 1 4 4 1 1 1 2 1 1 1 1 2 4 1 1 2 3 3 4 1 2 2 1 1 4 3 4 1\n[39] 1 1 3 3 3 1 4 3 3 4 3 1\n\nWithin cluster sum of squares by cluster:\n[1] 44.59027 28.83534 24.92365 27.50024\n (between_SS / total_SS =  63.3 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"        \"withinss\"     \"tot.withinss\"\n[6] \"betweenss\"    \"size\"         \"iter\"         \"ifault\"      \n```\n:::\n\n```{.r .cell-code}\n#File für ANOVA (Originaldaten der Vorfälle, nicht die ztransformierten)\ncrime.KM4 <- data.frame(crime,modelz[1])\ncrime.KM4$cluster <- as.factor(crime.KM4$cluster)\ncrime.KM4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    X Murder Rape Robbery Assault Burglary Theft Vehicle cluster\n1  ME    2.0 14.8      28     102      803  2347     164       1\n2  NH    2.2 21.5      24      92      755  2208     228       1\n3  VT    2.0 21.8      22     103      949  2697     181       1\n4  MA    3.6 29.7     193     331     1071  2189     906       2\n5  RI    3.5 21.4     119     192     1294  2568     705       2\n6  CT    4.6 23.8     192     205     1198  2758     447       2\n7  NY   10.7 30.5     514     431     1221  2924     637       4\n8  NJ    5.2 33.2     269     265     1071  2822     776       2\n9  PA    5.5 25.1     152     176      735  1654     354       1\n10 OH    5.5 38.6     142     235      988  2574     376       2\n11 IN    6.0 25.9      90     186      887  2333     328       1\n12 IL    8.9 32.4     325     434     1180  2938     628       4\n13 MI   11.3 67.4     301     424     1509  3378     800       4\n14 WI    3.1 20.1      73     162      783  2802     254       1\n15 MN    2.5 31.8     102     148     1004  2785     288       1\n16 IA    1.8 12.5      42     179      956  2801     158       1\n17 MO    9.2 29.2     170     370     1136  2500     439       2\n18 ND    1.0 11.6       7      32      385  2049     120       1\n19 SD    4.0 17.7      16      87      554  1939      99       1\n20 NE    3.1 24.6      51     184      748  2677     168       1\n21 KS    4.4 32.9      80     252     1188  3008     258       1\n22 DE    4.9 56.9     124     241     1042  3090     272       2\n23 MD    9.0 43.6     304     476     1296  2978     545       4\n24 VA    7.1 26.5     106     167      813  2522     219       1\n25 WV    5.9 18.9      41      99      625  1358     169       1\n26 NC    8.1 26.4      88     354     1225  2423     208       2\n27 SC    8.6 41.3      99     525     1340  2846     277       3\n28 GA   11.2 43.9     214     319     1453  2984     430       3\n29 FL   11.7 52.7     367     605     2221  4373     598       4\n30 KY    6.7 23.1      83     222      824  1740     193       1\n31 TN   10.4 47.0     208     274     1325  2126     544       2\n32 AL   10.1 28.4     112     408     1159  2304     267       2\n33 MS   11.2 25.8      65     172     1076  1845     150       1\n34 AR    8.1 28.9      80     278     1030  2305     195       1\n35 LA   12.8 40.1     224     482     1461  3417     442       4\n36 OK    8.1 36.4     107     285     1787  3142     649       3\n37 TX   13.5 51.6     240     354     2049  3987     714       4\n38 MT    2.9 17.3      20     118      783  3314     215       1\n39 ID    3.2 20.0      21     178     1003  2800     181       1\n40 WY    5.3 21.9      22     243      817  3078     169       1\n41 CO    7.0 42.3     145     329     1792  4231     486       3\n42 NM   11.5 46.9     130     538     1845  3712     343       3\n43 AZ    9.3 43.0     169     437     1908  4337     419       3\n44 UT    3.2 25.3      59     180      915  4074     223       1\n45 NV   12.6 64.9     287     354     1604  3489     478       4\n46 WA    5.0 53.4     135     244     1861  4267     315       3\n47 OR    6.6 51.1     206     286     1967  4163     402       3\n48 CA   11.3 44.9     343     521     1696  3384     762       4\n49 AK    8.6 72.7      88     401     1162  3910     604       3\n50 HI    4.8 31.0     106     103     1339  3759     328       1\n```\n:::\n\n```{.r .cell-code}\nstr(crime.KM4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t50 obs. of  9 variables:\n $ X       : chr  \"ME\" \"NH\" \"VT\" \"MA\" ...\n $ Murder  : num  2 2.2 2 3.6 3.5 4.6 10.7 5.2 5.5 5.5 ...\n $ Rape    : num  14.8 21.5 21.8 29.7 21.4 23.8 30.5 33.2 25.1 38.6 ...\n $ Robbery : int  28 24 22 193 119 192 514 269 152 142 ...\n $ Assault : int  102 92 103 331 192 205 431 265 176 235 ...\n $ Burglary: int  803 755 949 1071 1294 1198 1221 1071 735 988 ...\n $ Theft   : int  2347 2208 2697 2189 2568 2758 2924 2822 1654 2574 ...\n $ Vehicle : int  164 228 181 906 705 447 637 776 354 376 ...\n $ cluster : Factor w/ 4 levels \"1\",\"2\",\"3\",\"4\": 1 1 1 2 2 2 4 2 1 2 ...\n```\n:::\n:::\n\n\n**Von den agglomerativen Clusterverfahren habe ich mich für Ward’s minimum variance clustering entschieden, da dieses allgemein als besonders geeignet gilt.**\n\nVor der Berechnung von crime.norm und crime.ch muss man die Spalte mit den\nBundesstaatenkürzeln entfern.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Agglomerative Clusteranalyse\ncrime2 <- crime[,-1]\ncrime.norm <- decostand(crime2, \"normalize\")\ncrime.ch <- vegdist(crime.norm, \"euc\")\n# Attach site names to object of class 'dist'\nattr(crime.ch, \"Labels\") <- crime[,1]\n\n# Ward's minimum variance clustering\ncrime.ch.ward <- hclust(crime.ch, method = \"ward.D2\")\npar(mfrow = c(1, 1))\nplot(crime.ch.ward, labels = crime[,1], main = \"Chord - Ward\")\n```\n\n::: {.cell-output-display}\n![](Statistik8_Loesung_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Choose and rename the dendrogram (\"hclust\" object)\nhc <- crime.ch.ward\n# hc <- spe.ch.beta2\n# hc <- spe.ch.complete\ndev.new(title = \"Optimal number of clusters\", width = 12, height = 8, noRStudioGD = TRUE)\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npng \n  2 \n```\n:::\n\n```{.r .cell-code}\npar(mfrow = c(1, 2))\n\n\n# Average silhouette widths (Rousseeuw quality index)\nlibrary(cluster)\nSi <- numeric(nrow(crime))\nfor (k in 2:(nrow(crime) - 1))\n{\n sil <- silhouette(cutree(hc, k = k), crime.ch)\n Si[k] <- summary(sil)$avg.width\n}\nk.best <- which.max(Si)\nplot( 1:nrow(crime), Si, type = \"h\",\n main = \"Silhouette-optimal number of clusters\",\n xlab = \"k (number of clusters)\", ylab = \"Average silhouette width\")\n\naxis(1, k.best, paste(\"optimum\", k.best, sep = \"\\n\"), col = \"red\",\n font = 2, col.axis = \"red\")\npoints(k.best, max(Si), pch = 16, col = \"red\", cex = 1.5)\n```\n\n::: {.cell-output-display}\n![](Statistik8_Loesung_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n\nDemnach wären beim Ward’s-Clustering nur zwei Gruppen die optimale Lösung.\n\n**Für die Vergleiche der Bundesstaatengruppen habe ich mich im Folgenden für die k-means Clusterung mit 4 Gruppen entschieden.**\n\nDamit die Boxplots und die ANOVA direkt interpretierbar sind, werden für diese, anders als für die Clusterung, die untransformierten Incidenz-Werte verwendet (also crime statt crimez). Die Spalte mit der Clusterzugehörigkeit im Fall von k-means mit 4 Clustern hängt man als Spalte an (Achtung: muss als Faktor definiert werden!).\n\nAnschliessend kann man die 7 ANOVAs rechnen, die Posthoc-Vergleiche durchführen und die zugehörigen Boxplots mit Buchstaben für die homogenen Gruppen erzeugen. Sinnvollerweise gruppiert man die Abbildungen gleich, z. B. je 2 x 2. Das Skript ist hier simple für jede Verbrechensart wiederholt. Erfahrenere R-Nutzer können das Ganze hier natürlich durch eine Schleife abkürzen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(multcomp)\nif(!require(multcomp)){install.packages(\"multcomp\")}\nlibrary(multcomp)\npar(mfrow = c(3,3))\n\nANOVA.Murder <- aov(Murder~cluster, data = crime.KM4)\nsummary(ANOVA.Murder)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ncluster      3  338.6  112.85   21.08 9.73e-09 ***\nResiduals   46  246.2    5.35                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nletters <- cld(glht(ANOVA.Murder, linfct = mcp(cluster = \"Tukey\")))\nboxplot(Murder~cluster, xlab = \"Cluster\", ylab = \"Murder\", data = crime.KM4)\nmtext(letters$mcletters$Letters, at = 1:6)\n\nANOVA.Rape <- aov(Rape~cluster,data = crime.KM4)\nsummary(ANOVA.Rape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ncluster      3   6213  2070.9   23.43 2.36e-09 ***\nResiduals   46   4066    88.4                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nletters <- cld(glht(ANOVA.Rape, linfct = mcp(cluster = \"Tukey\")))\nboxplot(Rape~cluster, xlab = \"Cluster\", ylab = \"Rape\", data = crime.KM4)\nmtext(letters$mcletters$Letters, at = 1:6)\n\nANOVA.Robbery <- aov(Robbery~cluster, data = crime.KM4)\nsummary(ANOVA.Robbery)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ncluster      3 450920  150307   52.51 6.79e-15 ***\nResiduals   46 131669    2862                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nletters <- cld(glht(ANOVA.Robbery, linfct = mcp(cluster = \"Tukey\")))\nboxplot(Robbery~cluster, xlab = \"Cluster\", ylab = \"Robbery\", data = crime.KM4)\nmtext(letters$mcletters$Letters, at = 1:6)\n\nANOVA.Assault <- aov(Assault~cluster, data = crime.KM4)\nsummary(ANOVA.Assault)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df Sum Sq Mean Sq F value   Pr(>F)    \ncluster      3 680144  226715   38.75 1.21e-12 ***\nResiduals   46 269160    5851                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nletters <- cld(glht(ANOVA.Assault, linfct = mcp(cluster = \"Tukey\")))\nboxplot(Assault~cluster, xlab = \"Cluster\", ylab = \"Assault\",  data = crime.KM4)\nmtext(letters$mcletters$Letters, at = 1:6)\n\nANOVA.Burglary <- aov(Burglary~cluster, data = crime.KM4)\nsummary(ANOVA.Burglary)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df  Sum Sq Mean Sq F value   Pr(>F)    \ncluster      3 5912868 1970956   33.51 1.23e-11 ***\nResiduals   46 2705987   58826                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nletters <- cld(glht(ANOVA.Burglary, linfct=mcp(cluster = \"Tukey\")))\nboxplot(Burglary~cluster, data = crime.KM4, xlab = \"Cluster\", ylab = \"Burglary\")\nmtext(letters$mcletters$Letters, at=1:6)\n\nANOVA.Theft <- aov(Theft~cluster, data = crime.KM4)\nsummary(ANOVA.Theft)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df   Sum Sq Mean Sq F value   Pr(>F)    \ncluster      3 12773961 4257987   13.12 2.55e-06 ***\nResiduals   46 14924590  324448                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nletters <- cld(glht(ANOVA.Theft, linfct = mcp(cluster = \"Tukey\")))\nboxplot(Theft~cluster, xlab = \"Cluster\", ylab = \"Theft\", data = crime.KM4)\nmtext(letters$mcletters$Letters, at = 1:6)\n\nANOVA.Vehicle <- aov(Vehicle~cluster, data = crime.KM4)\nsummary(ANOVA.Vehicle)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            Df  Sum Sq Mean Sq F value   Pr(>F)    \ncluster      3 1316376  438792   24.04 1.65e-09 ***\nResiduals   46  839495   18250                     \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nletters <- cld(glht(ANOVA.Vehicle, linfct = mcp(cluster = \"Tukey\")))\nboxplot(Vehicle~cluster, data = crime.KM4, xlab = \"Cluster\", ylab = \"Vehicle\")\nmtext(letters$mcletters$Letters, at = 1:6)\n```\n\n::: {.cell-output-display}\n![](Statistik8_Loesung_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nDie Boxplots erlauben jetzt auch eine Beurteilung der Modelldiagnostik: sind die Residuen hinreichen normalverteilt (symmetrisch) und sind die Varianzen zwischen den Kategorien einigermassen ähnlich. Mit der Symmetrie/Normalverteilung sieht es OK aus. Die Varianzhomogenität ist nicht optimal – meist deutlich grössere Varianz bei höheren Mittelwerten. Eine log-Transformation hätte das verbessert und könnte hier gut begründet werden. Da die p-Werte sehr niedrig waren und die Varianzheterogenität noch nicht extrem war, habe ich aber von einer Transformation abgesehen, da jede Transformation die Interpretation der Ergebnisse erschwert. Jetzt muss man nur noch herausfinden, welche Bundesstaaten überhaupt zu welchem der vier\nCluster gehören, sonst ist das ganze schöne Ergebnis nutzlos. Z. B. kann man in R auf den Dataframe clicken und ihn nach cluster sortieren.\n",
    "supporting": [
      "Statistik8_Loesung_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}