{
  "hash": "9adb29606a550fd57fbaf432a71563bc",
  "result": {
    "markdown": "---\ntitle: \"Übung - Datentypen\"\nauthor:\n  - name: Patrick Laube\n  - name: Nils Ratnaweera\n  - name: Nikolaos Bakogiannis\nimage: preview.png\nlerneinheit: PrePro1\ndate: 2021-10-12\n---\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Arbeiten mit RStudio \"Project\"\n\nWir empfehlen die Verwendung von \"Projects\" innerhalb von RStudio. RStudio legt für jedes Projekt dann einen Ordner an, in welches die Projekt-Datei abgelegt wird (Dateiendung `.Rproj`). Sollen innerhalb des Projekts dann R-Skripts geladen oder erzeugt werden, werden diese dann auch im angelegten Ordner abgelegt. Mehr zu RStudio Projects findet ihr [hier](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).\n\nDas Verwenden von Projects bringt verschiedene Vorteile, wie zum Beispiel:\n\n-   Festlegen der Working Directory ohne die Verwendung des expliziten Pfades (`setwd()`). Das ist sinnvoll, da sich dieser Pfad ändern kann (Zusammenarbeit mit anderen Usern, Ausführung des Scripts zu einem späteren Zeitpunkt)\n-   Automatisches Zwischenspeichern geöffneter Scripts und Wiederherstellung der geöffneten Scripts bei der nächsten Session\n-   Festlegen verschiedener projektspezifischer Optionen\n-   Verwendung von Versionsverwaltungssystemen (git oder SVN)\n\n## Arbeiten mit Libraries / Packages\n\nR ist ohne Zusatzpackete nicht mehr denkbar. Die allermeisten Packages werden auf [CRAN](https://cran.r-project.org/) gehostet und können leicht mittels `install.packages()` installiert werden. Eine sehr wichtige Sammlung von Packages wird von RStudio entwickelt. Unter dem Namen [Tidyverse](https://www.tidyverse.org/) werden eine Reihe von Packages angeboten, den R-Alltag enorm erleichtert. Wir werden später näher auf das \"Tidy\"-Universum eingehen, an dieser Stelle können wir die Sammlung einfach mal die wichtigsten Packages aus `tidyverse` installieren (heute werden wir davon nur einen kleinen Teil benutzen).\n\n    install.packages(\"dplyr\")\n    install.packages(\"tidyr\")\n    install.packages(\"readr\")\n    install.packages(\"lubridate\")\n\nUm ein `package` in R verwenden zu können, gibt es zwei Möglichkeiten:\n\n-   entweder man lädt es zu Beginn der R-session mittles `library(dplyr)` (ohne Anführungs- und Schlusszeichen).\n-   oder man ruft eine `function` mit vorangestelltem Packetname sowie zwei Doppelpunkten auf. `dplyr::filter()` ruft die Funktion `filter()` des Packets `dplyr` auf.\n\nLetztere Notation ist vor allem dann sinnvoll, wenn sich zwei unterschiedliche Funktionen mit dem gleichen namen in verschiedenen pacakges existieren. `filter()` existiert als Funktion einersits im package `dplyr` sowie in `stats`. Dieses Phänomen nennt man \"masking\".\n\nZu Beginn laden wir die nötigen Pakete :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(lubridate)\n\n# Im Unterschied zu install.packages() werden bei library()\n# keine Anführungs- und Schlusszeichen gesetzt.\n```\n:::\n\n\n`dplyr` liefert viele Funktionen, für die es in der normalen R-Umgebung (\"base R\") keine wirkliche Alternative gibt. Andere Funktionen sind alternativen zu Base-R Funktionen (`read_csv` statt `read.csv`, `read_delim` statt `read.delim`.\n\nDiese verhalten sich leicht anders als Base-R Funktionen: Sie treffen weniger Annahmen und sind etwas konservativer. Wir verwenden oft Tidyverse Funktionen, ihr könnt aber selber entscheiden welche Version ihr benutzt.\n\n## Aufgabe 1\n\nErstelle eine `data.frame` mit nachstehenden Daten.\n\nTipps:\n\n-   Eine leere `data.frame` zu erstellen ist schwieriger als wenn erstellen und befüllen der `data.frame` in einem Schritt erfolgt\n-   R ist dafür gedacht, Spalte für Spalte zu arbeiten ([warum?](http://www.noamross.net/blog/2014/4/16/vectorization-in-r--why.html)), nicht Reihe für Reihe. Versuche dich an dieses Schema zu halten.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|Tierart | Anzahl| Gewicht|Geschlecht |Beschreibung                |\n|:-------|------:|-------:|:----------|:---------------------------|\n|Fuchs   |      2|     4.4|m          |Rötlich                     |\n|Bär     |      5|    40.3|f          |Braun, gross                |\n|Hase    |      1|     1.1|m          |klein, mit langen Ohren     |\n|Elch    |      3|   120.0|m          |Lange Beine, Schaufelgeweih |\n:::\n:::\n\n\n## Aufgabe 2\n\nWas für Datentypen wurden (in Aufgabe 1) von R automatisch angenommen? Sind diese sinnvoll?\n\n\n::: {.cell}\n\n```\n## 'data.frame':\t4 obs. of  5 variables:\n##  $ Tierart     : chr  \"Fuchs\" \"Bär\" \"Hase\" \"Elch\"\n##  $ Anzahl      : num  2 5 1 3\n##  $ Gewicht     : num  4.4 40.3 1.1 120\n##  $ Geschlecht  : chr  \"m\" \"f\" \"m\" \"m\"\n##  $ Beschreibung: chr  \"Rötlich\" \"Braun, gross\" \"klein, mit langen Ohren\" \"Lange Beine, Schaufelgeweih\"\n## [1] \"double\"\n```\n:::\n\n\n## Aufgabe 3\n\nNutze die Spalte `Gewicht` um die Tiere in 3 Gewichtskategorien einzuteilen:\n\n-   leicht: \\< 5kg\n-   mittel: 5 - 100 kg\n-   schwer: \\> 100kg\n\n\n::: {.cell}\n\n:::\n\n\n## Aufgabe 4\n\nImportiere den Datensatz [weather.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/weather.csv) (Rechtsklick -\\> Speichern Unter, Quelle MeteoSchweiz). Es handelt sich dabei um die stündlich gemittelten Temperaturdaten an verschiedenen Standorten in der Schweiz. Wir empfehlen [`read_csv()`](http://r4ds.had.co.nz/data-import.html) anstelle von `read.csv()`.\n\nAchtung! `read_csv` erwartet leicht andere inputs als `read.csv`, schaut euch die Hilfe dazu an (`?read_csv`).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|stn |       time| tre200h0|\n|:---|----------:|--------:|\n|ABO | 2000010100|     -2.6|\n|ABO | 2000010101|     -2.5|\n|ABO | 2000010102|     -3.1|\n|ABO | 2000010103|     -2.4|\n|ABO | 2000010104|     -2.5|\n|ABO | 2000010105|     -3.0|\n|ABO | 2000010106|     -3.7|\n|ABO | 2000010107|     -4.4|\n|ABO | 2000010108|     -4.1|\n|ABO | 2000010109|     -4.1|\n:::\n:::\n\n\n## Aufgabe 5\n\nSchau dir die Rückmeldung von `read_csv()`an. Sind die Daten korrekt interpretiert worden?\n\n\n::: {.cell}\n\n:::\n\n\n## Aufgabe 6\n\nDie Spalte `time` ist eine Datum/Zeitangabe im Format JJJJMMTTHH (siehe [meta.txt](meta.txt)). Damit R dies als Datum-/Zeitangabe erkennt, müssen wir die Spalte in einem R-Format (`POSIXct`) einlesen und dabei R mitteilen, wie sie aktuell formatiert ist. Lies die Spalte mit `as.POSIXct()` ein und spezifiziere sowohl `format` wie auch `tz`.\n\nTipps:\n\n-   Wenn keine Zeitzone festgelegt wird, trifft `as.POSIXct()` eine Annahme (basierend auf `Sys.timezone()`). In unserem Fall handelt es sich aber um Werte in UTC (siehe [metadata.csv](https://github.com/ResearchMethods-ZHAW/datasets/raw/main/prepro/metadata.csv))\n-   `as.POSIXct`erwartet `character`: Wenn du eine Fehlermeldung hast die `'origin' must be supplied` (o.ä) heisst, hast du der Funktion vermutlich einen `Numeric` übergeben.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\nTable: Die neue Tabelle sollte so aussehen\n\n|stn |time                | tre200h0|\n|:---|:-------------------|--------:|\n|ABO |2000-01-01 00:00:00 |     -2.6|\n|ABO |2000-01-01 01:00:00 |     -2.5|\n|ABO |2000-01-01 02:00:00 |     -3.1|\n|ABO |2000-01-01 03:00:00 |     -2.4|\n|ABO |2000-01-01 04:00:00 |     -2.5|\n|ABO |2000-01-01 05:00:00 |     -3.0|\n|ABO |2000-01-01 06:00:00 |     -3.7|\n|ABO |2000-01-01 07:00:00 |     -4.4|\n|ABO |2000-01-01 08:00:00 |     -4.1|\n|ABO |2000-01-01 09:00:00 |     -4.1|\n:::\n:::\n\n\n## Aufgabe 7\n\nErstelle zwei neue Spalten mit Wochentag (Montag, Dienstag, etc) und Kalenderwoche. Verwende dazu die neu erstellte `POSIXct`-Spalte\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|stn |time                | tre200h0|wochentag | kw|\n|:---|:-------------------|--------:|:---------|--:|\n|ABO |2000-01-01 00:00:00 |     -2.6|Sat       |  1|\n|ABO |2000-01-01 01:00:00 |     -2.5|Sat       |  1|\n|ABO |2000-01-01 02:00:00 |     -3.1|Sat       |  1|\n|ABO |2000-01-01 03:00:00 |     -2.4|Sat       |  1|\n|ABO |2000-01-01 04:00:00 |     -2.5|Sat       |  1|\n|ABO |2000-01-01 05:00:00 |     -3.0|Sat       |  1|\n|ABO |2000-01-01 06:00:00 |     -3.7|Sat       |  1|\n|ABO |2000-01-01 07:00:00 |     -4.4|Sat       |  1|\n|ABO |2000-01-01 08:00:00 |     -4.1|Sat       |  1|\n|ABO |2000-01-01 09:00:00 |     -4.1|Sat       |  1|\n:::\n:::\n\n\n## Aufgabe 8\n\nErstelle eine neue Spalte basierend auf die Temperaturwerte mit der Einteilung \"kalt\" (unter Null Grad) und \"warm\" (über Null Grad)\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n|stn |time                | tre200h0|wochentag | kw|temp_kat |\n|:---|:-------------------|--------:|:---------|--:|:--------|\n|ABO |2000-01-01 00:00:00 |     -2.6|Sat       |  1|kalt     |\n|ABO |2000-01-01 01:00:00 |     -2.5|Sat       |  1|kalt     |\n|ABO |2000-01-01 02:00:00 |     -3.1|Sat       |  1|kalt     |\n|ABO |2000-01-01 03:00:00 |     -2.4|Sat       |  1|kalt     |\n|ABO |2000-01-01 04:00:00 |     -2.5|Sat       |  1|kalt     |\n|ABO |2000-01-01 05:00:00 |     -3.0|Sat       |  1|kalt     |\n|ABO |2000-01-01 06:00:00 |     -3.7|Sat       |  1|kalt     |\n|ABO |2000-01-01 07:00:00 |     -4.4|Sat       |  1|kalt     |\n|ABO |2000-01-01 08:00:00 |     -4.1|Sat       |  1|kalt     |\n|ABO |2000-01-01 09:00:00 |     -4.1|Sat       |  1|kalt     |\n:::\n:::\n\n\n\n\n## Musterlösung\n\n\n",
    "supporting": [
      "Prepro1_Uebung_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}