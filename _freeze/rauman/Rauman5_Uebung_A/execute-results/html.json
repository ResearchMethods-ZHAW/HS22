{
  "hash": "0480bae8b67328dfd66d859decb08ca8",
  "result": {
    "markdown": "---\ndate: 2022-12-12\nlesson: RaumAn5\nthema: Multi-Criteria Evaluation (MCE)\nindex: 1\nexecute: \n  echo: false\n---\n\n\n# Rauman 5: Übung A\n\nIn der folgenden Übung möchten wir potentielle Standorte für Windkraftanlagen im Kanton Schwyz ermitteln. Zu diesem Zweck führen wir eine Multikriterien-Evaluation durch. Diese besteht im Wesentlichen aus zwei Teilen:\n\n- Flächeneignung (Kontinuierliche bewertung von 0 bis 1)\n- Ausschlussgebiete (Binärskala 0 *oder* 1)\n\nIn diesem ersten Teil (Übung A) widmen wir uns der Flächeneignung aufgrund der Distanz zu verschiedenen Gebieten. Gemäss @gilgen2010 sowie @tegou210 ist ein Gebiet umsobesser geeignet: \n\n1. Je weiter weg es sich von bewohnten Flächen, Nationalen Schutzgebieten und Waldgebieten befindet\n2. Je näher es sich zu einer Strasse befindet\n\nDiese Eignungsbewertung setzen wir in den folgenden Aufgaben in R um. Starten Sie R und laden Sie die nötigen Libraries in Ihre Session (s.u.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(terra)\nlibrary(dplyr)\nlibrary(tmap)\n```\n:::\n\n\n## Aufgabe 1: Vektor Daten laden und anzeigen\n\nLaden Sie das File [windkraft_geodata.gpkg](https://moodle.zhaw.ch/mod/resource/view.php?id=663498) von Moodle herunter. Dieses beinhaltet alle Vektordaten, die für die Bearbeitung der Multikriterien-Evaluation benötigt wird (Bewohnte Flächen, Nationale Schutzgebiete, Seeflächen, Strassen, Waldgebiete sowie die Kantonsgrenze von Schwyz). Die Namen der verfügbaren Listen können Sie mit `sf::st_layers()` ermitteln.\n\nExplorieren Sie die Daten visuell und versuchen Sie ein Verständnis für die Datensätze zu bekommen. Zur Visualisierung können Sie die Funktionen `plot` oder die Packages `tmap` oder `ggplot2` verwenden.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Aufgabe 2: Entfernungen zum Wald berechnen {#sec-raster-distance}\n\nBeginnen wir mit dem Kriterium \"Distanz zum Wald\". Wir müssen für den ganzen Kanton Schwyz wissen, wie weit entfernt der nächstgelegene Wald liegt. Wie wir bereits in @sec-raster-intro1 erläutert haben, lässt sich diese Information am besten in einem Raster abbilden.\n\nAnalog @sec-raster-intro1 müssen wir hierfür den Vektordatensatz auf der Basis eines Templates in ein Raster konvertieren. Für die Erstellung des Templates verwenden wir an dieser Stelle die Kantonsgrenze vom Kanton Schwyz.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Template mit der Ausdehnung und dem CRS vom Kt. kt_schwyz\n# erstellen, und mit einer Auflösung on 10m\ntemplate <- rast(kt_schwyz, resolution = 250)\n\n# Mit rasterize können wir \"wald\" in einen Raster konvertieren\nwald_raster <- rasterize(wald, template)\n\n# Nun kann für jeden Punkt im Kanton Schwyz die Distanz zum \n# nächsten Wald berechnet werden\nwald_dist <- distance(wald_raster)\n```\n:::\n\n\nNutze der obige Code um den Wald Datensatz zu rasterisieren und die Distanz zum Wald mit der Funktion `distance()` zu berechnen. Plausibilisiere den Output indem du ihn visualisierst.\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![Die rasterisierte Form des \"Wald\" Datensatzes](Rauman5_Uebung_A_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![Die Distanz zum nächstgelegenen Wald für jeden Punkt im Kanton Schwyz\"](Rauman5_Uebung_A_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\nFühre anschliessend die gleiche Operation durch um die Entfernung zu nationalen Schutzgebieten, bewohnten Gebieten und Strassen zu ermitteln.\n\n\n::: {.cell}\n\n:::\n\n\n## Aufgabe 3: Distanzkriterien Bewerten {#sec-classify1}\n\nJetzt haben wir die Distanzen zu den relevanten Gebieten berechnet, nun müssen wir diese Distanzen bewerten. Dafür teilen wir die kontinuierlichen Distanzwerte in diskrete Kategorien ein. Wir verwenden für die Aufgabe folgende Einteilung:\n\n<div class=\"mce-table\">\n\n\n::: {#tbl-bewerungstabelle-dist .cell tbl-cap='Bewertungstabelle für die Distanz zu verschiedenen Gebieten.'}\n\n```\nError in library(here): es gibt kein Paket namens 'here'\n```\n\n```\nError in library(readODS): es gibt kein Paket namens 'readODS'\n```\n\n```\nError in read_ods(reclassify_ods, x): konnte Funktion \"read_ods\" nicht finden\n```\n:::\n\n\n</div>\n\nHierfür brauchen wir die Function `classify()`. Wie wir aus der Dokumentation der Funktion (mit `?classify`) entnehmen können, gibt es verschiedene Wege wie wir einen Raster Reklassifizieren können (siehe Beschreibung für das Argument `rcl`).  Eine sehr explizite Variante ist, dass wir für `rcl` eine Matrix mit 3 Spalten verwenden. Diese drei Spalte stellen *from*, *to* und *becomes* dar. \n\nWir könnten diese Tabelle in einem Spreadsheet-Programm schreiben und in R einlesen. Alternativ können wir sie auch \"von Hand\" in R erstellen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwald_klassen <- matrix(c(\n    0000,0500,0.0,\n    0500,1000,0.2,\n    1000,1500,0.4,\n    1500,2000,0.6,\n    2000,2500,0.8,\n    2500,Inf,1.0), ncol = 3, byrow = TRUE)\n\n# Überprüfen, ob die Matrix auch korrekt erstellt wurde:\nwald_klassen\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    0  500  0.0\n[2,]  500 1000  0.2\n[3,] 1000 1500  0.4\n[4,] 1500 2000  0.6\n[5,] 2000 2500  0.8\n[6,] 2500  Inf  1.0\n```\n:::\n:::\n\n\nJetzt wo wir diese Matrix haben, können wir sie nutzen um den Kanton Schwyz hinsichtlich der Distanz zum Wald zu bewerten. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nwald_classify <- classify(wald_dist, wald_klassen)\n\n# Visualisierung des Resultats\ntm_shape(wald_classify) + tm_raster(palette = \"Spectral\")\n```\n\n::: {.cell-output-display}\n![](Rauman5_Uebung_A_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nBerechne in dieser Weise die Distanz zu den anderen Kriterien (Schutzgebiete, Siedlungsgebiete und Strassen). \n\n:::{.callout-note}\n## Optional für Profis\n\nVerwende für `rcl` einen eindimensionalen Vektor und konvertiere anschliessend die neu enstandenen `levels` in die Werte 0 - 1.\n:::\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Aufgabe 4: Raster Overlay {#sec-raster-overlay1}\n\nWir haben zwar noch nicht alle Kriterien berechnet, die wir für unsere Standortsuche berücksichtigen wollen, aber zumindest schon vier (Distanz zum Wald, zur Siedlung, zur Strasse und zu Schutzgebieten). Mit diesen vier Kriterien können wir schon mal eine erste, unvollständige Beurteilung wagen. \n\nWeil wir für alle Raster das gleiche Template verwendet haben, sind diese perfekt aneinander ausgerichtet. So können wir sie auf die denkbar einfachste Art miteinander verrechnen. Auf folgende Weise können wir beispielsweise den Mittlwert pro Zelle berechnen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlay_prelim_1 <- (strassen_classify + schutzgebiete_classify + siedlungsgebiet_classify + wald_classify)/4\n\ntm_shape(overlay_prelim_1) + tm_raster(palette = \"Spectral\")\n```\n\n::: {.cell-output-display}\n![](Rauman5_Uebung_A_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nWir können aber auch einen gewichteten Overlay durchführen. Auch das ist extrem Einfach:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noverlay_prelim_2 <- (strassen_classify*5 + schutzgebiete_classify*3 + siedlungsgebiet_classify*2 + wald_classify*1)/(5+3+2+1)\n\ntm_shape(overlay_prelim_2) + tm_raster(palette = \"Spectral\")\n```\n\n::: {.cell-output-display}\n![](Rauman5_Uebung_A_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Rauman5_Uebung_A_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}