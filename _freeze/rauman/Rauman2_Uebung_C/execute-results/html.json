{
  "hash": "ca6c2b8e2f3f46c4537295ebb13e43bc",
  "result": {
    "markdown": "---\ndate: 2022-11-29\nlesson: RaumAn2\nthema: Dichteschätzung\nindex: 3\n---\n\n\n# Rauman 2: Übung C\n\nNun wollen wir für die bereits verwendeten Datensätze `luftqualitaet.gpkg` und `rotmilan.gpkg` Dichteschätzungen durchführen. Ladet dafür die notwendigen Package und ladet bei Bedarf die Datensätze herunter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nlibrary(MASS) # <- ggf. installieren!\n```\n:::\n\n\n\n\n## Aufgabe 1: Rotmilan Bewegungsdaten visualisieren\n\nDie erste Frage, die bei solchen Bewegungsstudien typischerweise gestellt wird, lautet: *Wo hält sich das Tier hauptsächlich auf?* Um diese Frage zu beantworten, kann man als erstes einfach die Datenpunkte in einer einfachen Karte visualisieren. Erstellt zur Beantwortung dieser Frage nachstehende Karte.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Generierter Plot](Rauman2_Uebung_C_files/figure-html/fig-ggplot-ex1-1.png){#fig-ggplot-ex1 width=672}\n:::\n:::\n\n\n## Aufgabe 2: Kernel Density Estimation berechnen\n\nIn einer ersten Annäherung funktioniert dies, doch wir sehen hier ein klassisches Problem des \"Overplotting\". Das heisst, dass wir durch die Überlagerung vieler Punkte in den dichten Regionen nicht abschätzen können, wie viele Punkte dort effektiv liegen und ggf. übereinander liegen. Es gibt hier verschiedene Möglichkeiten, die Punktdichte klarer zu visualisieren. Eine unter Biologen sehr beliebte Methode ist die Dichteverteilung mit einer Kernel Density Estimation (KDE). Dies v.a. darum, weil mit KDE das Habitat (Streifgebiet) eines Tieres abgeschätzt werden kann. Homeranges werden oft mit KDE95 und Core Areas mit KDE50 definiert ([Fleming C., Calabrese J., 2016](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12673)).\n\nÄhnlich wie beim IDW sind auch die verfügbaren KDE-Funktionen in R etwas kompliziert in der Handhabung. Damit wir dieses Verfahren aber dennoch auf unsere Rotmilan-Daten anwenden können, haben wir eine eigene KDE-Funktion erstellt, die wir Euch zur Verfügung stellen. \n\nHier gilt das gleiche wie schon bei der Funktion `my_idw()`: Wir ermutigen alle, die dafür Kapazität haben, unsere Function eingehend zu studieren und allenfalls ganz auf die Funktion zu verzichten und stattdessen direkt `MASS` zu verwenden. Wenn ihr mit unserer Funktion arbeiten möchtet, müsst ihr den unten stehenden Code in euer Skript kopieren und ausführen. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_kde <- function(points,cellsize, bandwith, extent = NULL){\n  library(MASS)\n  library(sf)\n  library(tidyr)\n  if(is.null(extent)){\n    extent_vec <- st_bbox(points)[c(1,3,2,4)]\n  } else{\n    extent_vec <- st_bbox(extent)[c(1,3,2,4)]\n  }\n  \n  n_y <- ceiling((extent_vec[4]-extent_vec[3])/cellsize)\n  n_x <- ceiling((extent_vec[2]-extent_vec[1])/cellsize)\n  \n  extent_vec[2] <- extent_vec[1]+(n_x*cellsize)-cellsize\n  extent_vec[4] <- extent_vec[3]+(n_y*cellsize)-cellsize\n\n  coords <- st_coordinates(points)\n  mat <- kde2d(coords[,1],coords[,2],h = bandwith,n = c(n_x,n_y),lims = extent_vec)\n\n  mydf <- as.data.frame(mat[[3]])\n  \n  colnames(mydf) <- mat[[2]]\n  mydf$X <- mat[[1]]\n  \n  pivot_longer(mydf, -X,names_to = \"Y\",names_transform = list(Y = as.numeric))\n}\n```\n:::\n\n\nDie Parameter der Funktion sollten relativ klar sein:\n\n- `points`: Ein Punktdatensatz aus der Class `sf`\n- `cellsize`: Die Zellgrösse des output-Rasters\n- `bandwith`: Der Suchradius für die Dichteberechnung\n- `extent` (optional): Der Perimeter, in dem die Dichteverteilung berechnet werden soll. Wenn kein Perimeter angegeben wird, wird die \"bounding box\" von `points` genutzt.\n\nWenn wir nun mit `my_kde()` die Dichteverteilung berechnen, erhalten wir ein `data.frame` mit X und Y Koordinaten sowie eine Spalte `value` zurück. Nutzt diese drei Spalten mit `geom_raster()` um eure Daten mit `ggplot` zu visualisieren (`aes(x = X, y = Y, fill = value)`. \n\n::: {.cell}\n\n```{.r .cell-code}\nrotmilan_kde <- my_kde(points = rotmilan,cellsize = 1000, bandwith = 10000, extent = schweiz)\n\nrotmilan_kde\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 77,129 × 3\n          X        Y value\n      <dbl>    <dbl> <dbl>\n 1 2485410. 1075268.     0\n 2 2485410. 1076268.     0\n 3 2485410. 1077268.     0\n 4 2485410. 1078268.     0\n 5 2485410. 1079268.     0\n 6 2485410. 1080268.     0\n 7 2485410. 1081268.     0\n 8 2485410. 1082268.     0\n 9 2485410. 1083268.     0\n10 2485410. 1084268.     0\n# … with 77,119 more rows\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Generierter Plot](Rauman2_Uebung_C_files/figure-html/fig-ggplot-ex2-1.png){#fig-ggplot-ex2 width=672}\n:::\n:::\n\n\nDie Kernel Density Estimation ist nun sehr stark von den tiefen Werten dominiert, da die Dichte in den meisten Zellen unseres Untersuchungsgebiets nahe bei Null liegt. Wie erwähnt sind Wissenschaftler häufig nur an den höchsten 95\\% der Werte interessiert. Folge folgende Schritte um das Resultat etwas besser zu verantschaulichen:\n\n1. Berechne die 95. Perzentile aller Werte mit der Funktion `quantile` und benne diesen `q25`\n2. Erstelle eine neue Spalte in `rotmilan_kde`, wo alle Werte tiefer als `q25` `NA` entsprechen\n3. (Optional): Transformiere die Werte mit log10, um einen differenzierteren Farbverlauf zu erhalten\n\nWir können die tiefen Werte ausblenden, indem wir nur die höchsten 5% der Werte darstellen. Dafür berechnen wir mit `raster::quantile` die 95. Perzentile aller Werte und nutzen diesen Wert als \"Grenzwert\" für die Darstellung.\n\nZusätzlich hilft eine logarithmische Transformation der Werte, die Farbskala etwas sichtbarer zu machen.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Generierter Plot](Rauman2_Uebung_C_files/figure-html/fig-ggplot-ex2-log-1.png){#fig-ggplot-ex2-log width=672}\n:::\n:::\n\n\n## Aufgabe 3: Dichteverteilung mit Thiessen Polygonen\nThiessen Polygone bieten eine spannende Alternative um Unterschiede in der Dichteverteilung von Punktdatensätzen zu visualisieren. \nWir wollen dies nun ausprobieren und konstruieren zum Schluss die Thiessenpolygone für die Rotmilan-Daten für das Untersuchungsgebiet Schweiz. Nutze die Anleitung für das Erstellen von Thiessenpolygonen aus der Übung B um Thiessenpolygone für die Rotmilanpositionen zu erstellen. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Wenn wir jetzt die Thiessenpolygone (ohne Punkte) darstellen, wird deutlicher, wie die Dichteverteilung im Innern des Clusters aussieht. ](Rauman2_Uebung_C_files/figure-html/fig-ggplot-ex2-thiessen-1.png){#fig-ggplot-ex2-thiessen width=672}\n:::\n:::\n",
    "supporting": [
      "Rauman2_Uebung_C_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}