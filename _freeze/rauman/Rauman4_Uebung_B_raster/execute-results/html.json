{
  "hash": "1abe6f4542a5249b65d7aa744a9c307f",
  "result": {
    "markdown": "---\ndate: 2022-12-06\nlesson: RaumAn4\nthema: Einführung Rasterdaten\nindex: 2\n---\n\n\n# Rauman 4: Übung B\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nOne of the important aspects of the upcoming exercise (Multi-Criteria Evaluation (MCE)) is the use and manipulation of **raster datasets**. In `R`, two are the main packages used to handle raster data: `terra` and `raster` package. The latter is still heavily used, but inevitably is going to be replaced by the first one.\n\nBelow we will use `terra` to demonstrate how we can import a raster dataset. In the link below you can download a tif file, representing the `Digital Elevation Model` *(Digitales Höhenmodell, DHM)* of Canton Schwyz in Switzerland. Download the dataset and repeat the code provided.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\n```\n:::\n\n\nImport your raster with the function `rast`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm_schwyz <- rast(here(\"data\",\"dhm25m.tif\"))\n```\n:::\n\n\nYou get some important metadata on the raster dataset when you type the variable name in the console.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndhm_schwyz \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 1496, 1861, 1  (nrow, ncol, nlyr)\nresolution  : 25, 25  (x, y)\nextent      : 672187.5, 718712.5, 193662.5, 231062.5  (xmin, xmax, ymin, ymax)\ncoord. ref. : CH1903 / LV03 \nsource      : dhm25m.tif \nname        : dhm25m \n```\n:::\n:::\n\n\nTo get a quick look at the raster dataset, we can simply use either of the following `plot()` function:  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(dhm_schwyz)\n```\n\n::: {.cell-output-display}\n![](Rauman4_Uebung_B_raster_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nUnfortunately, adding `raster` to ggplot is not very straightforward. Since `ggplot` is a universal plotting framework we quickly reach the limits of what is possible when creating something as specialized as maps. For this reason, we will introduce a new plotting framework which is specialized on maps and was built in a very similar design as ggplot: `tmap`. Install and load this package now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tmap)\n```\n:::\n\n\nJust as `ggplot`, `tmap` is based on the idea of \"layers\" that are joined using a `+`. Each layer has two components:\n\n- a dataset component which is always `tm_shape(dataset)` (replace `dataset` with your variable)\n- a geometry component which describes how the preceeding `tm_shape()` should be visualized. This can be `tm_dots()` for points, `tm_polygons()` for polygons, `tm_lines()` for lines etc. For single band raster (which is the case for `dhm_schwyz`), it is `tm_raster()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(dhm_schwyz) + \n  tm_raster() \n```\n\n::: {.cell-output-display}\n![](Rauman4_Uebung_B_raster_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNote that `tm_shape()` and `tm_raster()` (in this case) belong together, one cannot live without the other.\n\nIf you consult the help of `?tm_raster` you will see a multitude of options with which to change the visualisation of your data. For example, the default `style` of `tm_raster()` is to create \"bins\" of the data with a descrete colour scale. We can override this using `style = \"cont\"`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(dhm_schwyz) + \n  tm_raster(style = \"cont\") \n```\n\n::: {.cell-output-display}\n![](Rauman4_Uebung_B_raster_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis already looks pretty awesome, but maby we want to change the default colour palette. Fortunately, this is *much* simpler in `tmap` than in `ggplot2`. To look at the available palettes, type `tmaptools::palette_explorer()` or `RColorBrewer::display.brewer.all()` in the console (the former might require you to install additional packages, e.g. `shinyjs`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(dhm_schwyz) + \n  tm_raster(style = \"cont\", palette = \"Spectral\") \n```\n\n::: {.cell-output-display}\n![](Rauman4_Uebung_B_raster_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nYou can make layout adjustments using `tm_layout()`, check `?tm_layout` to see all of the options available!\n\n::: {.column-body}\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(dhm_schwyz) + \n  tm_raster(style = \"cont\", palette = \"Spectral\", legend.is.portrait = FALSE, title = \"\") +\n  tm_layout(legend.outside = TRUE, legend.outside.position = \"bottom\",frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](Rauman4_Uebung_B_raster_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n:::\n",
    "supporting": [
      "Rauman4_Uebung_B_raster_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}