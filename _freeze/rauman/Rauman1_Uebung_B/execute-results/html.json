{
  "hash": "c6ac1511b7b12e298ce70195792de6a2",
  "result": {
    "markdown": "---\ndate: 2022-11-28\nlesson: RaumAn1\nthema: Spatial Joins\nindex: 2\n---\n\n\n# Rauman 1: Übung B\n\n\n::: {.cell}\n\n:::\n\n\nFür die kommende Übung arbeiten wir mit nachstehendem Datensatz. Lade diesen Herunter und importiere ihn in R.\n\nZudem brauchen wir die folgenden libraries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(sf)\nlibrary(ggplot2)\n```\n:::\n\n\n### Aufgabe 1: Geopackage \"Layers\"\n\nAllenfalls ist euch beim Importieren des Geopackage [gruental.pgkg](https://moodle.zhaw.ch/mod/resource/view.php?id=602277) folgende Warnmeldung aufgefallen:\n\n```\nWarning message:\nIn evalq((function (..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE,  :\n  automatically selected the first layer in a data source containing more than one.\n```\n\nDiese Warnmeldung weist darauf hin, dass das Geopackage `gruental.gpkg` mehrere Layers (rep. Datensätze) enthält und nur der erste Layer importiert wurde. Bringe mit dem Befehl `st_layers` die Layer Namen in Erfahrung und nutze diese im Anschluss in `st_read` (als Argument `layer = `) um die layers einzeln zu importieren und in variablen zu speichern (zB in als Variable `wiesen` und `baeume`).\n\n\n\n\n\n### Aufgabe 2: Datensätze erkunden\n\nNimm dir etwas Zeit und erkunde die beiden Datensätze. Nutze dafür auch die Visualisierungsmöglichkeiten von `ggplot` (insbesondere `geom_sf`).\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Beispielsweise kannst du die Daten in dieser Weise visualisieren.](Rauman1_Uebung_B_files/figure-html/fig-ggplot-ex2-1.png){#fig-ggplot-ex2 width=672}\n:::\n:::\n\n\n### Aufgabe 3:  Spatial Join mit Punkten\n\nWir wollen nun für jeden *Baum* wissen, ob er sich in einer Wiese befindet oder nicht. Dazu nutzen wir die GIS-Technik *Spatial Join*, die in der Vorlesung beschrieben wurde. In `sf` können wir Spatial Joins mit der Funktion `st_join` durchführen, dabei gibt es nur `left` sowie `inner`-Joins (vgl. PrePro 1 & 2). So müssen die Punkte \"Links\", also an erste Stelle aufgeführt werden, da wir ja Attribute *an* die Punkte anheften wollen.\n\nBeachte, dass der Output eine neue Spalte `flaechen_typ` aufweist. Diese ist leer (`NA`) wenn sich der entsprechende Baum nicht in einer Wiese befindet. Wie viele Bäume befinden sich in einer Wiese, wie viele nicht?\n\n\n::: {.cell}\n\n:::\n\n\n### Aufgabe 4: Spatial Join mit Flächen\n\nAnalog der Vorlesung wollen wir nun in Erfahrung bringen, wie hoch der Wiesen-Anteil im Umkreis von 20m um jeden Baum ist. Dazu sind folgende Schritte nötig: \n\n1. Als erster Schritt müssen wir jeden Baum mit einem 20m Puffer verstehen. Nutze dazu `st_buffer` um speichere den Output als `baeume_20m`. Schau dir `baeume_20m` nun genau an. Um welchen Geometrietyp handelt es sich dabei nun?\n2. Berechnen nun die Schnittmenge aus `baeume_20m` und `wiesen` mit der Funktion `st_intersection` und speichere den Output als `baeume_wiesen`. Exploriere nun `baeume_wiesen`, auch mit `ggplot()`. Was ist passiert? Überprüfe die Anzahl Zeilen pro Datensatz. Haben die sich verändert? Wenn ja, warum?\n3. Berechnen nun die Flächengrösse pro Geometrie mit der Funktion `st_area()`. Speichere den Output in einer neuen Spalte von `baeume_wiesen` (z.B. mit dem Namen `wiesen_flaeche`). Tipp: Konvertiere den Output aus `st_area` einen nummerischen Vektor mit `as.numeric()`.\n4. Berechne nun aus `wiesen_flaeche` den `wiesen_anteil`. Tipp: 100% ist die Kreisfläche aus $r^2\\times \\pi$, wobei in unserem Fall $r = 20$ entspricht.\n\nUm die berechneten Werte in den Datensatz `baeume` zu überführen braucht es noch folgende Schritte:\n\n1. Konvertiere `baeume_wiesen` in eine `data.frame` mit `st_drop_geometry` und speichere diese als `baeume_wiesen_df`\n2. Nutze die Spalte `baum_id` in `baeume_wiesen_df` um den berechneten `wiesen_anteil` in den Datenatz `baeume` zu überführen. Tipp: Nutze dafür einen `left_join`\n3. Ersetze alle `NA` Werte in der Spalte `wiesen_anteil` mit 0.\n\n\n::: {.cell}\n\n:::\n\n\n::: {.column-body}\n\n::: {.cell}\n::: {.cell-output-display}\n![Nach dieser Übung kannst du das Resultat optional in dieser Weise visualisieren.](Rauman1_Uebung_B_files/figure-html/fig-ggplot-ex4-1.png){#fig-ggplot-ex4 width=672}\n:::\n:::\n\n:::\n\n## Musterlösung\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "Rauman1_Uebung_B_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}