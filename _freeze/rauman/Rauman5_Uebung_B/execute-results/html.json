{
  "hash": "dcefae555d62b4ce43ce3bb7c6b7b018",
  "result": {
    "markdown": "---\ndate: 2022-12-12\nlesson: RaumAn5\nthema: Multi-Criteria Evaluation (MCE)\nindex: 1\nexecute: \n  echo: false\n---\n\n\n# Rauman 5: Übung B\n\nIn der letzten Übung (Übung A) haben wir die potentielle Standorte für Windkraftanalgen hinsichtlich vierer Distanzkriterien bewertet. In dieser Übung (Übung B) schliessen wir die Multikriterien-Evaluation ab, in dem wir:\n\n1. Folgende Kriterien mitberücksichtigen: Windgeschwindigkeit, Vereisungshäufigkeit und Hangneigung\n2. Die *Ausschlusskriterien* vom Resultat ausschliessen\n\nFür Punkt 1 müssen wir zusätzliche Daten einlesen, die im Rasterformat daherkommen. Punkt 2 beruht im Wesentlichen auf Daten, die wir bereits verwendet haben.\n\n\n::: {.cell}\n\n:::\n\n\n<!--\n3. Je höher die Windgeschwindigkeit ist\n4. Je geringer die Vereisungshäufigkeit ist\n5. Je geringer die Hangneigung ist\n-->\n\n## Aufgabe 1: Rasterdaten einlesen\n\nZur Bewertung der Standorte hinsichtlich Windgeschwindigkeit steht uns folgender Rasterdatensatz zur Verfügung. Lade die beiden nachfolgenden Datensätze herunter und mit der Funktion `rast()` in R ein: [wind250m.tif](https://moodle.zhaw.ch/mod/resource/view.php?id=602297) (Durchschnittliche Windgeschwindigkeit)\n\nExplorieren Sie den Datensatz visuell und versuchen Sie ein Verständnis für die Datensätze zu bekommen. \n\n\n::: {.cell}\n\n:::\n\n::: {.cell .column-page}\n::: {.cell-output-display}\n![Datensatz 'wind250m' zur Windgeschwindigkeit in m pro Sekunde](Rauman5_Uebung_B_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Aufgabe 2: Wind bewerten\n\nDiese Rasterdaten müssen wir nicht weiter verarbeiten, wir können sie direkt bewerten. Führen Sie diese Bewertung aufgrund nachstehender Tabelle durch. Nutzen Sie dafür die Funktion `classify()` analog @sec-classify1. Sie können die Schwellwerte frei wählen, wir werden diejenigen verwenden, die in @tbl-bewerungstabelle-other festgehalten sind.\n\n\n\n::: {.cell layout-ncol=\"2\"}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Aufgabe 3: Slope berechnen und Bewerten\n\nFür die Berechnung und anschilessende Bewertung der Hangneigung brauchen wir ein Höhenmodell. Lade das Höhenmodell, was wir bereits in @sec-raster-intro verwendet haben ([dhm250m.tif](https://moodle.zhaw.ch/mod/resource/view.php?id=694260)) in R ein, und berechne Anschliessend die Hangneigung mit der Funktion `terrain()` analog @sec-raster-slope (beachten Sie die Einheit des Output!). \n\nBewerten Sie die Hangneigung danach gemäss Tabelle @tbl-bewerungstabelle-other. \n\n\n::: {.cell}\n\n:::\n\n\n\n<div class=\"mce-table\">\n\n\n::: {#tbl-bewerungstabelle-other .cell tbl-cap='Bewertungstabelle die Windgeschwindigkeit (m/s), Vereisungshäufigkeit (Tage/Jahr) und Hangneigung (Grad)'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style='font-family: \"Arial Narrow\", \"Source Sans Pro\", sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n<tr>\n<th style=\"padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"3\"><div style=\"border-bottom: 1px solid #111111; margin-bottom: -1px; \">Windgeschwindigkeit</div></th>\n<th style=\"padding-bottom:0; padding-left:3px;padding-right:3px;text-align: center; \" colspan=\"3\"><div style=\"border-bottom: 1px solid #111111; margin-bottom: -1px; \">Hangneigung</div></th>\n</tr>\n  <tr>\n   <th style=\"text-align:right;\"> von </th>\n   <th style=\"text-align:right;\"> bis </th>\n   <th style=\"text-align:right;\"> zu </th>\n   <th style=\"text-align:right;\"> von </th>\n   <th style=\"text-align:right;\"> bis </th>\n   <th style=\"text-align:right;\"> zu </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:right;\"> 0.0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 1.0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:right;\"> 30 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 0.8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 30 </td>\n   <td style=\"text-align:right;\"> 40 </td>\n   <td style=\"text-align:right;\"> 0.4 </td>\n   <td style=\"text-align:right;\"> 8 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> 0.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 40 </td>\n   <td style=\"text-align:right;\"> 50 </td>\n   <td style=\"text-align:right;\"> 0.6 </td>\n   <td style=\"text-align:right;\"> 12 </td>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:right;\"> 0.4 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 50 </td>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> 0.8 </td>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:right;\"> 0.2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 60 </td>\n   <td style=\"text-align:right;\"> Inf </td>\n   <td style=\"text-align:right;\"> 1.0 </td>\n   <td style=\"text-align:right;\"> 20 </td>\n   <td style=\"text-align:right;\"> 90 </td>\n   <td style=\"text-align:right;\"> 0.0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n</div>\n\n## Aufgabe 4: Raster Overlay {#sec-raster-overlay2}\n\nAnalog @sec-raster-overlay1 können wir an dieser Stelle eine vorläufige Beurteilung der Gebiete durchführen. Hier stossen wir aber auf ein Problem. Sobald wir versuchen, Bewertungen aus Übung A mit bewertungen aus dieser Übung (Übung B) miteinander zu verrechnen, erhalten wir folgende Fehlermeldung:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n```\nError: [+] extents do not match\n```\n:::\n:::\n\n\n`SRS do not match` soll heissen, dass die Koordinatenbezugssysteme (CRS) der verschiedenen Raster nicht überein stimmen. Mit folgendem befehl können wir die CRS für die einzelnen Datensätze ermitteln.\n\n\n\n::: {.cell}\n\n:::\n\n\nWenn wir die CRS der verschiedenen Datensätze aber anschauen sehen wir, dass es sich eigentlich um die gleichen CRS handelt. \n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n         datensatz           name authority code                       area\n1    wind_classify CH1903+ / LV95      EPSG 2056 Liechtenstein; Switzerland\n2 neigung_classify CH1903+ / LV95      EPSG 2056 Liechtenstein; Switzerland\n                     extent\n1 5.96, 10.49, 47.81, 45.82\n2 5.96, 10.49, 47.81, 45.82\n```\n:::\n:::\n\n\n\nDas Problem scheint darin zu liegen, dass die Rasterdatensätze `wind250m` und `dhm250m` das CRS nicht ganz korrekt gespeichert zu haben scheinen. Wir können das Problem lösen, indem wir den CRS dieser Raster-files explizit setzen:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Im Unterschied zu sf Objekten müssen wir bei Rasterdatensätze\n# das CRS wie folgt setzen:\n\ncrs(wind_classify) <- \"EPSG:2056\"\ncrs(neigung_classify) <- \"EPSG:2056\"\n```\n:::\n\n\nNun sollte der Overlay problemlos funktionieren. Führe einen Overlay mit allen verfügbaren Parameter (Bewertung der Distanz zu Strassen, Siedlung, Wald und Schutzgebiete sowie Wind, Eis und Neigung) durch und visualisiere das Resultat.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n```\nError: [+] extents do not match\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in as.list.environment(environment()): Objekt 'overlay_prelim_3' nicht gefunden\n```\n:::\n:::\n\n\n## Aufgabe 5: Ausschlusskriterien \n\nAls Auschlussgebiete gelten Flächen, wo keine Windkraftanlagen gebaut werden können. Dazu gehören bewohnte Flächen, nationale Schutzgebiete, Waldgebiete und Seen. (Zwar werden Schutzgebiete in unserer Analyse bereits berücksichtigt, aber nicht kategorisch vom Resultat ausgeschlossen.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nschutzgebiete <- read_sf(gpkg_path, \"Nationale_Schutzgebiete\")\nsiedlungsgebiet <- read_sf(gpkg_path, \"Bewohnte_Flaeche\")\nwald <- read_sf(gpkg_path, \"Waldgebiete\")\nseen <- read_sf(gpkg_path, \"Seeflaechen\")\n```\n:::\n\n\n\nUm diese Flächen aus von unserem Resultat auzuschliessen, können wir wieder die Funktion `mask()` verwenden (siehe @sec-rauman5-mask). Doch diesmal möchten wir nicht die Flächen *ausserhalb* der Polygone mit `NA` ersetzen, sondern die Flächen *innerhalb* der Polygone. Deshalb verwenden wir `mask()` mit dem Argument `inverse = TRUE`.\n\nVersuche mit `mask()`, den oben erwähnten Vektordatensätze sowie der Option `inverse = TRUE` die Ausschlussgebiete vom Raster-Overlay zu entfernen und visualisiere das Resultat.\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n```\nError in h(simpleError(msg, call)): Fehler bei der Auswertung des Argumentes 'x' bei der Methodenauswahl für Funktion 'mask': Fehler bei der Auswertung des Argumentes 'x' bei der Methodenauswahl für Funktion 'mask': Fehler bei der Auswertung des Argumentes 'x' bei der Methodenauswahl für Funktion 'mask': Fehler bei der Auswertung des Argumentes 'x' bei der Methodenauswahl für Funktion 'mask': Objekt 'overlay_prelim_3' nicht gefunden\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in as.list.environment(environment()): Objekt 'overlay_prelim_4' nicht gefunden\n```\n:::\n:::\n",
    "supporting": [
      "Rauman5_Uebung_B_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\r\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}