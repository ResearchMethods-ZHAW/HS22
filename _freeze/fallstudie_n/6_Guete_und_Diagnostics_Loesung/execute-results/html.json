{
  "hash": "5008d753b3e4cf980d8a77a9da6f62c1",
  "result": {
    "markdown": "---\nexecute:\n  echo: true\nformat:\n  html:\n    code-tools:\n      source: true\n---\n\n\n## 6. Modellgüte und -diagnostics MM / Habitatselektionsmodell - Lösung\n\n### Libraries laden\n\nNeue packages die wir für die Modelle und die Diagnostics brauchen\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# neue Packages: DHARMa, car, MASS, ROCR, sjPlot, sjstats, ggeffects, cowplot, gstat\n\nipak <- function(pkg){\n  new.pkg <- pkg[!(pkg %in% installed.packages()[, \"Package\"])]\n  if (length(new.pkg)) \n    install.packages(new.pkg, repos = \"http://cran.us.r-project.org\", dependencies = TRUE)\n  sapply(pkg, require, character.only = TRUE)\n}\n\npackages <- c(\"lme4\", \"bbmle\", \"MuMIn\", \"tidyverse\", \"DHARMa\", \"car\", \"MASS\", \"ROCR\", \n              \"sjPlot\",  \"ggeffects\", \"sjstats\", \"cowplot\", \"magrittr\", \"gstat\")\n\nipak(packages)\n```\n:::\n\n\n### Ausgangslage\n\n- Der Modellfit von letzter Woche als Ausgangspunkt für die heutige Übung\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# | results: hide\nDF_mod_day <- read_delim(\"fallstudie_n/data/Aufgabe4_Datensatz_Habitatnutzung_Modelle_20221031_moodle.csv\",\n    delim = \";\") %>%\n    filter(time_of_day == \"day\") %>%\n    mutate(slope_scaled = scale(slope), us_scaled = scale(us), os_scaled = scale(os),\n        forest_prop_scaled = scale(forest_prop), dist_road_all_scaled = scale(dist_road_all),\n        dist_road_only_scaled = scale(dist_road_only), dist_build_scaled = scale(dist_build),\n        id = as.factor(id))\n\nf <- pres_abs ~ slope_scaled + us_scaled + os_scaled + forest_prop_scaled + dist_road_only_scaled +\n    dist_build_scaled\n\nf <- paste(c(f, \"+ (1 | id)\"), collapse = \" \") %>%\n    as.formula()\n\nm_day <- glmer(f, data = DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nall_m <- dredge(m_day)\n\navgmodel <- model.avg(all_m, rank = \"AICc\", subset = delta < 2)\nsummary(avgmodel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nmodel.avg(object = get.models(object = all_m, subset = delta < \n    2), rank = \"AICc\")\n\nComponent model call: \nglmer(formula = pres_abs ~ <3 unique rhs>, data = DF_mod_day, family = \n     binomial, na.action = na.fail)\n\nComponent models: \n       df   logLik    AICc delta weight\n12356   7 -2337.01 4688.05  0.00   0.48\n123456  8 -2336.48 4689.00  0.95   0.30\n2356    6 -2338.78 4689.58  1.53   0.22\n\nTerm codes: \n    dist_build_scaled dist_road_only_scaled    forest_prop_scaled \n                    1                     2                     3 \n            os_scaled          slope_scaled             us_scaled \n                    4                     5                     6 \n\nModel-averaged coefficients:  \n(full average) \n                      Estimate Std. Error Adjusted SE z value Pr(>|z|)    \n(Intercept)           -0.49073    0.14774     0.14778   3.321 0.000898 ***\ndist_build_scaled     -0.07877    0.06433     0.06434   1.224 0.220856    \ndist_road_only_scaled  0.44281    0.04792     0.04793   9.239  < 2e-16 ***\nforest_prop_scaled     0.83786    0.06487     0.06489  12.912  < 2e-16 ***\nslope_scaled          -0.13548    0.04973     0.04975   2.723 0.006463 ** \nus_scaled              0.40130    0.04101     0.04102   9.784  < 2e-16 ***\nos_scaled              0.01927    0.04529     0.04530   0.425 0.670597    \n \n(conditional average) \n                      Estimate Std. Error Adjusted SE z value Pr(>|z|)    \n(Intercept)           -0.49073    0.14774     0.14778   3.321 0.000898 ***\ndist_build_scaled     -0.10139    0.05508     0.05510   1.840 0.065755 .  \ndist_road_only_scaled  0.44281    0.04792     0.04793   9.239  < 2e-16 ***\nforest_prop_scaled     0.83786    0.06487     0.06489  12.912  < 2e-16 ***\nslope_scaled          -0.13548    0.04973     0.04975   2.723 0.006463 ** \nus_scaled              0.40130    0.04101     0.04102   9.784  < 2e-16 ***\nos_scaled              0.06466    0.06284     0.06286   1.029 0.303615    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n:::\n\n\n- Die Modellresultate aus dem avgmodel sind grundätzlich die finalen Resultate die bereits interpretiert werden könnten. Allerdings funktionieren die Diagnosetests und die Darstellung der Resultate mit diesem gemittelten Modell nicht sehr gut, weshalb wir einen re-fit mit glmer machen müssen (an den Resultaten ändert sich dadurch nichts) \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hier noch zum Vergleich, dass die Resulate sich nur marginal verändern \n\nsummary(avgmodel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nmodel.avg(object = get.models(object = all_m, subset = delta < \n    2), rank = \"AICc\")\n\nComponent model call: \nglmer(formula = pres_abs ~ <3 unique rhs>, data = DF_mod_day, family = \n     binomial, na.action = na.fail)\n\nComponent models: \n       df   logLik    AICc delta weight\n12356   7 -2337.01 4688.05  0.00   0.48\n123456  8 -2336.48 4689.00  0.95   0.30\n2356    6 -2338.78 4689.58  1.53   0.22\n\nTerm codes: \n    dist_build_scaled dist_road_only_scaled    forest_prop_scaled \n                    1                     2                     3 \n            os_scaled          slope_scaled             us_scaled \n                    4                     5                     6 \n\nModel-averaged coefficients:  \n(full average) \n                      Estimate Std. Error Adjusted SE z value Pr(>|z|)    \n(Intercept)           -0.49073    0.14774     0.14778   3.321 0.000898 ***\ndist_build_scaled     -0.07877    0.06433     0.06434   1.224 0.220856    \ndist_road_only_scaled  0.44281    0.04792     0.04793   9.239  < 2e-16 ***\nforest_prop_scaled     0.83786    0.06487     0.06489  12.912  < 2e-16 ***\nslope_scaled          -0.13548    0.04973     0.04975   2.723 0.006463 ** \nus_scaled              0.40130    0.04101     0.04102   9.784  < 2e-16 ***\nos_scaled              0.01927    0.04529     0.04530   0.425 0.670597    \n \n(conditional average) \n                      Estimate Std. Error Adjusted SE z value Pr(>|z|)    \n(Intercept)           -0.49073    0.14774     0.14778   3.321 0.000898 ***\ndist_build_scaled     -0.10139    0.05508     0.05510   1.840 0.065755 .  \ndist_road_only_scaled  0.44281    0.04792     0.04793   9.239  < 2e-16 ***\nforest_prop_scaled     0.83786    0.06487     0.06489  12.912  < 2e-16 ***\nslope_scaled          -0.13548    0.04973     0.04975   2.723 0.006463 ** \nus_scaled              0.40130    0.04101     0.04102   9.784  < 2e-16 ***\nos_scaled              0.06466    0.06284     0.06286   1.029 0.303615    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nsummary(m_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeneralized linear mixed model fit by maximum likelihood (Laplace\n  Approximation) [glmerMod]\n Family: binomial  ( logit )\nFormula: \npres_abs ~ slope_scaled + us_scaled + os_scaled + forest_prop_scaled +  \n    dist_road_only_scaled + dist_build_scaled + (1 | id)\n   Data: DF_mod_day\n\n     AIC      BIC   logLik deviance df.resid \n  4689.0   4739.7  -2336.5   4673.0     4177 \n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-7.2055 -0.6829 -0.3699  0.8412  4.2787 \n\nRandom effects:\n Groups Name        Variance Std.Dev.\n id     (Intercept) 0.2449   0.4948  \nNumber of obs: 4185, groups:  id, 12\n\nFixed effects:\n                      Estimate Std. Error z value Pr(>|z|)    \n(Intercept)           -0.49246    0.14868  -3.312 0.000926 ***\nslope_scaled          -0.14705    0.05094  -2.887 0.003893 ** \nus_scaled              0.39206    0.04163   9.418  < 2e-16 ***\nos_scaled              0.06466    0.06284   1.029 0.303495    \nforest_prop_scaled     0.82086    0.07051  11.641  < 2e-16 ***\ndist_road_only_scaled  0.44901    0.04733   9.487  < 2e-16 ***\ndist_build_scaled     -0.09854    0.05516  -1.786 0.074042 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nCorrelation of Fixed Effects:\n            (Intr) slp_sc us_scl os_scl frst__ dst___\nslope_scald  0.032                                   \nus_scaled    0.003 -0.136                            \nos_scaled   -0.001 -0.312 -0.276                     \nfrst_prp_sc -0.064 -0.081  0.064 -0.573              \ndst_rd_nly_ -0.016 -0.227  0.024  0.041  0.167       \ndst_bld_scl  0.029 -0.019  0.020  0.081 -0.471 -0.244\n```\n:::\n\n```{.r .cell-code}\n# https://stats.stackexchange.com/questions/153611/interpreting-random-effect-variance-in-glmer\n\n# 95% range of the roe deer effects is approximately: -0.97 - 0.97\n```\n:::\n\n\n### Aufgabe 1\n\nBerechung der AUC (area under the receiver operating characteristic curve)**= Mass der Modellgüte**\n\nFür die Berechnung des AUC findet ihr weiterführende Informationen unter: [Link](https://www.wsl.ch/staff/niklaus.zimmermann/programs/progs/simtest.pdf) \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprob <- predict(m_day,type=c(\"response\"))   \npred <- prediction(prob, DF_mod_day$pres_abs)    \n\n# AUC\n\nauc <- performance(pred, measure = \"auc\")@y.values[[1]]\nauc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7769202\n```\n:::\n:::\n\n\n### Aufgabe 2\n\nInterpretieren der Modell-Residuen mittels Tests auf verschiedene Aspekte\n\n- Model testing for over/underdispersion, zeroinflation and spatial autocorrelation following the DHARMa package.\n- unbedingt die Vignette des DHARMa-Package konsultieren: [Link](https://cran.r-project.org/web/packages/DHARMa/vignettes/DHARMa.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Residuals werden über eine Simulation auf eine Standard-Skala transformiert und \n# können anschliessend getestet werden. Dabei kann die Anzahl Simulationen eingestellt \n# werden (dauert je nach dem sehr lange)\n\nsimulationOutput <- simulateResiduals(fittedModel = m_day, n = 10000)\n\n# plotting and testing scaled residuals\n\nplot(simulationOutput)\n```\n\n::: {.cell-output-display}\n![](6_Guete_und_Diagnostics_Loesung_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntestResiduals(simulationOutput)\n```\n\n::: {.cell-output-display}\n![](6_Guete_und_Diagnostics_Loesung_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$uniformity\n\n\tAsymptotic one-sample Kolmogorov-Smirnov test\n\ndata:  simulationOutput$scaledResiduals\nD = 0.02194, p-value = 0.03559\nalternative hypothesis: two-sided\n\n\n$dispersion\n\n\tDHARMa nonparametric dispersion test via sd of residuals fitted vs.\n\tsimulated\n\ndata:  simulationOutput\ndispersion = 0.9797, p-value = 0.4862\nalternative hypothesis: two.sided\n\n\n$outliers\n\n\tDHARMa outlier test based on exact binomial test with approximate\n\texpectations\n\ndata:  simulationOutput\noutliers at both margin(s) = 1, observations = 4185, p-value = 0.567\nalternative hypothesis: true probability of success is not equal to 0.00019998\n95 percent confidence interval:\n 6.049637e-06 1.330610e-03\nsample estimates:\nfrequency of outliers (expected: 0.0001999800019998 ) \n                                         0.0002389486 \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n$uniformity\n\n\tAsymptotic one-sample Kolmogorov-Smirnov test\n\ndata:  simulationOutput$scaledResiduals\nD = 0.02194, p-value = 0.03559\nalternative hypothesis: two-sided\n\n\n$dispersion\n\n\tDHARMa nonparametric dispersion test via sd of residuals fitted vs.\n\tsimulated\n\ndata:  simulationOutput\ndispersion = 0.9797, p-value = 0.4862\nalternative hypothesis: two.sided\n\n\n$outliers\n\n\tDHARMa outlier test based on exact binomial test with approximate\n\texpectations\n\ndata:  simulationOutput\noutliers at both margin(s) = 1, observations = 4185, p-value = 0.567\nalternative hypothesis: true probability of success is not equal to 0.00019998\n95 percent confidence interval:\n 6.049637e-06 1.330610e-03\nsample estimates:\nfrequency of outliers (expected: 0.0001999800019998 ) \n                                         0.0002389486 \n```\n:::\n\n```{.r .cell-code}\n# The most common concern for GLMMs is overdispersion, underdispersion and \n# zero-inflation.\n\n# separate test for dispersion\n\ntestDispersion(simulationOutput)\n```\n\n::: {.cell-output-display}\n![](6_Guete_und_Diagnostics_Loesung_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDHARMa nonparametric dispersion test via sd of residuals fitted vs.\n\tsimulated\n\ndata:  simulationOutput\ndispersion = 0.9797, p-value = 0.4862\nalternative hypothesis: two.sided\n```\n:::\n\n```{.r .cell-code}\n# test for Zeroinflation\n\ntestZeroInflation(simulationOutput)\n```\n\n::: {.cell-output-display}\n![](6_Guete_und_Diagnostics_Loesung_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDHARMa zero-inflation test via comparison to expected zeros with\n\tsimulation under H0 = fitted model\n\ndata:  simulationOutput\nratioObsSim = 1.0388, p-value = 0.4544\nalternative hypothesis: two.sided\n```\n:::\n\n```{.r .cell-code}\n# test for spatial Autocorrelation\n\n# calculating x, y positions per group\ngroupLocations = aggregate(DF_mod_day[, 3:4], list(DF_mod_day$x, DF_mod_day$y), mean)\ngroupLocations$group <- paste(groupLocations$Group.1,groupLocations$Group.2)\n\n# calculating residuals per group\nres2 = recalculateResiduals(simulationOutput, group = groupLocations$group)\n\n# running the spatial test on grouped residuals\ntestSpatialAutocorrelation(res2, groupLocations$x, groupLocations$y, plot = F)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDHARMa Moran's I test for distance-based autocorrelation\n\ndata:  res2\nobserved = 0.0149475, expected = -0.0002661, sd = 0.0010081, p-value <\n2.2e-16\nalternative hypothesis: Distance-based autocorrelation\n```\n:::\n\n```{.r .cell-code}\n# Testen auf Multicollinearität (dh zu starke Korrelationen im finalen Modell, zB falls \n# auf Grund der ökologischen Plausibilität stark korrelierte Variablen im Modell)\n# use VIF values: if values less then 5 is ok (sometimes > 10), if mean of VIF values \n# not substantially greater than 1 (say 5), no need to worry.\n\ncar::vif(m_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         slope_scaled             us_scaled             os_scaled \n             1.500131              1.219237              2.455749 \n   forest_prop_scaled dist_road_only_scaled     dist_build_scaled \n             2.542469              1.129679              1.508604 \n```\n:::\n\n```{.r .cell-code}\nmean(car::vif(m_day))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1.725978\n```\n:::\n:::\n\n\n### Aufgabe 4 \n\nErmittlung des individuellen Beitrags der einzelen Variablen im Gesamtmodell\n\n- **Bestimmen delta AIC nach Coppes et al. 2017 -> Vergleich des Gesamtmodells gegenüber einem Modell ohne die entsprechende Variable.**\n- **Auftrag auf den 22.11.2021: Jede Gruppe kurze Vorstellung der Modellresultate & Diagnostics im Plenum und Diskussion der Ergebnisse (keine PP-Präsentation nötig)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm_os <- glmer(pres_abs ~\n  dist_build_scaled +\n  dist_road_only_scaled +\n  forest_prop_scaled +\n  slope_scaled +\n  us_scaled +\n  (1|id), data= DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_us <- glmer(pres_abs ~\n  dist_build_scaled +\n  dist_road_only_scaled +\n  forest_prop_scaled +\n  slope_scaled +\n  os_scaled +\n  (1|id), data= DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_road <- glmer(pres_abs ~\n  dist_build_scaled +\n  forest_prop_scaled +\n  slope_scaled +\n  us_scaled +\n  os_scaled +\n  (1|id), data= DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_forest <- glmer(pres_abs ~\n  dist_build_scaled +\n  dist_road_only_scaled +\n  slope_scaled +\n  us_scaled +\n  os_scaled +\n  (1|id), data= DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_build <- glmer(pres_abs ~\n  dist_build_scaled +\n  dist_road_only_scaled +\n  forest_prop_scaled +\n  slope_scaled +\n  us_scaled +\n  os_scaled +\n  (1|id), data= DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nm_slope <- glmer(pres_abs ~\n  dist_build_scaled +\n  dist_road_only_scaled +\n  forest_prop_scaled +\n  us_scaled +\n  os_scaled +\n  (1|id), data= DF_mod_day, family = binomial, na.action = \"na.fail\")\n\nbbmle::AICtab(m_day, m_os, m_us, m_road, m_forest, m_build, m_slope)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         dAIC  df\nm_os       0.0 7 \nm_day      0.9 8 \nm_build    0.9 8 \nm_slope    7.3 7 \nm_us      92.2 7 \nm_road    94.3 7 \nm_forest 141.9 7 \n```\n:::\n:::\n",
    "supporting": [
      "6_Guete_und_Diagnostics_Loesung_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}