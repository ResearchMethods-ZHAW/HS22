{
  "hash": "86b88acf4e1d2b3e00f0f0fcebb6f1ca",
  "result": {
    "markdown": "# 6. Lösung\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# Statistik: Unterschied WE und WO waehrend Lockdown 1\nt.test(depo_d$Total [depo_d$Phase == \"Lockdown_1\" & depo_d$Wochenende==\"Werktag\"], \n       depo_d$Total [depo_d$Phase == \"Lockdown_1\" & depo_d$Wochenende==\"Wochenende\"])\n```\n:::\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# 3.3 Tagesgang ####\n# Bei diesen Berechnungen wird jeweils der Mittelwert pro Stunde berechnet. \n# wiederum nutzen wir dafuer \"pipes\"\nMean_h <- depo %>% \n  group_by(Wochentag, Stunde, Phase) %>% \n  summarise(Total = mean(Total)) \n\n# transformiere fuer Plotting\nMean_h<- reshape2::melt(Mean_h,measure.vars = c(\"Total\"),\n                             value.name = \"Durchschnitt\",variable.name = \"Gruppe\")\n\n# Plotte den Tagesgang, unterteilt nach Wochentagen\n\n# Normal\ntag_norm <- ggplot(subset(Mean_h, Phase %in% c(\"Normal\")), \n                     mapping=aes(x = Stunde, y = Durchschnitt, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5),  \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)+\n  theme(legend.position = \"right\")\n\n# Lockdown 1\n\ntag_lock_1 <- ggplot(subset(Mean_h, Phase %in% c(\"Lockdown_1\")), \n                     mapping=aes(x = Stunde, y = Durchschnitt, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)+\n  theme(legend.position = \"right\")\n\n# Lockdown 2\ntag_lock_2 <- ggplot(subset(Mean_h, Phase %in% c(\"Lockdown_2\")), \n                     mapping=aes(x = Stunde, y = Durchschnitt, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)+\n  theme(legend.position = \"right\")\n\n# Covid\ntag_covid <- ggplot(subset(Mean_h, Phase %in% c(\"Covid\")), \n                     mapping=aes(x = Stunde, y = Durchschnitt, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)+\n  theme(legend.position = \"right\")\n\n# Arrange und Export Tagesgang\nggarrange(tag_lock_1+            # plot 1 aufrufen\n            rremove(\"x.text\")+   # plot 1 braucht es nicht alle Achsenbeschriftungen\n            rremove(\"x.title\"),            \n          tag_lock_2+            # plot 2 aufrufen\n            rremove(\"y.text\")+   # bei plot 2 brauchen wir keine Achsenbeschriftung\n            rremove(\"y.title\")+\n            rremove(\"x.text\")+\n            rremove(\"x.title\"),\n          tag_norm,\n          tag_covid+\n            rremove(\"y.text\")+   \n            rremove(\"y.title\"),\n          ncol = 2, nrow = 2,    # definieren, wie die plots angeordnet werden\n          heights = c(0.9, 1),  # beide plots sind wegen der fehlenden Beschriftung nicht gleich hoch\n          widths = c(1,0.9),    \n          labels = c(\"a) Lockdown 1\", \"b) Lockdown 2\", \"c) Normal\", \"d) Covid\"),\n          label.x = 0.1,        # wo stehen die Plottitel\n          label.y = 0.99,\n          common.legend = TRUE, legend = \"bottom\") # wir brauchen nur eine Legende, unten\n```\n\n::: {.cell-output-display}\n![](6_Desktiptive_Analysen_Loesung_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-align='left' fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# 3.4 Kennzahlen ####\ntotal_phase <- depo_d %>% \n  # gruppiere nach Phasen inkl. Normal. Diese Levels haben wir bereits definiert\n  group_by(Phase) %>% \n  summarise(Total = sum(Total),\n            IN = sum(Fuss_IN),\n            OUT = sum(Fuss_OUT))\n\n# mean besser Vergleichbar, da Zeitreihen unterschiedlich lange\nmean_phase_d <- depo_d %>% \n  group_by(Phase) %>% \n  summarise(Total = mean(Total),\n            IN = mean(Fuss_IN),\n            OUT = mean(Fuss_OUT))\n# berechne prozentuale Richtungsverteilung\nmean_phase_d <- mean_phase_d %>% \n  mutate(Proz_IN = round(100/Total*IN, 1)) %>% # berechnen und auf eine Nachkommastelle runden\n  mutate(Proz_OUT = round(100/Total*OUT,1))\n\n# selektiere absolute Zahlen\n# behalte rel. Spalten (nur die relativen Prozentangaben)\nmean_phase_d_abs <- mean_phase_d[,-c(2,5,6), drop=FALSE]\n# transformiere fuer Plotting\nmean_phase_d_abs <- reshape2::melt(mean_phase_d_abs, \n                                     measure.vars = c(\"IN\",\"OUT\"),\n                                     value.name = \"Durchschnitt\",variable.name = \"Gruppe\")\n\n# selektiere relative Zahlen\n# behalte rel. Spalten (nur die relativen Prozentangaben)\nmean_phase_d_proz <- mean_phase_d[,-c(2:4), drop=FALSE]\n# transformiere fuer Plotting\nmean_phase_d_proz <- reshape2::melt(mean_phase_d_proz, \n                                 measure.vars = c(\"Proz_IN\",\"Proz_OUT\"),\n                                 value.name = \"Durchschnitt\",variable.name = \"Gruppe\")\n\n# Visualisierung abs\nabs <- ggplot(data = mean_phase_d_abs, mapping = aes(x = Gruppe, y = Durchschnitt, fill = Phase))+\n  geom_col(position = \"dodge\", width = 0.8)+\n  scale_fill_manual(values = c(\"royalblue\", \"red4\", \"orangered\", \"gold2\"), name = \"Phase\")+\n  scale_x_discrete(labels = c(\"IN\", \"OUT\"))+\n  labs(y = \"Durchschnitt [mean]\", x= \"Bewegungsrichtung\")+\n  theme_classic(base_size = 15)+\n  theme(legend.position = \"bottom\")\n\n# Visualisierung %\nproz <- ggplot(data = mean_phase_d_proz, mapping = aes(x = Gruppe, y = Durchschnitt, fill = Phase))+\n  geom_col(position = \"dodge\", width = 0.8)+\n  scale_fill_manual(values = c(\"royalblue\", \"red4\", \"orangered\", \"gold2\"), name = \"Phase\")+\n  scale_x_discrete(labels = c(\"IN\", \"OUT\"))+\n  labs(y = \"Durchschnitt [%]\", x= \"Bewegungsrichtung\")+\n  theme_classic(base_size = 15)+\n  theme(legend.position = \"bottom\")\n\n# Arrange und Export Verteilung\nggarrange(abs,            # plot 1 aufrufen\n          proz,            # plot 2 aufrufen\n          ncol = 2, nrow = 1,    # definieren, wie die plots angeordnet werden\n          heights = c(1),        # beide sind bleich hoch\n          widths = c(1,0.95),    # plot 2 ist aufgrund der fehlenden y-achsenbesch. etwas schmaler\n          labels = c(\"a) Absolute Verteilung\", \"b) Relative Verteilung\"),\n          label.x = 0,        # wo stehen die labels\n          label.y = 1.0,\n          common.legend = TRUE, legend = \"bottom\") # wir brauchen nur eine Legende, unten\n```\n\n::: {.cell-output-display}\n![](6_Desktiptive_Analysen_Loesung_files/figure-pdf/unnamed-chunk-4-2.pdf){fig-align='left' fig-pos='H'}\n:::\n:::\n\n\n\n# Aufgabe 1: Verlauf der Besuchszahlen / m\n\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n#.################################################################################################\n# 3. DESKRIPTIVE ANALYSE UND VISUALISIERUNG #####\n#.################################################################################################\n\n# 3.1 Verlauf der Besuchszahlen / m ####\n# Monatliche Summen am Standort\n\n# wann beginnt die Datenreihe schon wieder?\nfirst(depo_m$Ym)\n# und wann ist die fertig?\nlast(depo_m$Ym)\n\n# Plotte\nggplot(depo_m, mapping = aes(Ym, Total, group = 1))+ # group = 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\n  #zeichne Lockdown 1\n  geom_rect(mapping = aes(xmin=\"2020 3\", xmax=\"2020 5\",\n                          ymin =0, ymax=max(Total+(Total/100*10))),\n            fill = \"lightskyblue\", alpha = 0.4, colour = NA)+\n  #zeichne Lockdown 2\n  geom_rect(mapping = aes(xmin=\"2020 12\", xmax=\"2021 3\", \n                          ymin =0, ymax=max(Total+(Total/100*10))), \n            fill = \"lightskyblue\", alpha = 0.4, colour = NA)+\n  geom_line(alpha = 0.6, size = 1.5)+\n  scale_x_discrete(breaks = c(\"2019 1\", \"2019 7\",\"2019 1\",\"2020 1\",\"2020 7\",\"2021 1\",\"2021 7\"),\n                   labels = c(\"2019 1\", \"2019 7\",\"2019 1\",\"2020 1\",\"2020 7\",\"2021 1\",\"2021 7\"))+\n  labs(title= \"\", y=\"Fussgaenger:innen pro Monat\", x = \"Jahr\")+\n  theme_linedraw(base_size = 15)+\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))\n```\n\n::: {.cell-output-display}\n![](6_Desktiptive_Analysen_Loesung_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-align='left' fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# Beachtet, dass ich in der Musterloesung keine Resultate exportiere, untenstehend aber der Code dazu:\n\n# ggsave(\"Entwicklung_Zaehlstelle.png\", width=20, height=10, units=\"cm\", dpi=1000, \n#        path = \"_fallstudien/_R_analysis/results/\") \n```\n:::\n\n\n\n\n# Aufgabe 2: Wochengang\n\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# mean / d / phase\nmean_phase_wd <- depo_d %>% \n  group_by(Wochentag, Phase) %>% \n  summarise(Total = mean(Total))\n\n# write.csv(mean_phase_wd, \"_fallstudien/_R_analysis/results/mean_phase_wd.csv\")\n\n#plot\nggplot(data = depo_d)+\n  geom_boxplot(mapping = aes(x= Wochentag, y = Total, fill = Phase))+\n  labs(title=\"\", y= \"Fussgaenger:innen pro Tag\")+\n  scale_fill_manual(values = c(\"royalblue\", \"red4\", \"orangered\", \"gold2\"))+\n  theme_classic(base_size = 15)+\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),\n        legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](6_Desktiptive_Analysen_Loesung_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-align='left' fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# ggsave(\"Wochengang_Lockdown.png\", width=15, height=15, units=\"cm\", dpi=1000, \n#        path = \"_fallstudien/_R_analysis/results/\")\n```\n:::\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# Statistik: Unterschied WE und WO waehrend Lockdown 1\nt.test(depo_d$Total [depo_d$Phase == \"Lockdown_1\" & depo_d$Wochenende==\"Werktag\"], \n       depo_d$Total [depo_d$Phase == \"Lockdown_1\" & depo_d$Wochenende==\"Wochenende\"])\n```\n:::\n\n\n\n# Aufgabe 3: Tagesgang\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# 3.3 Tagesgang ####\n# Bei diesen Berechnungen wird jeweils der Mittelwert pro Stunde berechnet. \n# wiederum nutzen wir dafuer \"pipes\"\nMean_h <- depo %>% \n  group_by(Wochentag, Stunde, Phase) %>% \n  summarise(Total = mean(Total)) \n\n# Plotte den Tagesgang, unterteilt nach Wochentagen\n\n# Normal\ntag_norm <- ggplot(subset(Mean_h, Phase %in% c(\"Normal\")), \n                   mapping=aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5),  \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)+\n  theme(legend.position = \"right\")\n\n# Lockdown 1\ntag_lock_1 <- ggplot(subset(Mean_h, Phase %in% c(\"Lockdown_1\")), \n                     mapping=aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)+\n  theme(legend.position = \"right\")\n\n# Lockdown 2\ntag_lock_2 <- ggplot(subset(Mean_h, Phase %in% c(\"Lockdown_2\")), \n                     mapping=aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)+\n  theme(legend.position = \"right\")\n\n# Covid\ntag_covid <- ggplot(subset(Mean_h, Phase %in% c(\"Covid\")), \n                    mapping=aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  scale_colour_viridis_d()+\n  scale_linetype_manual(values = c(rep(\"solid\", 5), \"twodash\", \"twodash\"))+\n  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+\n  labs(x=\"Uhrzeit [h]\", y= \"∅ Fussganger_Innen / h\", title = \"\")+\n  lims(y = c(0,25))+\n  theme_linedraw(base_size = 15)+\n  theme(legend.position = \"right\")\n\n# Arrange und Export Tagesgang\nggarrange(tag_lock_1+            # plot 1 aufrufen\n            rremove(\"x.text\")+   # plot 1 braucht es nicht alle Achsenbeschriftungen\n            rremove(\"x.title\"),            \n          tag_lock_2+            # plot 2 aufrufen\n            rremove(\"y.text\")+   # bei plot 2 brauchen wir keine Achsenbeschriftung\n            rremove(\"y.title\")+\n            rremove(\"x.text\")+\n            rremove(\"x.title\"),\n          tag_norm,\n          tag_covid+\n            rremove(\"y.text\")+   \n            rremove(\"y.title\"),\n          ncol = 2, nrow = 2,    # definieren, wie die plots angeordnet werden\n          heights = c(0.9, 1),  # beide plots sind wegen der fehlenden Beschriftung nicht gleich hoch\n          widths = c(1,0.9),    \n          labels = c(\"a) Lockdown 1\", \"b) Lockdown 2\", \"c) Normal\", \"d) Covid\"),\n          label.x = 0.1,        # wo stehen die Plottitel\n          label.y = 0.99,\n          common.legend = TRUE, legend = \"bottom\") # wir brauchen nur eine Legende, unten\n```\n\n::: {.cell-output-display}\n![](6_Desktiptive_Analysen_Loesung_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-align='left' fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# ggsave(\"Tagesgang.png\", width=25, height=25, units=\"cm\", dpi=1000,\n#        path = \"_fallstudien/_R_analysis/results/\")\n```\n:::\n\n\n\n# Aufgabe 4: Kennzahlen\n\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\n# 3.4 Kennzahlen ####\ntotal_phase <- depo_d %>% \n  # gruppiere nach Phasen inkl. Normal. Diese Levels haben wir bereits definiert\n  group_by(Phase) %>% \n  summarise(Total = sum(Total),\n            IN = sum(Fuss_IN),\n            OUT = sum(Fuss_OUT))\n\n# write.csv(total_phase, \"_fallstudien/_R_analysis/results/total_phase.csv\")\n\n# mean besser Vergleichbar, da Zeitreihen unterschiedlich lange\nmean_phase_d <- depo_d %>% \n  group_by(Phase) %>% \n  summarise(Total = mean(Total),\n            IN = mean(Fuss_IN),\n            OUT = mean(Fuss_OUT))\n# berechne prozentuale Richtungsverteilung\nmean_phase_d <- mean_phase_d %>% \n  mutate(Proz_IN = round(100/Total*IN, 1)) %>% # berechnen und auf eine Nachkommastelle runden\n  mutate(Proz_OUT = round(100/Total*OUT,1))\n\n# write.csv(mean_phase_d, \"_fallstudien/_R_analysis/results/mean_phase_d.csv\")\n\n# selektiere absolute Zahlen\n# behalte rel. Spalten (nur die relativen Prozentangaben)\nmean_phase_d_abs <- mean_phase_d %>% dplyr::select(-c(Total, Proz_IN, Proz_OUT))\n\n# transformiere fuer Plotting\nmean_phase_d_abs <- pivot_longer(mean_phase_d_abs, cols = c(\"IN\",\"OUT\"), \n             names_to = \"Gruppe\", values_to = \"Durchschnitt\")\n\n# selektiere relative Zahlen\n# behalte rel. Spalten (nur die relativen Prozentangaben)\nmean_phase_d_proz <- mean_phase_d %>% dplyr::select(-c(Total:OUT))\n\n# transformiere fuer Plotting\nmean_phase_d_proz <- pivot_longer(mean_phase_d_proz, cols = c(\"Proz_IN\",\"Proz_OUT\"), \n                                  names_to = \"Gruppe\", values_to = \"Durchschnitt\")\n\n# Visualisierung abs\nabs <- ggplot(data = mean_phase_d_abs, mapping = aes(x = Gruppe, y = Durchschnitt, fill = Phase))+\n  geom_col(position = \"dodge\", width = 0.8)+\n  scale_fill_manual(values = c(\"royalblue\", \"red4\", \"orangered\", \"gold2\"), name = \"Phase\")+\n  scale_x_discrete(labels = c(\"IN\", \"OUT\"))+\n  labs(y = \"Durchschnitt [mean]\", x= \"Bewegungsrichtung\")+\n  theme_classic(base_size = 15)+\n  theme(legend.position = \"bottom\")\n\n# Visualisierung %\nproz <- ggplot(data = mean_phase_d_proz, mapping = aes(x = Gruppe, y = Durchschnitt, fill = Phase))+\n  geom_col(position = \"dodge\", width = 0.8)+\n  scale_fill_manual(values = c(\"royalblue\", \"red4\", \"orangered\", \"gold2\"), name = \"Phase\")+\n  scale_x_discrete(labels = c(\"IN\", \"OUT\"))+\n  labs(y = \"Durchschnitt [%]\", x= \"Bewegungsrichtung\")+\n  theme_classic(base_size = 15)+\n  theme(legend.position = \"bottom\")\n\n# Arrange und Export Verteilung\nggarrange(abs,            # plot 1 aufrufen\n          proz,            # plot 2 aufrufen\n          ncol = 2, nrow = 1,    # definieren, wie die plots angeordnet werden\n          heights = c(1),        # beide sind bleich hoch\n          widths = c(1,0.95),    # plot 2 ist aufgrund der fehlenden y-achsenbesch. etwas schmaler\n          labels = c(\"a) Absolute Verteilung\", \"b) Relative Verteilung\"),\n          label.x = 0,        # wo stehen die labels\n          label.y = 1.0,\n          common.legend = TRUE, legend = \"bottom\") # wir brauchen nur eine Legende, unten\n```\n\n::: {.cell-output-display}\n![](6_Desktiptive_Analysen_Loesung_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-align='left' fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# ggsave(\"Verteilung.png\", width=20, height=15, units=\"cm\", dpi=1000,\n#        path = \"_fallstudien/_R_analysis/results/\")\n```\n:::\n",
    "supporting": [
      "6_Desktiptive_Analysen_Loesung_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}