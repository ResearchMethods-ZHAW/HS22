{
  "hash": "29101d635099d82dea6971a9806074df",
  "result": {
    "markdown": "# 2: Felderhebung Übung\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# Einführung und Installation\n\nEs gibt eine Vielzahl an möglichen Methoden zur Erfassung der Besucherzahlen. Automatische Zählgeräte bieten die Möglichkeit lange und durchgehende Zeitreihen zu erfassen. Diese müssen aber natürlich auch ausgewertet werden. Hier erhaltet ihr erste Inputs dazu.\n\n![](fallstudie_s/images/gruental.jpg)\n\n## Ziele\n\n- Die Studierenden können das eingesetzte Gerät installieren und kennen die Vor- und Nachteile verschiedener Methoden.\n- Sie können die Daten auslesen und explorativ analysieren.\n\n## Grundlagen\n\nDie Geräte werden innerhalb der auf Abbildung 1 gekennzeichneten Standorte platziert. Damit soll überprüft werden, wie stark frequentiert die Waldränder der ökologisch aufgewerteten Seeparzelle sind.\n\n![](fallstudie_s/images/Perimeter_Felderhebung.png)\n\nDatenschutz ist ein wichtiges Thema. Die Besuchenden werden über den Zweck der Kameras informiert, die Daten nach der Bearbeitung wieder gelöscht und nicht weitergegeben.\n\n![](fallstudie_s/images/Begleitzettel_Kamera.png)\n\nNun geht es ins Feld uns die Geräte werden installiert.\n\n# Auswertung\n\n__AUFGABE ab dem 12.10.2021__\n\n_Nachdem die Kameras für zwei Wochen im Einsatz standen, werden die Daten ausgelesen, die Sichtungen in Excel festgehalten und die explorativen Analysen durchgeführt._\n\nBereits beim Detektieren der Sichtungen muss einem klar sein, was man auswerten möchte. Nur so können die relevanten Variablen erfasst werden.\n\n- Im Rahmen dieser Felderhebung erhaltet ihr von Adrian eine Excel-Vorlage zur Verifizeriung der automatisch detektierten Sichtungen.\n\n- Verifiziert __kurz__, was euch der Algorithmus geliefert hat.\n\n- Als nächstes geht es ins R. Da wir für unsere Auswertungen zu wenige Sichtungen haben, verwendet bitte den Datensatz __DummyData__ (ReMe HS21 MSc ENR_/Fallstudie Biodiversity & Ecosystems/S_Daten/Felderhebungen). Eure Verifizierung braucht ihr nicht mehr.\n\n\n## Datenanalyse in R\n\n\n\n\n\n### Vorbereitungen\n\nFuer diese Aufgabe benoetigen wir folgende Bibliotheken:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Benoetigte Bibliotheken ####\nlibrary(tidyverse) # Data wrangling und piping\nlibrary(lubridate) # Arbeiten mit Datumsformaten\nlibrary(data.table)# schnelles Dateneinlesen\n```\n:::\n\n\nLese nun zuerst den bereitsgestellen, respektiven den selbst erstellten Datensatz (csv) mithilfe von __fread()__ oder __read.csv()__ ein und nennt ihn __cam__.\n\nPruefe die Daten. Wurden sie richtig eingelesen? Wie sieht die Struktur der Daten aus?\n\nTipp: Brauch zum pruefen den Befehl __str()__ sowie __head()__.\n\n### Aufgabe 1: Datentypen\nViele Befehle zum Einlesen erkennen die Datentypen automatisch.\nBei Faktoren funktioniert das aber nicht (sie sind ja eigentlich einfach Text und R weiss nicht, was wir damit wollen).\n\nAuch das Datum muss vielfach manuell definiert werden (hier muessen wir R sagen, wie das Format dieses aussieht).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncam <- cam %>% \n  mutate(Datum = as.Date(Datum, format = \"%d.%m.%Y\"))%>%\n  mutate(Kamerastandort = factor(Kamerastandort))%>%\n  ...\n```\n:::\n\n\nDefiniert nun die restlichen (relevanten) Variablen als Faktor.\n\n### Aufgabe 2: Datensatz trennen\nUnser Datensatz enthaellt die Angeben zu __ost__ und __west__. Wir wollen die Auswertungen aber pro Standort machen.\n\nTrennt den Datensatz aufgrund des Standorts. Nutzt dazu __filter()__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nost <- filter(DATENSATZ, SPALTENNAME == \"Attribut\")\nwest <- ...\n```\n:::\n\n\n\n### Aufgabe 3: Verteilung pruefen\nBei explorativen Analysen macht es immer Sinn sich die Verteilung der Daten anzuschauen.\nPruefe daher die Verteilung pro Datensatz mittels __Histogram__ und __Scatterplot__.\n\nBeim Histogram sollen nur die Menschen angezeigt und die 0er ausgeschlossen werden. \nDas kann mit folgendem Code erreicht werden:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(west$Anzahl[west$Art==\"Mensch\" &\n                  !west$Anzahl==0], # das \"!\" bedeutet \"nicht gleich\"\n     breaks = 10)                   # wie viele Balken brauchen wir im Histogram?\n```\n:::\n\n\nBeim Scatterplot soll auf der x-Achse das Datum stehen, auf der y-Achse die Anzahl der Personen.\nAuch hier wollen wir keine Wildtiere im Plot.\n\n### Aufgabe 3: Daten ausschliessen\nFuer die weiteren Analysen schliessen wir die Wildtiere komplett aus.\n\n- Nutzt dazu wiederum den Befehl __filter()__ und ueberschreibt die Datensaetze __ost__ und __west__.\n\nDennoch wolle wir auch wissen, welche Tiere auf dem Areal (ost und west zusammen, also df __cam__) unterwegs sind.\n\n- Dafuer gibts einen separaten Datensatz namens __Tiere__. Nutzt dazu den Befehl __filter()__.\n\n### Aufgabe 4: Explorative Analysen\nBerechnet zuerst die totale Anzahl Menschen / Standort mit __sum(DATENSATZ$SPALTENNAME)__.\n\nGruppieren und summieren:\n\n- Berechnet nun die Anzahl Menschen pro Aktivität und Standort (= Akt_ost und Akt_west).\n\n- Berechnet auch die Anzahl Begleittier pro Kategorie und Standort (= Begleittier_ost und Begleittier_west).\n\nUntenstehender Code eigent sich dazu ganz gut:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nAkt_ost <- ost %>%\n  group_by(Aktivitaet)%>%      # Hier sagen wir nach was wir gruppieren \n  summarise (n = sum(Anzahl)) %>%      # und dann sagen wir, dass R zusammenfassen soll und zwar die Anzahl\n  mutate(freq = n / sum(n))%>% # und dann soll und R das prozentuale Verhaeltniss berechnen\n  arrange(desc(n))             # und dann das ganze absteigend sortieren\n```\n:::\n\n\nNun soll noch berechnet werden, wie viele unterschiedliche Wildtiere auf dem ganzen Areal gezaehlt wurden.\n\nRecycelt dazu obenstenenden Code.\n\n### Aufgabe 5: Visualisieren\n\n__Verteilung der Aktivitäten als Pie Chart__\n\nZuerst eine Palette mit 5 Farben definieren:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npal <- hcl.colors(5, palette = \"heat\")\n```\n:::\n\n\nDann als Kreisdiagramm plotten.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npie(Akt_west$n, labels = c(\"Anderes\", \"Biker\", \"Landwirtschaft\", \"Spaziergaenger\", \"unbestimmbar\"),\n    main = \"Prozentuales Verhaeltnis West\",\n    col = pal) \n```\n\n::: {.cell-output-display}\n![](2_Felderhebung_Uebung_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n__Hinweis:__ Die labels im base R plot müssen manuell definiert werden. ggplot als Alternative macht das selbst.\n\n- __FRAGE:__ eignen sich Pie Charts überhaupt für solche Darstellungen? Wie könnten die Aktivitäten auch noch dargestellt werden? Welches sind eure eigenen Ideen zur Visualisierung?\n\n__Begleittier als Bar Chart__\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Begleittier als Bar Chart ####\nggplot(Begleit_ost,                      # hier den Datensatz spezifizieren\n       mapping=aes(x=Begleittier, y = n))+ # Absolute Anzahl darstellen\n  geom_col(width=0.9,position = \"dodge\")+# hier sage ich, dass ich ein Balkendiagramm will\n  labs(x=\"Begleittier\", y= \"Anzahl\")+    # Achsenbeschriftung setzen\n  theme_classic(base_size = 15)+         # Und zu guter letzt: Stil definieren\n  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) # sowie Achsenbeschr.ausrichten\n```\n\n::: {.cell-output-display}\n![](2_Felderhebung_Uebung_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nUnd schliesslich: __Wildtier als Bar Chart__\nStellt hier auf der y-Achse die Anzahl nicht total sondern relativ (in Prozent) dar.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](2_Felderhebung_Uebung_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nBei Bedraf koennen die selben Plots fuer den zweiten Standort gemacht werden.\n\n",
    "supporting": [
      "2_Felderhebung_Uebung_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}