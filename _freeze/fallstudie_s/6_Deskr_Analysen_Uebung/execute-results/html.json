{
  "hash": "5cc2a11d3abc351d643cf00742e0a164",
  "result": {
    "markdown": "# KW 43+44: Übung Deskriptiv\n\n\n\n\n\n\n## Aufgabe 1: Verlauf der Besuchszahlen / m\n\n##1a)\n\nNachdem wir die Projektstruktur aufgebaut haben und die Daten vorbereitet (inkl. aggregiert) sind, machen wir uns an die deskriptive Analyse. Dies macht eigentlich immer Sinn. Bevor mach sich an die schliessende Statistik macht, muss man ein \"Gefühl\" für die Daten bekommen. Dies funktioniert am einfachsten mit explorativen Analysen.\n\nWir interessieren uns in den Analysen für 5 Zeitabschnitte:\n\n  - von Anfang Untersuchungsperiode bis 1 Jahr vor Lockdown 1 (pre)\n  - 1 Jahr vor Corona (normal)\n  - Lockdown 1\n  - Lockdown 2\n  - Ende 2. Lockdown bis Ende Untersuchungsperiode\n\n- Plottet den Verlauf der monatlichen Besuchszahlen an eurer Zählstelle. Auf der x-Achse steht dabei dabei Jahr und Monat (gespeichert im df _depo_m_), auf der y-Achse die monatlichen Besuchszahlen. Zeichnet auch die beiden Lockdown ein (Hinweis: rundet das Start- und Enddatum der Lockdowns auf den Monat, da im Plot die monatlichen Zahlen gezeigt werden).\n\nHaltet euch dabei an untenstehenden Plot:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](6_Deskr_Analysen_Uebung_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n__Hinweis:__ \n- Nutzt zum plotten __ggplot()__\n- folgende Codeschnipsel helfen euch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = depo_m, mapping = aes(Ym, Total, group = 1))+ # group 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird\n  # zeichne Lockdown 1; ein einfaches Rechteck. bestimme mit min und max die Dimensionen\n  geom_rect(mapping = aes(xmin=\"2020 3\", xmax=\"2020 5\",\n                          ymin =0, ymax=max(Total+(Total/100*10))), # das Rechteck soll 10 % grösser als die maximale Besuchszahl sein \n            fill = \"lightskyblue\", alpha = 0.4, colour = NA)+\n  # zeichne Lockdown 2\n    ...+\n  # zeichne die Linie\n  geom_line(...)+\n  theme_linedraw(base_size = 15)+\n  ...\n```\n:::\n\n\n- Exportiert euren Plot mit __ggsave()__ nach __results__. Breite = 20, Höhe = 10, Einheiten = cm, dpi = 1000\n\n##1b)\n\nNachdem wir wissen, wie sich die Besuchszahlen allgemein entwickelt haben, untersuchen wir wie sich diese während den unterschiedlichen Tageszeiten entwickelten.\n\n- Wie benötigen dazu wieder denselben Datensatz, dieselben x- und y-Achsen. Allerdings ergänzen wir den area-plot mit dem \"fill\"-Argument:\n\n- Speichert auch diesen Plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) + \n  geom_area(position = \"fill\")+\n  ...\n```\n:::\n\n\n## Aufgabe 2: Wochengang\n\nNachdem wir nun wissen, wie sich die Besuchszahlen während der Untersuchungsdauer monatlich entwickelt haben, möchten wir genauer untersuchen, wie sich die Zahlen je nach Phase (Pre, Normal, Lockdown 1, Lockdown 2 und Covid) auf die Wochentage verteilen. \n\n### 2a)\n\n- Berechnet zuerst die Totale Anzahl pro Wochentag pro Phase.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_phase_wd <- depo_d %>% \n  group_by(...) %>% \n  ...\n```\n:::\n\n\n- Speichert das als .csv\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(mean_phase_wd, \"results/mean_phase_wd.csv\")\n```\n:::\n\n\n### 2b)\n\n- Erstellt einen Boxplot nach untenstehender Vorgabe:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](6_Deskr_Analysen_Uebung_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n__Hinweis:__ \n- Nutzt zum plotten __ggplot()__\n- folgende Codeschnipsel helfen euch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = depo_d)+\n  geom_boxplot(mapping = aes(x= Wochentag, y = Total, fill = Phase))+\n  ...\n```\n:::\n\n\n- Exportiert auch diesen Plot mit __ggsave()__. Welche Breite und Höhe passt hier?\n\n### 2c)\n\nSind die Unterschiede zwischen Werktag und Wochenende wirklich signifikant? Falls ja, in allen Phasen oder nur während bestimmter?\n\n- Prüft das pro Phase mit einem einfachen t.test.\n\n## Aufgabe 3: Tagesgang\n\nVom Grossen zum Kleinen, von der Übersicht ins Detail. Jetzt widmen wir uns dem Tagesgang, das heisst der Verteilung der Besuchenden auf die 24 Tagesstunden je nach Phase.\n\n### 3a)\n\n- Berechnet zuerst den Mittelwert der Totalen Besuchszahlen pro Wochentag pro Stunde pro Phase. (ganz ähnlich wie unter 2a) und speichert das df unter __Mean_h__.\n\nggplots haben Daten lieber im Format long als wide. \n\n### 3b)\n\n- Plottet den Tagesgang, unterteilt nach den 7 Wochentagen nun für unsere 5 Phasen.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, : Objekt 'Mean_h' nicht gefunden\n```\n:::\n:::\n\n\n__Hinweis:__ \n- Nutzt zum plotten __ggplot()__\n- folgende Codeschnipsel helfen euch:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+\n  geom_line(size = 2)+\n  facet_grid(...)\n  ...\n```\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Aufgabe 4: Kennzahlen\n\nSchliesslich berechnen wir noch einige Kennzahlen (Anzahl Passagen, Richtungsverteilung, ...).\n\n### 4a)\n\n- Gruppiert nach Phase und berechnet dieses mal die Summe (nicht den Durchschnitt) Total, IN und OUT (ähnlich wie in 2a und 3a).\n- Speichert das Ergebnis als .csv\n\n### 4b) \n\nDie Zeitreihen der 4 Phasen unterscheiden sich deutlich voneinander. Totale Summen sind da kaum miteinander vergleichbar, besser eignet sich der Durchschnitt oder der Median.\n\n- Gruppiert nach Phase und berechnet den Durchschnitt Total, IN und OUT und speichert das df unter __mean_phase_d__.\n- Ergänzt das mit der prozentualen Richtungsverteilung\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_phase_d <- mean_phase_d %>% \n  mutate(Proz_IN = round(100/Total*IN, 1)) %>% # berechnen und auf eine Nachkommastelle runden\n  ...\n```\n:::\n\n\n- Speichert das Ergebnis als .csv\n- Selektiert nun die absoluten Zahlen im df __mean_phase_d__ sowie die relativen und speichert das jeweils in einem df __mean_phase_d_abs__ und __mean_phase_d_proz__.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_phase_d_abs <- mean_phase_d %>% dplyr::select(-c(Total, Proz_IN, Proz_OUT))\n```\n:::\n\n\n- transformiert beide df mittels __pivot_longer()__ von wide zu long:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_phase_d_abs <- pivot_longer(mean_phase_d_abs, cols = c(\"IN\",\"OUT\"), \n             names_to = \"Gruppe\", values_to = \"Durchschnitt\")\n```\n:::\n\n\n### 4c)\n\nNun visualisieren wie die Verteilung der absoluten und der relativen Zahlen nach Phasen in einem Barplot.\n\n- Erstellt je einen Plot zu den absoluten und den relativen Zahlen nach den unterstehenden Vorgaben und speichert beide Plots im Environment:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(data = mean_phase_d_abs, mapping = aes(x = Gruppe, y = Durchschnitt, : Objekt 'mean_phase_d_abs' nicht gefunden\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nError in ggplot(data = mean_phase_d_proz, mapping = aes(x = Gruppe, y = Durchschnitt, : Objekt 'mean_phase_d_proz' nicht gefunden\n```\n:::\n:::\n\n\n- Arrangiert beide Plots nebeneinander und exportiert das Ergebnis (Arrangieren siehe 3c). \n",
    "supporting": [
      "6_Deskr_Analysen_Uebung_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\r\n<script src=\"../site_libs/plotly-binding-4.10.0/plotly.js\"></script>\r\n<script src=\"../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"../site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\r\n<link href=\"../site_libs/plotly-htmlwidgets-css-2.5.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../site_libs/plotly-main-2.5.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}