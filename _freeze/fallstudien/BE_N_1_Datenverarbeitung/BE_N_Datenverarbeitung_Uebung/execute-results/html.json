{
  "hash": "df1116ec0ba8007a07fa10447188a16e",
  "result": {
    "markdown": "---\ntitle: \"KW42 - Daten(vor)verarbeitung - Übung\"\nauthor:\n  - name: Beni Sigrist\ndescription: \" \"\ncategories: Biodiversity_Ecosystems_N\ndraft: false\n---\n\n\n\n\n## Projektaufbau RStudio-Projekte\n\n### Vor den eigentlichen Auswertungen muessen einige vorbereitende Arbeiten unternommen werden. Die Zeit, die man hier investiert, wird in der spaeteren Projektphase um ein vielfaches eingespart. Im Skript soll die Ordnerstruktur des Projekts genannt werden, damit der Arbeitsvorgang auf verschiedenen Rechnern reproduzierbar ist.\n\n### Arbeitet mit Projekten, da diese sehr einfach ausgetauscht und somit auch reproduziert werden koennen; es gibt keine absoluten Arbeitspfade sondern nur relative. Der Datenimport (und auch der Export) kann mithilfe dieser relativen Pfaden stark vereinfacht werden. Projekte helfen alles am richtigen Ort zu behalten. (mehr zur Arbeit mit Projekten: https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects)\n\n## Aufbau von R-Skripten\n\n### Im Kopf des Skripts zuerst immer den Titel des Projekts sowie die Autor:innen des Skripts nennen. Hier soll auch die Herkunft der Daten ersichtlich sein und falls externe Daten verwendet werden, sollte geklaert werden, wer die Datenherrschaft hat (Rehdaten: Forschungsgruppe WILMA).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#.##################################################################################\n# Daten(vor)verarbeitung Fallstudie WPZ  ####\n# Modul Research Methods, HS21. Autor/in ####\n#.##################################################################################\n\n# Beschreibt zudem folgendes:\n# • Ordnerstruktur (ich verwende hier den Projektordner mit den Unterordnern Skripts, \n# Feldaufnahmen, Data, Results, Plots)\n# • Verwendete Daten\n\n# Ein Skript soll in R eigentlich immer nach dem selbem Schema aufgebaut sein. \n# Dieses Schema beinhaltet (nach dem bereits erwaehnten Kopf des Skripts) 4 Kapitel: \n```\n:::\n\n\n### *1. Datenimport* \n### *2. Datenvorverarbeitung*\n### *3. Analyse*\n### *4. Visualisierung*\n\n### Bereitet euer Skript also nach dieser Struktur vor. Nutzt fuer den Text, welcher nicht Code ist, vor dem Text das Symbol #. Wenn ihr den Text als Titel definieren wollt, der die grobe Struktur des Skripts absteckt, baut in wie in folgendem Beispiel auf:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#.###################################################################################\n# METADATA ####\n#.###################################################################################\n# Datenherkunft ####\n# ...\n\n#.###################################################################################\n# 1. DATENIMPORT ####\n#.###################################################################################\n```\n:::\n\n\n### libraries laden: hier tidyverse\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n### Herunterladen der Daten der Feldaufnahmen von Moodle (Aufgabe3_Feldaufnahmen_alle_Gruppen.zip), Einlesen, Sichtung der Datensaetze und der Datentypen\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Die Datensätze aller Teams müssen erst noch in CSVs umgewandelt werden, bevor\n# sie eingelesen werden können\n\ndf_team1 <- read_delim(\"data/Felderhebung Waldstruktur_TEAM_1_türkis.csv\", delim = \";\")\n\ndf_team2 <- read_delim(\"data/Felderhebung_Team_2.csv\", delim = \";\")\n# Achtung! Beim Datensatz des Teams 2 ist eine zusaetzliche Zeile eingefuegt,\n# die das Einlesen erschwert.  Ausserdem gibt es bei den Zeilen DG Rubus, DG\n# Strauchschicht und DG Baumschicht ein Problem mit dem Datentyp resp. den\n# Zahlen.\n\ndf_team3 <- read_delim(\"data/ReMe_Felderhebung_Gruppe3.csv\", delim = \";\")\n# Achtung! Hier ist beim Einlesen etwas falsch gelaufen.\n\ndf_team4 <- read_delim(\"data/Felderhebung_Waldstruktur_Team_4.csv\", delim = \";\")\n\ndf_team5 <- read_delim(\"data/Felderhebung_Waldstruktur_Team5.csv\", delim = \";\")\n# Achtung! Beim Umwandeln in das CSV muss hier die Titelzeile entfernt werden\n# damit das Einlesen reibungslos funktioniert\n\ndf_team6 <- read_delim(\"data/Aufnahmen_Landforst_HS21_Gruppe_6.csv\", delim = \";\")\n\n# hier koennen die Probekreise mit den Angaben zur Anzahl Rehlokalisationen und\n# der LIDAR-basierten Ableitung der Waldstruktur eingelesen werden\n\ndf_reh <- read_delim(\"data/Aufgabe3_Reh_Waldstruktur_211014.csv\", delim = \";\")\nstr(df_reh)\n\n# Die eingelesenen Datensaetze anschauen und versuchen zu einem Gesamtdatensatz\n# verbinden. Ist der Output zufriedenstellend?\n\ndf_gesamt <- bind_rows(df_team1, df_team2, df_team3, df_team4, df_team5, df_team6)\nstr(df_gesamt)\n```\n:::\n\n\n### Aufgabe 1: \n\n##### 1.1 Einfuegen zusaetzliche Spalte pro Datensatz mit der Gruppenzugehoerigkeit (Team1-6) \n##### 1.2 Spaltenumbenennung damit die Bezeichungen in allen Datensaetzen gleich sind und der Gesamtdatensatz zusammengefuegt werden kann\n##### --> Befehle mutate und rename, mit pipes (%>%) in einem Schritt moeglich\n\n\n\n\n\n### Aufgabe 2: \n\n##### Zusammenfuehren der Teildatensaetze zu einem Datensatz\n\n\n\n\n\n### Aufgabe 3: \n\n##### Verbinden (join) des Datensatzes der Felderhebungen mit dem Datensatz der Rehe. \n\n##### Ziel: ein Datensatz mit allen Kreisen der Felderhebung, angereichert mit den Umweltvariablen Understory und Overstory aus den LIDAR-Daten (DG_us, DG_os) aus dem Rehdatensatz. \n##### --> Welche Art von join? Welche Spalten zum Verbinden (by = ?) der Datensaetze\n\n\n\n\n\n### Aufgabe 4: \n\n##### Scatterplot der korrespondondierenden Umweltvariablen aus den Felderhebungen gegen die Umweltvariablen aus den LIDAR-Daten erstellen (zusaetzlich Einfaerben der Gruppen und Regressionslinie darueberlegen). \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}