# 6. Lösung


```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE, results = "hide", fig.align="left")
```

```{r}
#| include: false


```

# Aufgabe 1: Verlauf der Besuchszahlen / m

```{r}
#.################################################################################################
# 3. DESKRIPTIVE ANALYSE UND VISUALISIERUNG #####
#.################################################################################################

# 3.1 Verlauf der Besuchszahlen / m ####
# Monatliche Summen am Standort

# wann beginnt die Datenreihe schon wieder?
first(depo_m$Ym)
# und wann ist die fertig?
last(depo_m$Ym)

# Plotte
ggplot(depo_m, mapping = aes(Ym, Total, group = 1))+ # group = 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird
  #zeichne Lockdown 1
  geom_rect(mapping = aes(xmin = ym("2020-3"), xmax = ym("2020-5"),
                          ymin = 0, ymax = max(Total+(Total/100*10))),
            fill = "lightskyblue", alpha = 0.2, colour = NA)+
  #zeichne Lockdown 2
  geom_rect(mapping = aes(xmin = ym("2020-12"), xmax = ym("2021-3"), 
                          ymin = 0, ymax = max(Total+(Total/100*10))), 
            fill = "lightskyblue", alpha = 0.2, colour = NA)+
  geom_line(alpha = 0.6, size = 1.5)+
  labs(title= "", y="Fussgänger:innen pro Monat", x = "Jahr")+
  theme_linedraw(base_size = 15)+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))

ggsave("Entwicklung_Zaehlstelle.png", width=20, height=10, units="cm", dpi=1000, 
       path = "fallstudie_s/results/")  

# mache einen prozentuellen areaplot
ggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) + 
  geom_area(position = "fill")+
  scale_fill_manual(values = mycolors)+
  theme_classic(base_size = 15)+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
  labs(title= "", y="Verteilung Fussgänger:innen / Monat [%]", x = "Jahr")

ggsave("Proz_Entwicklung_Zaehlstelle.png", width=20, height=10, units="cm", dpi=1000, 
       path = "fallstudie_s/results/")  
```


# Aufgabe 2: Wochengang

```{r}
# mean / d / phase
mean_phase_wd <- depo_d |> 
  group_by(Wochentag, Phase) |> 
  summarise(Total = mean(Total))

write.csv(mean_phase_wd, "fallstudie_s/results/mean_phase_wd.csv")

#plot
ggplot(data = depo_d)+
  geom_boxplot(mapping = aes(x= Wochentag, y = Total, fill = Phase))+
  labs(title="", y= "Fussgänger:innen pro Tag")+
  scale_fill_manual(values = c("lightgray", "royalblue", "red4", "orangered", "gold2"))+
  theme_classic(base_size = 15)+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
        legend.title = element_blank())

ggsave("Wochengang_Lockdown.png", width=15, height=15, units="cm", dpi=1000, 
       path = "fallstudie_s/results/")
```


```{r}
# Statistik: Unterschied WE und WO waehrend Lockdown 1
t.test(depo_d$Total [depo_d$Phase == "Lockdown_1" & depo_d$Wochenende=="Werktag"], 
       depo_d$Total [depo_d$Phase == "Lockdown_1" & depo_d$Wochenende=="Wochenende"])
```

# Aufgabe 3: Tagesgang
```{r}
# Bei diesen Berechnungen wird jeweils der Mittelwert pro Stunde berechnet. 
# wiederum nutzen wir dafuer "pipes"
Mean_h <- depo |> 
  group_by(Wochentag, Stunde, Phase) |> 
  summarise(Total = mean(Total)) 

# Plotte den Tagesgang, unterteilt nach Wochentagen

ggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag))+
  geom_line(size = 2)+
  scale_colour_viridis_d()+
  scale_linetype_manual(values = c(rep("solid", 5),  "twodash", "twodash"))+
  scale_x_continuous(breaks = c(seq(0, 23, by = 2)), labels = c(seq(0, 23, by = 2)))+
  facet_grid(rows = vars(Phase))+
  labs(x="Uhrzeit [h]", y= "∅ Fussganger_Innen / h", title = "")+
  lims(y = c(0,25))+
  theme_linedraw(base_size = 15)

ggsave("Tagesgang.png", width=25, height=25, units="cm", dpi=1000,
       path = "fallstudie_s/results/")
```

# Aufgabe 4: Kennzahlen

```{r}
total_phase <- depo_daytime |> 
  # gruppiere nach Phasen inkl. Normal. Diese Levels haben wir bereits definiert
  group_by(Phase, Tageszeit) |> 
  summarise(Total = sum(Total),
            IN = sum(Fuss_IN),
            OUT = sum(Fuss_OUT))

write.csv(total_phase, "fallstudie_s/results/total_phase.csv")

# mean besser Vergleichbar, da Zeitreihen unterschiedlich lange
mean_phase_d <- depo_daytime |> 
  group_by(Phase, Tageszeit) |> 
  summarise(Total = mean(Total),
            IN = mean(Fuss_IN),
            OUT = mean(Fuss_OUT))
# berechne prozentuale Richtungsverteilung
mean_phase_d <- mean_phase_d |> 
  mutate(Proz_IN = round(100/Total*IN, 1)) |> # berechnen und auf eine Nachkommastelle runden
  mutate(Proz_OUT = round(100/Total*OUT,1))

write.csv(mean_phase_d, "fallstudie_s/results/mean_phase_d.csv")

# plotte die Verteilung der Fussgänger nach Tageszeit abhängig von der Phase
ggplot(mean_phase_d, mapping = aes(Phase, Total, fill=Tageszeit)) + 
  geom_col(position = "fill")+
  scale_fill_manual(values = mycolors)+
  theme_classic(base_size = 15)+
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))+
  labs(title= "", y="Verteilung Fussgänger:innen nach Tageszeit [%]", x = "Phase")

ggsave("Proz_Entwicklung_Zaehlstelle_Phase.png", width=20, height=15, units="cm", dpi=1000, 
       path = "fallstudie_s/results/")  
```

















# Aufgabe 4: Kennzahlen

```{r}
# 3.4 Kennzahlen ####
total_phase <- depo_d %>% 
  # gruppiere nach Phasen inkl. Normal. Diese Levels haben wir bereits definiert
  group_by(Phase) %>% 
  summarise(Total = sum(Total),
            IN = sum(Fuss_IN),
            OUT = sum(Fuss_OUT))

# write.csv(total_phase, "_fallstudien/_R_analysis/results/total_phase.csv")

# mean besser Vergleichbar, da Zeitreihen unterschiedlich lange
mean_phase_d <- depo_d %>% 
  group_by(Phase) %>% 
  summarise(Total = mean(Total),
            IN = mean(Fuss_IN),
            OUT = mean(Fuss_OUT))
# berechne prozentuale Richtungsverteilung
mean_phase_d <- mean_phase_d %>% 
  mutate(Proz_IN = round(100/Total*IN, 1)) %>% # berechnen und auf eine Nachkommastelle runden
  mutate(Proz_OUT = round(100/Total*OUT,1))

# write.csv(mean_phase_d, "_fallstudien/_R_analysis/results/mean_phase_d.csv")

# selektiere absolute Zahlen
# behalte rel. Spalten (nur die relativen Prozentangaben)
mean_phase_d_abs <- mean_phase_d %>% dplyr::select(-c(Total, Proz_IN, Proz_OUT))

# transformiere fuer Plotting
mean_phase_d_abs <- pivot_longer(mean_phase_d_abs, cols = c("IN","OUT"), 
             names_to = "Gruppe", values_to = "Durchschnitt")

# selektiere relative Zahlen
# behalte rel. Spalten (nur die relativen Prozentangaben)
mean_phase_d_proz <- mean_phase_d %>% dplyr::select(-c(Total:OUT))

# transformiere fuer Plotting
mean_phase_d_proz <- pivot_longer(mean_phase_d_proz, cols = c("Proz_IN","Proz_OUT"), 
                                  names_to = "Gruppe", values_to = "Durchschnitt")

# Visualisierung abs
abs <- ggplot(data = mean_phase_d_abs, mapping = aes(x = Gruppe, y = Durchschnitt, fill = Phase))+
  geom_col(position = "dodge", width = 0.8)+
  scale_fill_manual(values = c("royalblue", "red4", "orangered", "gold2"), name = "Phase")+
  scale_x_discrete(labels = c("IN", "OUT"))+
  labs(y = "Durchschnitt [mean]", x= "Bewegungsrichtung")+
  theme_classic(base_size = 15)+
  theme(legend.position = "bottom")

# Visualisierung %
proz <- ggplot(data = mean_phase_d_proz, mapping = aes(x = Gruppe, y = Durchschnitt, fill = Phase))+
  geom_col(position = "dodge", width = 0.8)+
  scale_fill_manual(values = c("royalblue", "red4", "orangered", "gold2"), name = "Phase")+
  scale_x_discrete(labels = c("IN", "OUT"))+
  labs(y = "Durchschnitt [%]", x= "Bewegungsrichtung")+
  theme_classic(base_size = 15)+
  theme(legend.position = "bottom")

# Arrange und Export Verteilung
ggarrange(abs,            # plot 1 aufrufen
          proz,            # plot 2 aufrufen
          ncol = 2, nrow = 1,    # definieren, wie die plots angeordnet werden
          heights = c(1),        # beide sind bleich hoch
          widths = c(1,0.95),    # plot 2 ist aufgrund der fehlenden y-achsenbesch. etwas schmaler
          labels = c("a) Absolute Verteilung", "b) Relative Verteilung"),
          label.x = 0,        # wo stehen die labels
          label.y = 1.0,
          common.legend = TRUE, legend = "bottom") # wir brauchen nur eine Legende, unten

# ggsave("Verteilung.png", width=20, height=15, units="cm", dpi=1000,
#        path = "_fallstudien/_R_analysis/results/")
```

