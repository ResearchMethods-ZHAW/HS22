---
title: "Anleitungen für Admins"
description: |
  Im Kurs Research Methods verwenden wir seit einigen Jahren RMarkdown um die R Unterlagen für die Studenten bereit zu stellen. Diese Anleitung soll alle nötigen Informationen für "Admins" zur Verfügung stellen, damit dieser Prozess möglichst reibungslos abläuft. 
  Die Anleitung besteht aus einer Kurzen Einführung in die Verwendeten Tools ("distill" und "renv") sowie drei Anleitungen (1. Software aufsetzen, 2. Projekt aufsetzen, 3. Inhalte editieren und veröffentlichen)
---

## Allgemeines

Der Workflow in Kürze:

```{mermaid}
graph TD
    subgraph You on YOUR computer 
    A["pull the changes from your remote branch -- which has to be even to the master"]
    B["edit your Rmd"]
    C["knit your Rmd"]
    D["add + commit you local changes"]
    E["push your changes to it's remote counterpart"]
    F["make a pull request -- comparing remote of yours to the remote master"]
    G["merge to the master, if no conflicts arise"]
    A-->B-->C-->D-->E-->F-->G
    end
    subgraph Github on the server
    I["'builds' the page"]
    J["pushes the changes to the 'gh-pages'-branch"]
    G--> I -->J
    end
``` 

## Anleitung 1: Software Aufsetzen

### R, RStudio und Git installieren

*(wer dies bereits gemacht hat oder auf dem RStudio Server arbeitet, kann diesen Schritt überspringen)*

Wer Lokal auf seinem eingenen PC arbeiten will, muss eine aktuell version von R, RStudio und Git installieren. Siehe dazu folgende Anleitungen:

-   [happygitwithr: Install or upgrade R and RStudio](https://happygitwithr.com/install-r-rstudio.html)
-   [happygitwithr: Install Git](https://happygitwithr.com/install-git.html)

### RStudio Konfigurieren

Ich empfehle folgende Konfiguration in RStudio (`Global Options`):

-   R Markdown
    -   Show document outline by default: checked *(Stellt ein Inhaltsverzeichnis rechts von .Rmd files dar)*
    -   Soft-wrap R Markdown files: checken *(macht autmatische Zeilenumbrüche bei .Rmd files)*
    -   Show in document outline: Sections Only *(zeigt nur "Sections" im Inhaltsverzeichnis)*
    -   Show output preview in: Window *(beim kopilieren von Rmd Files wird im Anschluss ein Popup mit dem Resultat dargestellt)*
    -   Show equation an image previews: In a popup
    -   Evaluate chunks in directory: Document (**\<- wichtig !**)
-   Code \> Tab "Saving"
    -   Default Text Encoding: UTF-8 (**\<- wichtig !**)

### Git konfigurieren

*(wer dies bereits gemacht hat, kann diesen Schritt überspringen)*

Nach der Installation muss git konfiguriert werden. Siehe dazu folgende Kapitel:

-   [happygitwithr: Introduce yourself to Git](https://happygitwithr.com/hello-git.html)
-   [happygitwithr: Cache credentials for HTTPS](https://happygitwithr.com/credential-caching.html)

## Anleitung 2: Projekt aufsetzen

### Repo Klonen

Um die ganzen \*.Rmd Files lokal bearbeiten zu können, muss das Repository geklont werden. Mit RStudio ist dies sehr einfach, siehe dazu nachstehende Anleitung. Als Repo-URL folgendes einfügen: `https://github.com/ResearchMethods-ZHAW/HS21.git`

-   [happygitwithr: New RStudio Project via git clone](https://happygitwithr.com/new-github-first.html#new-rstudio-project-via-git)

### "Upstream" setzen

Um das Github repo als standart "upstream" zu setzen muss man im Terminal nachstehenden Befehl eingeben. Danach RStudio neu starten und das entsprechende Projekt laden. Nun sollte im "Git" fenster der "Push" button nicht mehr inaktiv sein.

    git branch -u origin/main

### Notwendige Packages installieren

Wie bereits erwähnt, verwenden wir im Projekt `renv`.

-   Installiere dieses Package mit `install.packages("renv")`
-   Installiere alle notwendigen Packages mit `renv::restore()`

Wichtig: Es hat sich herausgestellt, das die Vereinigungsmenge aller Packages eine unhandlich grosse Liste von Packages ist: Damit nicht alle Personen alle Packages installieren müssen, verwenden wir `renv` mit der Einstellung `snapshot.type: explicit`. Damit werden in `renv.lock` nur Packages inkludiert, welche in `DESCRIPTION` festgehalten sind.

Zudem haben wir die RVersion Manuell gesetzt, und zwar via `r.version: 4.1.0`

Weitere infos zu `renv` für Kollaboration: [Collaborating with renv](https://rstudio.github.io/renv/articles/collaborating.html)

## Anleitung 3: Inhalte Editieren und veröffentlichen

```{r, echo = FALSE}
di <- list.dirs(recursive = FALSE,full.names = F)
di <- di[startsWith(di, "_")]
aufzaehlung <- function(vec, word = "und"){paste(paste(head(vec,-1), collapse = ", "),word,tail(vec,1))}

```

-   Eine `distill` Webseite besteht aus einzelnen .Rmd Files
-   **Pro Rmd-File exisitert ein eigener Ordner im Projekt**
-   Diese Rmd fiels werden beim Kompilieren (`knìt`) in .html-Files konvertiert
-   Um daraus eine zusammenhängende Website zu machen ist das File `_site.yml` verantwortlich.

### Rmd erstellen

Die meisten Inhalte exisitieren bereits und ihr müsst sie nur noch anpassen. Falls ihr aber ein neues .Rmd File erstellen möchtet, müsst ihr einen Unterordner in einem der Ordner `r aufzaehlung(di, "oder")` erstellen. Der Name des Unterordners bestimmt einerseits den URL des Beitrags und andererseits die Position der Erscheinung in der "Listing".

Fügt dem Artikel danach einen YAML header hinzu. Nutzt dazu am besten die Vorlage eines ähnlichen Artikels.

### Rmd editieren

Um Inhalte zu editieren, öffnet ihr das entsprechende .Rmd file in einem der Ordner `r aufzaehlung(di, "oder")`. Ihr könnt dieses File wie ein reguläres, eigenständiges .Rmd File handhaben. Wichtig: Alle Pfade im Dokument sind *relativ* zum .Rmd File zu verstehen: **Das Working directory ist der Folder des entsprechenden Rmd Files!!**.

### Rmd Kompilieren

Um das Rmd in Html zu konvertieren ("Kompilieren") klickt ihr auf "Knit" oder nutzt die Tastenkombination `Ctr + Shift + K`.

### Änderungen veröffentlichen

Um die Änderungen zu veröffentlichen (für die Studenten sichtbar zu machen) müsst ihr diese via git auf das Repository "pushen". Vorher aber müsst ihr die Änderungen `stage`-en und `commit`-en. Ich empfehle, dass ihr zumindest zu beginn mit dem RStudio "Git" Fenster arbeitet.

-   `stage`: Setzen eines Häckchens bei "Staged" (im Terminal mit `git add .`)
-   `commit`: Klick auf den Button "commit" (im Terminal mit `git commit -m "deine message"`)
-   `pull`: Klick auf den Button "Pull" (im Terminal mit `git pull`)
-   `push`: Click auf den button "Push" (im Terminal mit `git push`)

*Achtung*:

-   Um Änderungen, die ihr am .Rmd gemacht habt, sichtbar zu machen müsst ihr das .Rmd File zuerst kompilieren (mit `Ctrl+Shift+K` oder dem button "Knit")
-   Eure Beitrag werden in einem html file gespeichert, welches gleich heisst wie euer Rmd file (aber eben mit der html Erweiterung)
-   Das "builden" der site passiert nach jedem Push via einer github action

## Anleitung 4 (Fortgeschritten): Listings editieren und veröffentlichen

*(dieser Teil ist eher "advanced" und nicht für alle Interessant)*

`distill` verfügt über die Möglichkeit, sogenannte "Collections" zu machen. Eine *collection* ist eine Sammlung von .Rmd files zu einem bestimmten Thema, für welche automatisch eine Übersichtsseite (sog. "Listing") erstellt wird.

Um eine *collection* zu erstellen:

1.  neuer Ordner mit entsprechendem Namen und vorangestelltem Underscore (`_`) im Projektordner erstellen (z.b. `r di[1]`)
2.  neues Rmd-File mit einem passenden Namen im Projektordner erstellen (z.B. `infoVis.Rmd`)
3.  das neue Rmd File mit einem Rmd-YAML Header verstehen mit mindestens folgendem Inhalt: `title` und `listing` (siehe unten)

<!-- -->

    ---
    title: "InfoVis"      # <- der title kann selbst gewählt werden
    listing: infovis      # <- hier kommt der ordnername der "collection" ohne Underscore
    ---

4.  die Listing in `_site.yml` zugänglich machen:

<!-- -->

    navbar:
      right:
        - text: "InfoVis1"     # <- der Text kann frei gewählt werden
          href: InfoVis.html   # <- hier kommt der Name des Rmd files mit der Endung .html
